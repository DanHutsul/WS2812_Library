
LED_Strip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008398  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08008530  08008530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008554  08008554  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008554  08008554  00018554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800855c  0800855c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800855c  0800855c  0001855c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008560  08008560  00018560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b0  20000090  080085f4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000940  080085f4  00020940  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dfc9  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003d7d  00000000  00000000  0003e089  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  00041e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001560  00000000  00000000  000434f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002cd78  00000000  00000000  00044a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000148c7  00000000  00000000  000717d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095edf  00000000  00000000  00086097  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011bf76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006274  00000000  00000000  0011bff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008518 	.word	0x08008518

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08008518 	.word	0x08008518

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <int_to_bin_digit>:
                 : [useconds] "r" (useconds)
                 : "r0");
}

void int_to_bin_digit(unsigned int in, int count, int* out)
{
 80004d8:	b480      	push	{r7}
 80004da:	b087      	sub	sp, #28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
    unsigned int mask = 1U << (count-1);
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	3b01      	subs	r3, #1
 80004e8:	2201      	movs	r2, #1
 80004ea:	fa02 f303 	lsl.w	r3, r2, r3
 80004ee:	613b      	str	r3, [r7, #16]
    int i;
    for (i = 0; i < count; i++) {
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]
 80004f4:	e013      	b.n	800051e <int_to_bin_digit+0x46>
        out[i] = (in & mask) ? 1 : 0;
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	693b      	ldr	r3, [r7, #16]
 80004fa:	4013      	ands	r3, r2
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	bf14      	ite	ne
 8000500:	2301      	movne	r3, #1
 8000502:	2300      	moveq	r3, #0
 8000504:	b2d9      	uxtb	r1, r3
 8000506:	697b      	ldr	r3, [r7, #20]
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	4413      	add	r3, r2
 800050e:	460a      	mov	r2, r1
 8000510:	601a      	str	r2, [r3, #0]
        in <<= 1;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < count; i++) {
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	3301      	adds	r3, #1
 800051c:	617b      	str	r3, [r7, #20]
 800051e:	697a      	ldr	r2, [r7, #20]
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	429a      	cmp	r2, r3
 8000524:	dbe7      	blt.n	80004f6 <int_to_bin_digit+0x1e>
    }
}
 8000526:	bf00      	nop
 8000528:	371c      	adds	r7, #28
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <RGB_decoder>:

void RGB_decoder(int R, int G, int B, int* out) {
 8000532:	b580      	push	{r7, lr}
 8000534:	b0a0      	sub	sp, #128	; 0x80
 8000536:	af00      	add	r7, sp, #0
 8000538:	60f8      	str	r0, [r7, #12]
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	607a      	str	r2, [r7, #4]
 800053e:	603b      	str	r3, [r7, #0]
    int binR[9];
    int_to_bin_digit(R, 9, binR);
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000546:	2109      	movs	r1, #9
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff ffc5 	bl	80004d8 <int_to_bin_digit>
    int binG[9];
    int_to_bin_digit(G, 9, binG);
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000554:	2109      	movs	r1, #9
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ffbe 	bl	80004d8 <int_to_bin_digit>
    int binB[9];
    int_to_bin_digit(B, 8, binB);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f107 0210 	add.w	r2, r7, #16
 8000562:	2108      	movs	r1, #8
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff ffb7 	bl	80004d8 <int_to_bin_digit>

    for (int i = 0; i < 8; i++) {
 800056a:	2300      	movs	r3, #0
 800056c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800056e:	e028      	b.n	80005c2 <RGB_decoder+0x90>
        out[i] = binG[i];
 8000570:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	683a      	ldr	r2, [r7, #0]
 8000576:	441a      	add	r2, r3
 8000578:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000580:	440b      	add	r3, r1
 8000582:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8000586:	6013      	str	r3, [r2, #0]
        out[i+8] = binR[i];
 8000588:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800058a:	3308      	adds	r3, #8
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	441a      	add	r2, r3
 8000592:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800059a:	440b      	add	r3, r1
 800059c:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80005a0:	6013      	str	r3, [r2, #0]
        out[i+16] = binB[i];
 80005a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005a4:	3310      	adds	r3, #16
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	441a      	add	r2, r3
 80005ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80005b4:	440b      	add	r3, r1
 80005b6:	f853 3c70 	ldr.w	r3, [r3, #-112]
 80005ba:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < 8; i++) {
 80005bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005be:	3301      	adds	r3, #1
 80005c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80005c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005c4:	2b07      	cmp	r3, #7
 80005c6:	ddd3      	ble.n	8000570 <RGB_decoder+0x3e>
    }
}
 80005c8:	bf00      	nop
 80005ca:	3780      	adds	r7, #128	; 0x80
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <light_strip>:
// GPIOD->ODR |= (1<<11); //
// GPIOD->ODR &= ~(1<<11);
void light_strip(int* data) {
 80005d0:	b480      	push	{r7}
 80005d2:	b089      	sub	sp, #36	; 0x24
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	int data_size = 24;
 80005d8:	2318      	movs	r3, #24
 80005da:	61bb      	str	r3, [r7, #24]
	for(size_t i = 0; i<data_size; ++i){
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
 80005e0:	e032      	b.n	8000648 <light_strip+0x78>
			if(data[i] == 0){
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d114      	bne.n	800061a <light_strip+0x4a>
				GPIOD->BSRR = (1<<11);
 80005f0:	4b1a      	ldr	r3, [pc, #104]	; (800065c <light_strip+0x8c>)
 80005f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005f6:	619a      	str	r2, [r3, #24]
 80005f8:	2307      	movs	r3, #7
 80005fa:	613b      	str	r3, [r7, #16]
	asm volatile("   mov r0, %[useconds]    \n\t"
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	4618      	mov	r0, r3
 8000600:	3801      	subs	r0, #1
 8000602:	d8fd      	bhi.n	8000600 <light_strip+0x30>
				udelay_asm(7);
				GPIOD->BSRR = (1<< (11 + 16) );
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <light_strip+0x8c>)
 8000606:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800060a:	619a      	str	r2, [r3, #24]
 800060c:	2309      	movs	r3, #9
 800060e:	617b      	str	r3, [r7, #20]
	asm volatile("   mov r0, %[useconds]    \n\t"
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	4618      	mov	r0, r3
 8000614:	3801      	subs	r0, #1
 8000616:	d8fd      	bhi.n	8000614 <light_strip+0x44>
 8000618:	e013      	b.n	8000642 <light_strip+0x72>
				udelay_asm(9);
			} else{
				GPIOD->BSRR = (1<<11);
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <light_strip+0x8c>)
 800061c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000620:	619a      	str	r2, [r3, #24]
 8000622:	2310      	movs	r3, #16
 8000624:	60bb      	str	r3, [r7, #8]
	asm volatile("   mov r0, %[useconds]    \n\t"
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	4618      	mov	r0, r3
 800062a:	3801      	subs	r0, #1
 800062c:	d8fd      	bhi.n	800062a <light_strip+0x5a>
				udelay_asm(16);
				GPIOD->BSRR = (1<< (11 + 16) );
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <light_strip+0x8c>)
 8000630:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000634:	619a      	str	r2, [r3, #24]
 8000636:	2301      	movs	r3, #1
 8000638:	60fb      	str	r3, [r7, #12]
	asm volatile("   mov r0, %[useconds]    \n\t"
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	4618      	mov	r0, r3
 800063e:	3801      	subs	r0, #1
 8000640:	d8fd      	bhi.n	800063e <light_strip+0x6e>
	for(size_t i = 0; i<data_size; ++i){
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	3301      	adds	r3, #1
 8000646:	61fb      	str	r3, [r7, #28]
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	69fa      	ldr	r2, [r7, #28]
 800064c:	429a      	cmp	r2, r3
 800064e:	d3c8      	bcc.n	80005e2 <light_strip+0x12>
				udelay_asm(1);
			}
		  }

}
 8000650:	bf00      	nop
 8000652:	3724      	adds	r7, #36	; 0x24
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	40020c00 	.word	0x40020c00

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b0c8      	sub	sp, #288	; 0x120
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000666:	f000 fe35 	bl	80012d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066a:	f000 f87f 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066e:	f000 fa59 	bl	8000b24 <MX_GPIO_Init>
  MX_DMA_Init();
 8000672:	f000 fa37 	bl	8000ae4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000676:	f000 f8fd 	bl	8000874 <MX_I2C1_Init>
  MX_I2S2_Init();
 800067a:	f000 f929 	bl	80008d0 <MX_I2S2_Init>
  MX_I2S3_Init();
 800067e:	f000 f955 	bl	800092c <MX_I2S3_Init>
  MX_SPI1_Init();
 8000682:	f000 f983 	bl	800098c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000686:	f007 fb97 	bl	8007db8 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 800068a:	f000 f9b5 	bl	80009f8 <MX_TIM2_Init>
  //HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)&BUF_DMA, ARRAY_LEN);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  GPIOD->BSRR = (1<<11);
 800068e:	4b36      	ldr	r3, [pc, #216]	; (8000768 <main+0x108>)
 8000690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000694:	619a      	str	r2, [r3, #24]
  HAL_Delay(1);
 8000696:	2001      	movs	r0, #1
 8000698:	f000 fe8e 	bl	80013b8 <HAL_Delay>
  GPIOD->BSRR = (1<< (11 + 16) ); //
 800069c:	4b32      	ldr	r3, [pc, #200]	; (8000768 <main+0x108>)
 800069e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006a2:	619a      	str	r2, [r3, #24]
  HAL_Delay(1);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f000 fe87 	bl	80013b8 <HAL_Delay>

  int data1[24];
  int data3[24];
  int data2[24];

  RGB_decoder(0, 204, 255, data1);
 80006aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80006ae:	22ff      	movs	r2, #255	; 0xff
 80006b0:	21cc      	movs	r1, #204	; 0xcc
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff ff3d 	bl	8000532 <RGB_decoder>
  RGB_decoder(102, 0, 102, data2);
 80006b8:	463b      	mov	r3, r7
 80006ba:	2266      	movs	r2, #102	; 0x66
 80006bc:	2100      	movs	r1, #0
 80006be:	2066      	movs	r0, #102	; 0x66
 80006c0:	f7ff ff37 	bl	8000532 <RGB_decoder>
  RGB_decoder(51, 51, 153, data3);
 80006c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006c8:	2299      	movs	r2, #153	; 0x99
 80006ca:	2133      	movs	r1, #51	; 0x33
 80006cc:	2033      	movs	r0, #51	; 0x33
 80006ce:	f7ff ff30 	bl	8000532 <RGB_decoder>
  //int i = 0;
  //add_led(256, 0, 0, data, i);
  while (1)
  {

	  light_strip(data1);
 80006d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ff7a 	bl	80005d0 <light_strip>
	  light_strip(data2);
 80006dc:	463b      	mov	r3, r7
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff76 	bl	80005d0 <light_strip>
	  light_strip(data3);
 80006e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff71 	bl	80005d0 <light_strip>
	  light_strip(data1);
 80006ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ff6c 	bl	80005d0 <light_strip>
	  	  light_strip(data2);
 80006f8:	463b      	mov	r3, r7
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff ff68 	bl	80005d0 <light_strip>
	  	  light_strip(data3);
 8000700:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff63 	bl	80005d0 <light_strip>
	  	light_strip(data1);
 800070a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ff5e 	bl	80005d0 <light_strip>
	  		  light_strip(data2);
 8000714:	463b      	mov	r3, r7
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff ff5a 	bl	80005d0 <light_strip>
	  		  light_strip(data3);
 800071c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff55 	bl	80005d0 <light_strip>
	  		light_strip(data1);
 8000726:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff50 	bl	80005d0 <light_strip>
	  			  	  light_strip(data2);
 8000730:	463b      	mov	r3, r7
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff4c 	bl	80005d0 <light_strip>
	  			  	  light_strip(data3);
 8000738:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff47 	bl	80005d0 <light_strip>
	  			  	light_strip(data1);
 8000742:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff42 	bl	80005d0 <light_strip>
	  			  		  light_strip(data2);
 800074c:	463b      	mov	r3, r7
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ff3e 	bl	80005d0 <light_strip>
	  			  		  light_strip(data3);
 8000754:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff39 	bl	80005d0 <light_strip>
	  }*/
	  //GPIOD->BSRR = (1<<11);
	  //HAL_Delay(1);
	  //GPIOD->BSRR = (1<< (11 + 16) ); //
	  //HAL_Delay(1);
	  HAL_Delay(10);
 800075e:	200a      	movs	r0, #10
 8000760:	f000 fe2a 	bl	80013b8 <HAL_Delay>
	  light_strip(data1);
 8000764:	e7b5      	b.n	80006d2 <main+0x72>
 8000766:	bf00      	nop
 8000768:	40020c00 	.word	0x40020c00

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09a      	sub	sp, #104	; 0x68
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000776:	2230      	movs	r2, #48	; 0x30
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f007 fe0a 	bl	8008394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]
 80007a0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b31      	ldr	r3, [pc, #196]	; (800086c <SystemClock_Config+0x100>)
 80007a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007aa:	4a30      	ldr	r2, [pc, #192]	; (800086c <SystemClock_Config+0x100>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	6413      	str	r3, [r2, #64]	; 0x40
 80007b2:	4b2e      	ldr	r3, [pc, #184]	; (800086c <SystemClock_Config+0x100>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <SystemClock_Config+0x104>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a2a      	ldr	r2, [pc, #168]	; (8000870 <SystemClock_Config+0x104>)
 80007c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007cc:	6013      	str	r3, [r2, #0]
 80007ce:	4b28      	ldr	r3, [pc, #160]	; (8000870 <SystemClock_Config+0x104>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007da:	2301      	movs	r3, #1
 80007dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007ec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ee:	2304      	movs	r3, #4
 80007f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007f2:	2348      	movs	r3, #72	; 0x48
 80007f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007fa:	2303      	movs	r3, #3
 80007fc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000802:	4618      	mov	r0, r3
 8000804:	f003 fe5e 	bl	80044c4 <HAL_RCC_OscConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800080e:	f000 fa73 	bl	8000cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	230f      	movs	r3, #15
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	2302      	movs	r3, #2
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000822:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082c:	2102      	movs	r1, #2
 800082e:	4618      	mov	r0, r3
 8000830:	f004 f8b8 	bl	80049a4 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800083a:	f000 fa5d 	bl	8000cf8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800083e:	2301      	movs	r3, #1
 8000840:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000842:	23c8      	movs	r3, #200	; 0xc8
 8000844:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8000846:	2305      	movs	r3, #5
 8000848:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4618      	mov	r0, r3
 8000854:	f004 fa84 	bl	8004d60 <HAL_RCCEx_PeriphCLKConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800085e:	f000 fa4b 	bl	8000cf8 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3768      	adds	r7, #104	; 0x68
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C1_Init+0x50>)
 800087a:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <MX_I2C1_Init+0x54>)
 800087c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C1_Init+0x50>)
 8000880:	4a12      	ldr	r2, [pc, #72]	; (80008cc <MX_I2C1_Init+0x58>)
 8000882:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_I2C1_Init+0x50>)
 8000892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000896:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <MX_I2C1_Init+0x50>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_I2C1_Init+0x50>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a4:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <MX_I2C1_Init+0x50>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_I2C1_Init+0x50>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_I2C1_Init+0x50>)
 80008b2:	f003 f82f 	bl	8003914 <HAL_I2C_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008bc:	f000 fa1c 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200000c0 	.word	0x200000c0
 80008c8:	40005400 	.word	0x40005400
 80008cc:	000186a0 	.word	0x000186a0

080008d0 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_I2S2_Init+0x50>)
 80008d6:	4a13      	ldr	r2, [pc, #76]	; (8000924 <MX_I2S2_Init+0x54>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_I2S2_Init+0x50>)
 80008dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e0:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_I2S2_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008e8:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <MX_I2S2_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_I2S2_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_I2S2_Init+0x50>)
 80008f6:	4a0c      	ldr	r2, [pc, #48]	; (8000928 <MX_I2S2_Init+0x58>)
 80008f8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_I2S2_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_I2S2_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_I2S2_Init+0x50>)
 8000908:	2201      	movs	r2, #1
 800090a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_I2S2_Init+0x50>)
 800090e:	f003 f939 	bl	8003b84 <HAL_I2S_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000918:	f000 f9ee 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000020c 	.word	0x2000020c
 8000924:	40003800 	.word	0x40003800
 8000928:	00017700 	.word	0x00017700

0800092c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_I2S3_Init+0x54>)
 8000932:	4a14      	ldr	r2, [pc, #80]	; (8000984 <MX_I2S3_Init+0x58>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000936:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_I2S3_Init+0x54>)
 8000938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <MX_I2S3_Init+0x54>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_I2S3_Init+0x54>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <MX_I2S3_Init+0x54>)
 800094c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000950:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_I2S3_Init+0x54>)
 8000954:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <MX_I2S3_Init+0x5c>)
 8000956:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_I2S3_Init+0x54>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_I2S3_Init+0x54>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_I2S3_Init+0x54>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_I2S3_Init+0x54>)
 800096c:	f003 f90a 	bl	8003b84 <HAL_I2S_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000976:	f000 f9bf 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000254 	.word	0x20000254
 8000984:	40003c00 	.word	0x40003c00
 8000988:	00017700 	.word	0x00017700

0800098c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_SPI1_Init+0x64>)
 8000992:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <MX_SPI1_Init+0x68>)
 8000994:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <MX_SPI1_Init+0x64>)
 8000998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800099c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009be:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009d8:	220a      	movs	r2, #10
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_SPI1_Init+0x64>)
 80009de:	f004 fb0d 	bl	8004ffc <HAL_SPI_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009e8:	f000 f986 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000174 	.word	0x20000174
 80009f4:	40013000 	.word	0x40013000

080009f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	; 0x38
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a0c:	f107 0320 	add.w	r3, r7, #32
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
 8000a24:	615a      	str	r2, [r3, #20]
 8000a26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a28:	4b2d      	ldr	r3, [pc, #180]	; (8000ae0 <MX_TIM2_Init+0xe8>)
 8000a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a30:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <MX_TIM2_Init+0xe8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <MX_TIM2_Init+0xe8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8999;
 8000a3c:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <MX_TIM2_Init+0xe8>)
 8000a3e:	f242 3227 	movw	r2, #8999	; 0x2327
 8000a42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a44:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <MX_TIM2_Init+0xe8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <MX_TIM2_Init+0xe8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a50:	4823      	ldr	r0, [pc, #140]	; (8000ae0 <MX_TIM2_Init+0xe8>)
 8000a52:	f004 fb37 	bl	80050c4 <HAL_TIM_Base_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a5c:	f000 f94c 	bl	8000cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481c      	ldr	r0, [pc, #112]	; (8000ae0 <MX_TIM2_Init+0xe8>)
 8000a6e:	f004 fdfd 	bl	800566c <HAL_TIM_ConfigClockSource>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a78:	f000 f93e 	bl	8000cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a7c:	4818      	ldr	r0, [pc, #96]	; (8000ae0 <MX_TIM2_Init+0xe8>)
 8000a7e:	f004 fb4c 	bl	800511a <HAL_TIM_PWM_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a88:	f000 f936 	bl	8000cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a94:	f107 0320 	add.w	r3, r7, #32
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <MX_TIM2_Init+0xe8>)
 8000a9c:	f005 f99c 	bl	8005dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000aa6:	f000 f927 	bl	8000cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aaa:	2360      	movs	r3, #96	; 0x60
 8000aac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2204      	movs	r2, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <MX_TIM2_Init+0xe8>)
 8000ac2:	f004 fd0d 	bl	80054e0 <HAL_TIM_PWM_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000acc:	f000 f914 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <MX_TIM2_Init+0xe8>)
 8000ad2:	f000 faff 	bl	80010d4 <HAL_TIM_MspPostInit>

}
 8000ad6:	bf00      	nop
 8000ad8:	3738      	adds	r7, #56	; 0x38
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200001cc 	.word	0x200001cc

08000ae4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_DMA_Init+0x3c>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <MX_DMA_Init+0x3c>)
 8000af4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_DMA_Init+0x3c>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2011      	movs	r0, #17
 8000b0c:	f000 fd51 	bl	80015b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000b10:	2011      	movs	r0, #17
 8000b12:	f000 fd6a 	bl	80015ea <HAL_NVIC_EnableIRQ>

}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08c      	sub	sp, #48	; 0x30
 8000b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
 8000b3e:	4b68      	ldr	r3, [pc, #416]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a67      	ldr	r2, [pc, #412]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000b44:	f043 0310 	orr.w	r3, r3, #16
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b65      	ldr	r3, [pc, #404]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0310 	and.w	r3, r3, #16
 8000b52:	61bb      	str	r3, [r7, #24]
 8000b54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	4b61      	ldr	r3, [pc, #388]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a60      	ldr	r2, [pc, #384]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b5e      	ldr	r3, [pc, #376]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
 8000b76:	4b5a      	ldr	r3, [pc, #360]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a59      	ldr	r2, [pc, #356]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b57      	ldr	r3, [pc, #348]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	4b53      	ldr	r3, [pc, #332]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a52      	ldr	r2, [pc, #328]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b50      	ldr	r3, [pc, #320]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	4b4c      	ldr	r3, [pc, #304]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a4b      	ldr	r2, [pc, #300]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b49      	ldr	r3, [pc, #292]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	4b45      	ldr	r3, [pc, #276]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a44      	ldr	r2, [pc, #272]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000bd0:	f043 0308 	orr.w	r3, r3, #8
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b42      	ldr	r3, [pc, #264]	; (8000ce0 <MX_GPIO_Init+0x1bc>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0308 	and.w	r3, r3, #8
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2108      	movs	r1, #8
 8000be6:	483f      	ldr	r0, [pc, #252]	; (8000ce4 <MX_GPIO_Init+0x1c0>)
 8000be8:	f001 f9a6 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2101      	movs	r1, #1
 8000bf0:	483d      	ldr	r0, [pc, #244]	; (8000ce8 <MX_GPIO_Init+0x1c4>)
 8000bf2:	f001 f9a1 	bl	8001f38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|LD4_Pin|LD3_Pin|LD5_Pin
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f64f 0110 	movw	r1, #63504	; 0xf810
 8000bfc:	483b      	ldr	r0, [pc, #236]	; (8000cec <MX_GPIO_Init+0x1c8>)
 8000bfe:	f001 f99b 	bl	8001f38 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000c02:	2304      	movs	r3, #4
 8000c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000c0e:	f107 031c 	add.w	r3, r7, #28
 8000c12:	4619      	mov	r1, r3
 8000c14:	4833      	ldr	r0, [pc, #204]	; (8000ce4 <MX_GPIO_Init+0x1c0>)
 8000c16:	f001 f80d 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	482c      	ldr	r0, [pc, #176]	; (8000ce4 <MX_GPIO_Init+0x1c0>)
 8000c32:	f000 ffff 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000c36:	2332      	movs	r3, #50	; 0x32
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000c3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4826      	ldr	r0, [pc, #152]	; (8000ce4 <MX_GPIO_Init+0x1c0>)
 8000c4a:	f000 fff3 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4820      	ldr	r0, [pc, #128]	; (8000ce8 <MX_GPIO_Init+0x1c4>)
 8000c66:	f000 ffe5 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c6e:	4b20      	ldr	r3, [pc, #128]	; (8000cf0 <MX_GPIO_Init+0x1cc>)
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481d      	ldr	r0, [pc, #116]	; (8000cf4 <MX_GPIO_Init+0x1d0>)
 8000c7e:	f000 ffd9 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4814      	ldr	r0, [pc, #80]	; (8000cec <MX_GPIO_Init+0x1c8>)
 8000c9c:	f000 ffca 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ca0:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ca4:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_GPIO_Init+0x1c8>)
 8000cba:	f000 ffbb 	bl	8001c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 031c 	add.w	r3, r7, #28
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4806      	ldr	r0, [pc, #24]	; (8000cec <MX_GPIO_Init+0x1c8>)
 8000cd2:	f000 ffaf 	bl	8001c34 <HAL_GPIO_Init>

}
 8000cd6:	bf00      	nop
 8000cd8:	3730      	adds	r7, #48	; 0x30
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	40020800 	.word	0x40020800
 8000cec:	40020c00 	.word	0x40020c00
 8000cf0:	10120000 	.word	0x10120000
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6413      	str	r3, [r2, #64]	; 0x40
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d46:	2007      	movs	r0, #7
 8000d48:	f000 fc28 	bl	800159c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <HAL_I2C_MspInit+0x84>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12c      	bne.n	8000dd4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000da8:	2304      	movs	r3, #4
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	480c      	ldr	r0, [pc, #48]	; (8000de4 <HAL_I2C_MspInit+0x8c>)
 8000db4:	f000 ff3e 	bl	8001c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_I2C_MspInit+0x88>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020400 	.word	0x40020400

08000de8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08e      	sub	sp, #56	; 0x38
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a59      	ldr	r2, [pc, #356]	; (8000f6c <HAL_I2S_MspInit+0x184>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d15b      	bne.n	8000ec2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
 8000e0e:	4b58      	ldr	r3, [pc, #352]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a57      	ldr	r2, [pc, #348]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b55      	ldr	r3, [pc, #340]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	623b      	str	r3, [r7, #32]
 8000e24:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	4b51      	ldr	r3, [pc, #324]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a50      	ldr	r2, [pc, #320]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b4e      	ldr	r3, [pc, #312]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	61fb      	str	r3, [r7, #28]
 8000e40:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
 8000e46:	4b4a      	ldr	r3, [pc, #296]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a49      	ldr	r2, [pc, #292]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b47      	ldr	r3, [pc, #284]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e6e:	2306      	movs	r3, #6
 8000e70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e76:	4619      	mov	r1, r3
 8000e78:	483e      	ldr	r0, [pc, #248]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000e7a:	f000 fedb 	bl	8001c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e7e:	2308      	movs	r3, #8
 8000e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e82:	2302      	movs	r3, #2
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e8e:	2305      	movs	r3, #5
 8000e90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e96:	4619      	mov	r1, r3
 8000e98:	4836      	ldr	r0, [pc, #216]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000e9a:	f000 fecb 	bl	8001c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000e9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eb0:	2305      	movs	r3, #5
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	482f      	ldr	r0, [pc, #188]	; (8000f78 <HAL_I2S_MspInit+0x190>)
 8000ebc:	f000 feba 	bl	8001c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ec0:	e04f      	b.n	8000f62 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a2d      	ldr	r2, [pc, #180]	; (8000f7c <HAL_I2S_MspInit+0x194>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d14a      	bne.n	8000f62 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	4a26      	ldr	r2, [pc, #152]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eda:	6413      	str	r3, [r2, #64]	; 0x40
 8000edc:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	4a1f      	ldr	r2, [pc, #124]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	f003 0301 	and.w	r3, r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	4a18      	ldr	r2, [pc, #96]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000f0e:	f043 0304 	orr.w	r3, r3, #4
 8000f12:	6313      	str	r3, [r2, #48]	; 0x30
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_I2S_MspInit+0x188>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	f003 0304 	and.w	r3, r3, #4
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000f20:	2310      	movs	r3, #16
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f30:	2306      	movs	r3, #6
 8000f32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4811      	ldr	r0, [pc, #68]	; (8000f80 <HAL_I2S_MspInit+0x198>)
 8000f3c:	f000 fe7a 	bl	8001c34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000f40:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f52:	2306      	movs	r3, #6
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <HAL_I2S_MspInit+0x18c>)
 8000f5e:	f000 fe69 	bl	8001c34 <HAL_GPIO_Init>
}
 8000f62:	bf00      	nop
 8000f64:	3738      	adds	r7, #56	; 0x38
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40003800 	.word	0x40003800
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	40003c00 	.word	0x40003c00
 8000f80:	40020000 	.word	0x40020000

08000f84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a19      	ldr	r2, [pc, #100]	; (8001008 <HAL_SPI_MspInit+0x84>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d12b      	bne.n	8000ffe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_SPI_MspInit+0x88>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a17      	ldr	r2, [pc, #92]	; (800100c <HAL_SPI_MspInit+0x88>)
 8000fb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_SPI_MspInit+0x88>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_SPI_MspInit+0x88>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a10      	ldr	r2, [pc, #64]	; (800100c <HAL_SPI_MspInit+0x88>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_SPI_MspInit+0x88>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000fde:	23e0      	movs	r3, #224	; 0xe0
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fee:	2305      	movs	r3, #5
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <HAL_SPI_MspInit+0x8c>)
 8000ffa:	f000 fe1b 	bl	8001c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40013000 	.word	0x40013000
 800100c:	40023800 	.word	0x40023800
 8001010:	40020000 	.word	0x40020000

08001014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001024:	d14b      	bne.n	80010be <HAL_TIM_Base_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b27      	ldr	r3, [pc, #156]	; (80010c8 <HAL_TIM_Base_MspInit+0xb4>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	4a26      	ldr	r2, [pc, #152]	; (80010c8 <HAL_TIM_Base_MspInit+0xb4>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6413      	str	r3, [r2, #64]	; 0x40
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <HAL_TIM_Base_MspInit+0xb4>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 8001044:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <HAL_TIM_Base_MspInit+0xbc>)
 8001046:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8001048:	4b20      	ldr	r3, [pc, #128]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 800104a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800104e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 8001052:	2240      	movs	r2, #64	; 0x40
 8001054:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001056:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 800105e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001062:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 8001066:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800106a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 800106e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001072:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001074:	4b15      	ldr	r3, [pc, #84]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 8001076:	2200      	movs	r2, #0
 8001078:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800107a:	4b14      	ldr	r3, [pc, #80]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 800107c:	2200      	movs	r2, #0
 800107e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 8001082:	2200      	movs	r2, #0
 8001084:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001086:	4811      	ldr	r0, [pc, #68]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 8001088:	f000 faca 	bl	8001620 <HAL_DMA_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001092:	f7ff fe31 	bl	8000cf8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
 800109c:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a09      	ldr	r2, [pc, #36]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
 80010a8:	4a08      	ldr	r2, [pc, #32]	; (80010cc <HAL_TIM_Base_MspInit+0xb8>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	201c      	movs	r0, #28
 80010b4:	f000 fa7d 	bl	80015b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010b8:	201c      	movs	r0, #28
 80010ba:	f000 fa96 	bl	80015ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800
 80010cc:	20000114 	.word	0x20000114
 80010d0:	400260a0 	.word	0x400260a0

080010d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f4:	d11d      	bne.n	8001132 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_TIM_MspPostInit+0x68>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a0f      	ldr	r2, [pc, #60]	; (800113c <HAL_TIM_MspPostInit+0x68>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <HAL_TIM_MspPostInit+0x68>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001112:	2302      	movs	r3, #2
 8001114:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001122:	2301      	movs	r3, #1
 8001124:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	4619      	mov	r1, r3
 800112c:	4804      	ldr	r0, [pc, #16]	; (8001140 <HAL_TIM_MspPostInit+0x6c>)
 800112e:	f000 fd81 	bl	8001c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3720      	adds	r7, #32
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <MemManage_Handler+0x4>

0800115e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <BusFault_Handler+0x4>

08001164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <UsageFault_Handler+0x4>

0800116a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001198:	f000 f8ee 	bl	8001378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}

080011a0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */
  HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_2);
 80011a4:	2104      	movs	r1, #4
 80011a6:	4804      	ldr	r0, [pc, #16]	; (80011b8 <DMA1_Stream6_IRQHandler+0x18>)
 80011a8:	f003 ffec 	bl	8005184 <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <DMA1_Stream6_IRQHandler+0x1c>)
 80011ae:	f000 fb07 	bl	80017c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200001cc 	.word	0x200001cc
 80011bc:	20000114 	.word	0x20000114

080011c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <TIM2_IRQHandler+0x10>)
 80011c6:	f004 f883 	bl	80052d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001cc 	.word	0x200001cc

080011d4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <OTG_FS_IRQHandler+0x10>)
 80011da:	f001 f955 	bl	8002488 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000678 	.word	0x20000678

080011e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <_sbrk+0x5c>)
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <_sbrk+0x60>)
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <_sbrk+0x64>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001204:	4b11      	ldr	r3, [pc, #68]	; (800124c <_sbrk+0x64>)
 8001206:	4a12      	ldr	r2, [pc, #72]	; (8001250 <_sbrk+0x68>)
 8001208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800120a:	4b10      	ldr	r3, [pc, #64]	; (800124c <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	429a      	cmp	r2, r3
 8001216:	d207      	bcs.n	8001228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001218:	f007 f882 	bl	8008320 <__errno>
 800121c:	4602      	mov	r2, r0
 800121e:	230c      	movs	r3, #12
 8001220:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
 8001226:	e009      	b.n	800123c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <_sbrk+0x64>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800122e:	4b07      	ldr	r3, [pc, #28]	; (800124c <_sbrk+0x64>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	4a05      	ldr	r2, [pc, #20]	; (800124c <_sbrk+0x64>)
 8001238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800123a:	68fb      	ldr	r3, [r7, #12]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20020000 	.word	0x20020000
 8001248:	00000400 	.word	0x00000400
 800124c:	200000ac 	.word	0x200000ac
 8001250:	20000940 	.word	0x20000940

08001254 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001258:	4b08      	ldr	r3, [pc, #32]	; (800127c <SystemInit+0x28>)
 800125a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125e:	4a07      	ldr	r2, [pc, #28]	; (800127c <SystemInit+0x28>)
 8001260:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001264:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <SystemInit+0x28>)
 800126a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800126e:	609a      	str	r2, [r3, #8]
#endif
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001280:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001284:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001286:	e003      	b.n	8001290 <LoopCopyDataInit>

08001288 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800128a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800128c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800128e:	3104      	adds	r1, #4

08001290 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001290:	480b      	ldr	r0, [pc, #44]	; (80012c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001294:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001296:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001298:	d3f6      	bcc.n	8001288 <CopyDataInit>
  ldr  r2, =_sbss
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800129c:	e002      	b.n	80012a4 <LoopFillZerobss>

0800129e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800129e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012a0:	f842 3b04 	str.w	r3, [r2], #4

080012a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012a4:	4b09      	ldr	r3, [pc, #36]	; (80012cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012a8:	d3f9      	bcc.n	800129e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012aa:	f7ff ffd3 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ae:	f007 f83d 	bl	800832c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b2:	f7ff f9d5 	bl	8000660 <main>
  bx  lr    
 80012b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012bc:	08008564 	.word	0x08008564
  ldr  r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012c4:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80012c8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80012cc:	20000940 	.word	0x20000940

080012d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d0:	e7fe      	b.n	80012d0 <ADC_IRQHandler>
	...

080012d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <HAL_Init+0x40>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <HAL_Init+0x40>)
 80012de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e4:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <HAL_Init+0x40>)
 80012ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_Init+0x40>)
 80012f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012fc:	2003      	movs	r0, #3
 80012fe:	f000 f94d 	bl	800159c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001302:	2000      	movs	r0, #0
 8001304:	f000 f808 	bl	8001318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001308:	f7ff fcfe 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40023c00 	.word	0x40023c00

08001318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x54>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x58>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f965 	bl	8001606 <HAL_SYSTICK_Config>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00e      	b.n	8001364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b0f      	cmp	r3, #15
 800134a:	d80a      	bhi.n	8001362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134c:	2200      	movs	r2, #0
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f000 f92d 	bl	80015b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <HAL_InitTick+0x5c>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135e:	2300      	movs	r3, #0
 8001360:	e000      	b.n	8001364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000000 	.word	0x20000000
 8001370:	20000008 	.word	0x20000008
 8001374:	20000004 	.word	0x20000004

08001378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <HAL_IncTick+0x20>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	461a      	mov	r2, r3
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x24>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4413      	add	r3, r2
 8001388:	4a04      	ldr	r2, [pc, #16]	; (800139c <HAL_IncTick+0x24>)
 800138a:	6013      	str	r3, [r2, #0]
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	20000008 	.word	0x20000008
 800139c:	2000029c 	.word	0x2000029c

080013a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return uwTick;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_GetTick+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	2000029c 	.word	0x2000029c

080013b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c0:	f7ff ffee 	bl	80013a0 <HAL_GetTick>
 80013c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d0:	d005      	beq.n	80013de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_Delay+0x40>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4413      	add	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013de:	bf00      	nop
 80013e0:	f7ff ffde 	bl	80013a0 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d8f7      	bhi.n	80013e0 <HAL_Delay+0x28>
  {
  }
}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000008 	.word	0x20000008

080013fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001418:	4013      	ands	r3, r2
 800141a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	; (8001440 <__NVIC_SetPriorityGrouping+0x44>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001448:	4b04      	ldr	r3, [pc, #16]	; (800145c <__NVIC_GetPriorityGrouping+0x18>)
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	0a1b      	lsrs	r3, r3, #8
 800144e:	f003 0307 	and.w	r3, r3, #7
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800146a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146e:	2b00      	cmp	r3, #0
 8001470:	db0b      	blt.n	800148a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <__NVIC_EnableIRQ+0x38>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000e100 	.word	0xe000e100

0800149c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	db0a      	blt.n	80014c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <__NVIC_SetPriority+0x4c>)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	0112      	lsls	r2, r2, #4
 80014bc:	b2d2      	uxtb	r2, r2
 80014be:	440b      	add	r3, r1
 80014c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c4:	e00a      	b.n	80014dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	; (80014ec <__NVIC_SetPriority+0x50>)
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	f003 030f 	and.w	r3, r3, #15
 80014d2:	3b04      	subs	r3, #4
 80014d4:	0112      	lsls	r2, r2, #4
 80014d6:	b2d2      	uxtb	r2, r2
 80014d8:	440b      	add	r3, r1
 80014da:	761a      	strb	r2, [r3, #24]
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001568:	d301      	bcc.n	800156e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156a:	2301      	movs	r3, #1
 800156c:	e00f      	b.n	800158e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <SysTick_Config+0x40>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001576:	210f      	movs	r1, #15
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f7ff ff8e 	bl	800149c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <SysTick_Config+0x40>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SysTick_Config+0x40>)
 8001588:	2207      	movs	r2, #7
 800158a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	e000e010 	.word	0xe000e010

0800159c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff29 	bl	80013fc <__NVIC_SetPriorityGrouping>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c4:	f7ff ff3e 	bl	8001444 <__NVIC_GetPriorityGrouping>
 80015c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff ff8e 	bl	80014f0 <NVIC_EncodePriority>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5d 	bl	800149c <__NVIC_SetPriority>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff31 	bl	8001460 <__NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ffa2 	bl	8001558 <SysTick_Config>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff feb8 	bl	80013a0 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e099      	b.n	8001770 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2202      	movs	r2, #2
 8001648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0201 	bic.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165c:	e00f      	b.n	800167e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800165e:	f7ff fe9f 	bl	80013a0 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b05      	cmp	r3, #5
 800166a:	d908      	bls.n	800167e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2220      	movs	r2, #32
 8001670:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2203      	movs	r2, #3
 8001676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e078      	b.n	8001770 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1e8      	bne.n	800165e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <HAL_DMA_Init+0x158>)
 8001698:	4013      	ands	r3, r2
 800169a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d107      	bne.n	80016e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	4313      	orrs	r3, r2
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	f023 0307 	bic.w	r3, r3, #7
 80016fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001704:	697a      	ldr	r2, [r7, #20]
 8001706:	4313      	orrs	r3, r2
 8001708:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	2b04      	cmp	r3, #4
 8001710:	d117      	bne.n	8001742 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4313      	orrs	r3, r2
 800171a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00e      	beq.n	8001742 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 fa0b 	bl	8001b40 <DMA_CheckFifoParam>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d008      	beq.n	8001742 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2240      	movs	r2, #64	; 0x40
 8001734:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800173e:	2301      	movs	r3, #1
 8001740:	e016      	b.n	8001770 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f9c2 	bl	8001ad4 <DMA_CalcBaseAndBitshift>
 8001750:	4603      	mov	r3, r0
 8001752:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	223f      	movs	r2, #63	; 0x3f
 800175a:	409a      	lsls	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3718      	adds	r7, #24
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	f010803f 	.word	0xf010803f

0800177c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d004      	beq.n	800179a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00c      	b.n	80017b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2205      	movs	r2, #5
 800179e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017cc:	4b92      	ldr	r3, [pc, #584]	; (8001a18 <HAL_DMA_IRQHandler+0x258>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a92      	ldr	r2, [pc, #584]	; (8001a1c <HAL_DMA_IRQHandler+0x25c>)
 80017d2:	fba2 2303 	umull	r2, r3, r2, r3
 80017d6:	0a9b      	lsrs	r3, r3, #10
 80017d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ea:	2208      	movs	r2, #8
 80017ec:	409a      	lsls	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d01a      	beq.n	800182c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0304 	and.w	r3, r3, #4
 8001800:	2b00      	cmp	r3, #0
 8001802:	d013      	beq.n	800182c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0204 	bic.w	r2, r2, #4
 8001812:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001818:	2208      	movs	r2, #8
 800181a:	409a      	lsls	r2, r3
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001830:	2201      	movs	r2, #1
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d012      	beq.n	8001862 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001846:	2b00      	cmp	r3, #0
 8001848:	d00b      	beq.n	8001862 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800184e:	2201      	movs	r2, #1
 8001850:	409a      	lsls	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800185a:	f043 0202 	orr.w	r2, r3, #2
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001866:	2204      	movs	r2, #4
 8001868:	409a      	lsls	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d012      	beq.n	8001898 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d00b      	beq.n	8001898 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	2204      	movs	r2, #4
 8001886:	409a      	lsls	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001890:	f043 0204 	orr.w	r2, r3, #4
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800189c:	2210      	movs	r2, #16
 800189e:	409a      	lsls	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d043      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d03c      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ba:	2210      	movs	r2, #16
 80018bc:	409a      	lsls	r2, r3
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d018      	beq.n	8001902 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d108      	bne.n	80018f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d024      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	4798      	blx	r3
 80018ee:	e01f      	b.n	8001930 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d01b      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
 8001900:	e016      	b.n	8001930 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d107      	bne.n	8001920 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0208 	bic.w	r2, r2, #8
 800191e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001934:	2220      	movs	r2, #32
 8001936:	409a      	lsls	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	f000 808e 	beq.w	8001a5e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 8086 	beq.w	8001a5e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001956:	2220      	movs	r2, #32
 8001958:	409a      	lsls	r2, r3
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b05      	cmp	r3, #5
 8001968:	d136      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0216 	bic.w	r2, r2, #22
 8001978:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001988:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	2b00      	cmp	r3, #0
 8001990:	d103      	bne.n	800199a <HAL_DMA_IRQHandler+0x1da>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001996:	2b00      	cmp	r3, #0
 8001998:	d007      	beq.n	80019aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 0208 	bic.w	r2, r2, #8
 80019a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	223f      	movs	r2, #63	; 0x3f
 80019b0:	409a      	lsls	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d07d      	beq.n	8001aca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4798      	blx	r3
        }
        return;
 80019d6:	e078      	b.n	8001aca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d01c      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d108      	bne.n	8001a06 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d030      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	4798      	blx	r3
 8001a04:	e02b      	b.n	8001a5e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d027      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	4798      	blx	r3
 8001a16:	e022      	b.n	8001a5e <HAL_DMA_IRQHandler+0x29e>
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10f      	bne.n	8001a4e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0210 	bic.w	r2, r2, #16
 8001a3c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d032      	beq.n	8001acc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d022      	beq.n	8001ab8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2205      	movs	r2, #5
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0201 	bic.w	r2, r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
 8001a90:	697a      	ldr	r2, [r7, #20]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d307      	bcc.n	8001aa6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f2      	bne.n	8001a8a <HAL_DMA_IRQHandler+0x2ca>
 8001aa4:	e000      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001aa6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4798      	blx	r3
 8001ac8:	e000      	b.n	8001acc <HAL_DMA_IRQHandler+0x30c>
        return;
 8001aca:	bf00      	nop
    }
  }
}
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop

08001ad4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	3b10      	subs	r3, #16
 8001ae4:	4a14      	ldr	r2, [pc, #80]	; (8001b38 <DMA_CalcBaseAndBitshift+0x64>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aee:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <DMA_CalcBaseAndBitshift+0x68>)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d909      	bls.n	8001b16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	1d1a      	adds	r2, r3, #4
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	659a      	str	r2, [r3, #88]	; 0x58
 8001b14:	e007      	b.n	8001b26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b1e:	f023 0303 	bic.w	r3, r3, #3
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	aaaaaaab 	.word	0xaaaaaaab
 8001b3c:	0800854c 	.word	0x0800854c

08001b40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d11f      	bne.n	8001b9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b03      	cmp	r3, #3
 8001b5e:	d855      	bhi.n	8001c0c <DMA_CheckFifoParam+0xcc>
 8001b60:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <DMA_CheckFifoParam+0x28>)
 8001b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b66:	bf00      	nop
 8001b68:	08001b79 	.word	0x08001b79
 8001b6c:	08001b8b 	.word	0x08001b8b
 8001b70:	08001b79 	.word	0x08001b79
 8001b74:	08001c0d 	.word	0x08001c0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d045      	beq.n	8001c10 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b88:	e042      	b.n	8001c10 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b92:	d13f      	bne.n	8001c14 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b98:	e03c      	b.n	8001c14 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba2:	d121      	bne.n	8001be8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	d836      	bhi.n	8001c18 <DMA_CheckFifoParam+0xd8>
 8001baa:	a201      	add	r2, pc, #4	; (adr r2, 8001bb0 <DMA_CheckFifoParam+0x70>)
 8001bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb0:	08001bc1 	.word	0x08001bc1
 8001bb4:	08001bc7 	.word	0x08001bc7
 8001bb8:	08001bc1 	.word	0x08001bc1
 8001bbc:	08001bd9 	.word	0x08001bd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc4:	e02f      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d024      	beq.n	8001c1c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bd6:	e021      	b.n	8001c1c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001be0:	d11e      	bne.n	8001c20 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001be6:	e01b      	b.n	8001c20 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d902      	bls.n	8001bf4 <DMA_CheckFifoParam+0xb4>
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d003      	beq.n	8001bfa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bf2:	e018      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bf8:	e015      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00e      	beq.n	8001c24 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
      break;
 8001c0a:	e00b      	b.n	8001c24 <DMA_CheckFifoParam+0xe4>
      break;
 8001c0c:	bf00      	nop
 8001c0e:	e00a      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c10:	bf00      	nop
 8001c12:	e008      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c14:	bf00      	nop
 8001c16:	e006      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c18:	bf00      	nop
 8001c1a:	e004      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c1c:	bf00      	nop
 8001c1e:	e002      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;   
 8001c20:	bf00      	nop
 8001c22:	e000      	b.n	8001c26 <DMA_CheckFifoParam+0xe6>
      break;
 8001c24:	bf00      	nop
    }
  } 
  
  return status; 
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	e159      	b.n	8001f04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	f040 8148 	bne.w	8001efe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d00b      	beq.n	8001c8e <HAL_GPIO_Init+0x5a>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d007      	beq.n	8001c8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c82:	2b11      	cmp	r3, #17
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b12      	cmp	r3, #18
 8001c8c:	d130      	bne.n	8001cf0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	2203      	movs	r2, #3
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	68da      	ldr	r2, [r3, #12]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 0201 	and.w	r2, r3, #1
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d003      	beq.n	8001d30 <HAL_GPIO_Init+0xfc>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b12      	cmp	r3, #18
 8001d2e:	d123      	bne.n	8001d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	08da      	lsrs	r2, r3, #3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3208      	adds	r2, #8
 8001d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	220f      	movs	r2, #15
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	691a      	ldr	r2, [r3, #16]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	08da      	lsrs	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3208      	adds	r2, #8
 8001d72:	69b9      	ldr	r1, [r7, #24]
 8001d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0203 	and.w	r2, r3, #3
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 80a2 	beq.w	8001efe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b56      	ldr	r3, [pc, #344]	; (8001f18 <HAL_GPIO_Init+0x2e4>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	4a55      	ldr	r2, [pc, #340]	; (8001f18 <HAL_GPIO_Init+0x2e4>)
 8001dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dca:	4b53      	ldr	r3, [pc, #332]	; (8001f18 <HAL_GPIO_Init+0x2e4>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd6:	4a51      	ldr	r2, [pc, #324]	; (8001f1c <HAL_GPIO_Init+0x2e8>)
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	089b      	lsrs	r3, r3, #2
 8001ddc:	3302      	adds	r3, #2
 8001dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	220f      	movs	r2, #15
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a48      	ldr	r2, [pc, #288]	; (8001f20 <HAL_GPIO_Init+0x2ec>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0x202>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a47      	ldr	r2, [pc, #284]	; (8001f24 <HAL_GPIO_Init+0x2f0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x1fe>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a46      	ldr	r2, [pc, #280]	; (8001f28 <HAL_GPIO_Init+0x2f4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x1fa>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a45      	ldr	r2, [pc, #276]	; (8001f2c <HAL_GPIO_Init+0x2f8>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x1f6>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a44      	ldr	r2, [pc, #272]	; (8001f30 <HAL_GPIO_Init+0x2fc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x1f2>
 8001e22:	2304      	movs	r3, #4
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e26:	2307      	movs	r3, #7
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x204>
 8001e36:	2300      	movs	r3, #0
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e48:	4934      	ldr	r1, [pc, #208]	; (8001f1c <HAL_GPIO_Init+0x2e8>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e56:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4013      	ands	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e7a:	4a2e      	ldr	r2, [pc, #184]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e80:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea4:	4a23      	ldr	r2, [pc, #140]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ece:	4a19      	ldr	r2, [pc, #100]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef8:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <HAL_GPIO_Init+0x300>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3301      	adds	r3, #1
 8001f02:	61fb      	str	r3, [r7, #28]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	2b0f      	cmp	r3, #15
 8001f08:	f67f aea2 	bls.w	8001c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3724      	adds	r7, #36	; 0x24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40013800 	.word	0x40013800
 8001f20:	40020000 	.word	0x40020000
 8001f24:	40020400 	.word	0x40020400
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020c00 	.word	0x40020c00
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40013c00 	.word	0x40013c00

08001f38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
 8001f44:	4613      	mov	r3, r2
 8001f46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f48:	787b      	ldrb	r3, [r7, #1]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f54:	e003      	b.n	8001f5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f56:	887b      	ldrh	r3, [r7, #2]
 8001f58:	041a      	lsls	r2, r3, #16
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	619a      	str	r2, [r3, #24]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f6c:	b08f      	sub	sp, #60	; 0x3c
 8001f6e:	af0a      	add	r7, sp, #40	; 0x28
 8001f70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e054      	b.n	8002026 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f005 ff62 	bl	8007e60 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d102      	bne.n	8001fb6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 f800 	bl	8005fc0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	687e      	ldr	r6, [r7, #4]
 8001fc8:	466d      	mov	r5, sp
 8001fca:	f106 0410 	add.w	r4, r6, #16
 8001fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fda:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fde:	1d33      	adds	r3, r6, #4
 8001fe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe2:	6838      	ldr	r0, [r7, #0]
 8001fe4:	f003 ff7a 	bl	8005edc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2101      	movs	r1, #1
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fff7 	bl	8005fe2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	687e      	ldr	r6, [r7, #4]
 8001ffc:	466d      	mov	r5, sp
 8001ffe:	f106 0410 	add.w	r4, r6, #16
 8002002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800200e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002012:	1d33      	adds	r3, r6, #4
 8002014:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002016:	6838      	ldr	r0, [r7, #0]
 8002018:	f004 f90a 	bl	8006230 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800202e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800202e:	b590      	push	{r4, r7, lr}
 8002030:	b089      	sub	sp, #36	; 0x24
 8002032:	af04      	add	r7, sp, #16
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	4608      	mov	r0, r1
 8002038:	4611      	mov	r1, r2
 800203a:	461a      	mov	r2, r3
 800203c:	4603      	mov	r3, r0
 800203e:	70fb      	strb	r3, [r7, #3]
 8002040:	460b      	mov	r3, r1
 8002042:	70bb      	strb	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800204e:	2b01      	cmp	r3, #1
 8002050:	d101      	bne.n	8002056 <HAL_HCD_HC_Init+0x28>
 8002052:	2302      	movs	r3, #2
 8002054:	e07f      	b.n	8002156 <HAL_HCD_HC_Init+0x128>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	440b      	add	r3, r1
 800206c:	333d      	adds	r3, #61	; 0x3d
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002072:	78fa      	ldrb	r2, [r7, #3]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	3338      	adds	r3, #56	; 0x38
 8002082:	787a      	ldrb	r2, [r7, #1]
 8002084:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002086:	78fa      	ldrb	r2, [r7, #3]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	440b      	add	r3, r1
 8002094:	3340      	adds	r3, #64	; 0x40
 8002096:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002098:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	3339      	adds	r3, #57	; 0x39
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	333f      	adds	r3, #63	; 0x3f
 80020be:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80020c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	78bb      	ldrb	r3, [r7, #2]
 80020c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020cc:	b2d8      	uxtb	r0, r3
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	440b      	add	r3, r1
 80020da:	333a      	adds	r3, #58	; 0x3a
 80020dc:	4602      	mov	r2, r0
 80020de:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80020e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	da0a      	bge.n	80020fe <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	440b      	add	r3, r1
 80020f6:	333b      	adds	r3, #59	; 0x3b
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e009      	b.n	8002112 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	333b      	adds	r3, #59	; 0x3b
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	333c      	adds	r3, #60	; 0x3c
 8002122:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002126:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	787c      	ldrb	r4, [r7, #1]
 800212e:	78ba      	ldrb	r2, [r7, #2]
 8002130:	78f9      	ldrb	r1, [r7, #3]
 8002132:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002134:	9302      	str	r3, [sp, #8]
 8002136:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	4623      	mov	r3, r4
 8002144:	f004 f9b4 	bl	80064b0 <USB_HC_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002154:	7bfb      	ldrb	r3, [r7, #15]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bd90      	pop	{r4, r7, pc}

0800215e <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_HCD_HC_Halt+0x1e>
 8002178:	2302      	movs	r3, #2
 800217a:	e00f      	b.n	800219c <HAL_HCD_HC_Halt+0x3e>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f004 fbf0 	bl	8006972 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800219a:	7bfb      	ldrb	r3, [r7, #15]
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	4608      	mov	r0, r1
 80021ae:	4611      	mov	r1, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	4603      	mov	r3, r0
 80021b4:	70fb      	strb	r3, [r7, #3]
 80021b6:	460b      	mov	r3, r1
 80021b8:	70bb      	strb	r3, [r7, #2]
 80021ba:	4613      	mov	r3, r2
 80021bc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4413      	add	r3, r2
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	440b      	add	r3, r1
 80021cc:	333b      	adds	r3, #59	; 0x3b
 80021ce:	78ba      	ldrb	r2, [r7, #2]
 80021d0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	440b      	add	r3, r1
 80021e0:	333f      	adds	r3, #63	; 0x3f
 80021e2:	787a      	ldrb	r2, [r7, #1]
 80021e4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80021e6:	7c3b      	ldrb	r3, [r7, #16]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d114      	bne.n	8002216 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	3342      	adds	r3, #66	; 0x42
 80021fc:	2203      	movs	r2, #3
 80021fe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	333d      	adds	r3, #61	; 0x3d
 8002210:	7f3a      	ldrb	r2, [r7, #28]
 8002212:	701a      	strb	r2, [r3, #0]
 8002214:	e009      	b.n	800222a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	440b      	add	r3, r1
 8002224:	3342      	adds	r3, #66	; 0x42
 8002226:	2202      	movs	r2, #2
 8002228:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800222a:	787b      	ldrb	r3, [r7, #1]
 800222c:	2b03      	cmp	r3, #3
 800222e:	f200 80d6 	bhi.w	80023de <HAL_HCD_HC_SubmitRequest+0x23a>
 8002232:	a201      	add	r2, pc, #4	; (adr r2, 8002238 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002238:	08002249 	.word	0x08002249
 800223c:	080023c9 	.word	0x080023c9
 8002240:	080022b5 	.word	0x080022b5
 8002244:	0800233f 	.word	0x0800233f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002248:	7c3b      	ldrb	r3, [r7, #16]
 800224a:	2b01      	cmp	r3, #1
 800224c:	f040 80c9 	bne.w	80023e2 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002250:	78bb      	ldrb	r3, [r7, #2]
 8002252:	2b00      	cmp	r3, #0
 8002254:	f040 80c5 	bne.w	80023e2 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002258:	8b3b      	ldrh	r3, [r7, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800225e:	78fa      	ldrb	r2, [r7, #3]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	3351      	adds	r3, #81	; 0x51
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002272:	78fa      	ldrb	r2, [r7, #3]
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	440b      	add	r3, r1
 8002280:	3351      	adds	r3, #81	; 0x51
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	4413      	add	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	440b      	add	r3, r1
 8002296:	3342      	adds	r3, #66	; 0x42
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800229c:	e0a1      	b.n	80023e2 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	440b      	add	r3, r1
 80022ac:	3342      	adds	r3, #66	; 0x42
 80022ae:	2202      	movs	r2, #2
 80022b0:	701a      	strb	r2, [r3, #0]
      break;
 80022b2:	e096      	b.n	80023e2 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80022b4:	78bb      	ldrb	r3, [r7, #2]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d120      	bne.n	80022fc <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	440b      	add	r3, r1
 80022c8:	3351      	adds	r3, #81	; 0x51
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10a      	bne.n	80022e6 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	3342      	adds	r3, #66	; 0x42
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80022e4:	e07e      	b.n	80023e4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	440b      	add	r3, r1
 80022f4:	3342      	adds	r3, #66	; 0x42
 80022f6:	2202      	movs	r2, #2
 80022f8:	701a      	strb	r2, [r3, #0]
      break;
 80022fa:	e073      	b.n	80023e4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	440b      	add	r3, r1
 800230a:	3350      	adds	r3, #80	; 0x50
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10a      	bne.n	8002328 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	00db      	lsls	r3, r3, #3
 800231e:	440b      	add	r3, r1
 8002320:	3342      	adds	r3, #66	; 0x42
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
      break;
 8002326:	e05d      	b.n	80023e4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	440b      	add	r3, r1
 8002336:	3342      	adds	r3, #66	; 0x42
 8002338:	2202      	movs	r2, #2
 800233a:	701a      	strb	r2, [r3, #0]
      break;
 800233c:	e052      	b.n	80023e4 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800233e:	78bb      	ldrb	r3, [r7, #2]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d120      	bne.n	8002386 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	3351      	adds	r3, #81	; 0x51
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10a      	bne.n	8002370 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	3342      	adds	r3, #66	; 0x42
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800236e:	e039      	b.n	80023e4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	3342      	adds	r3, #66	; 0x42
 8002380:	2202      	movs	r2, #2
 8002382:	701a      	strb	r2, [r3, #0]
      break;
 8002384:	e02e      	b.n	80023e4 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002386:	78fa      	ldrb	r2, [r7, #3]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	3350      	adds	r3, #80	; 0x50
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	3342      	adds	r3, #66	; 0x42
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
      break;
 80023b0:	e018      	b.n	80023e4 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	440b      	add	r3, r1
 80023c0:	3342      	adds	r3, #66	; 0x42
 80023c2:	2202      	movs	r2, #2
 80023c4:	701a      	strb	r2, [r3, #0]
      break;
 80023c6:	e00d      	b.n	80023e4 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	3342      	adds	r3, #66	; 0x42
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
      break;
 80023dc:	e002      	b.n	80023e4 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80023de:	bf00      	nop
 80023e0:	e000      	b.n	80023e4 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80023e2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80023e4:	78fa      	ldrb	r2, [r7, #3]
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	3344      	adds	r3, #68	; 0x44
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	8b39      	ldrh	r1, [r7, #24]
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	4403      	add	r3, r0
 8002408:	3348      	adds	r3, #72	; 0x48
 800240a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800240c:	78fa      	ldrb	r2, [r7, #3]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	440b      	add	r3, r1
 800241a:	335c      	adds	r3, #92	; 0x5c
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	440b      	add	r3, r1
 800242e:	334c      	adds	r3, #76	; 0x4c
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	3339      	adds	r3, #57	; 0x39
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	335d      	adds	r3, #93	; 0x5d
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	3338      	adds	r3, #56	; 0x38
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	18d1      	adds	r1, r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	f004 f924 	bl	80066c4 <USB_HC_StartXfer>
 800247c:	4603      	mov	r3, r0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop

08002488 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 fe83 	bl	80061aa <USB_GetMode>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	f040 80ef 	bne.w	800268a <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f003 fe67 	bl	8006184 <USB_ReadInterrupts>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80e5 	beq.w	8002688 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f003 fe5e 	bl	8006184 <USB_ReadInterrupts>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024d2:	d104      	bne.n	80024de <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024dc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f003 fe4e 	bl	8006184 <USB_ReadInterrupts>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024f2:	d104      	bne.n	80024fe <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80024fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f003 fe3e 	bl	8006184 <USB_ReadInterrupts>
 8002508:	4603      	mov	r3, r0
 800250a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800250e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002512:	d104      	bne.n	800251e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800251c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f003 fe2e 	bl	8006184 <USB_ReadInterrupts>
 8002528:	4603      	mov	r3, r0
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b02      	cmp	r3, #2
 8002530:	d103      	bne.n	800253a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2202      	movs	r2, #2
 8002538:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f003 fe20 	bl	8006184 <USB_ReadInterrupts>
 8002544:	4603      	mov	r3, r0
 8002546:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800254a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800254e:	d115      	bne.n	800257c <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002558:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d108      	bne.n	800257c <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f005 fcf6 	bl	8007f5c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2101      	movs	r1, #1
 8002576:	4618      	mov	r0, r3
 8002578:	f003 ff16 	bl	80063a8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f003 fdff 	bl	8006184 <USB_ReadInterrupts>
 8002586:	4603      	mov	r3, r0
 8002588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800258c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002590:	d102      	bne.n	8002598 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f001 f94a 	bl	800382c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f003 fdf1 	bl	8006184 <USB_ReadInterrupts>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d106      	bne.n	80025ba <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f005 fcb9 	bl	8007f24 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2208      	movs	r2, #8
 80025b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 fde0 	bl	8006184 <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025ce:	d138      	bne.n	8002642 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f004 f9bb 	bl	8006950 <USB_HC_ReadInterrupt>
 80025da:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e025      	b.n	800262e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	f003 030f 	and.w	r3, r3, #15
 80025e8:	68ba      	ldr	r2, [r7, #8]
 80025ea:	fa22 f303 	lsr.w	r3, r2, r3
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d018      	beq.n	8002628 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	015a      	lsls	r2, r3, #5
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4413      	add	r3, r2
 80025fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800260c:	d106      	bne.n	800261c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	4619      	mov	r1, r3
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f8b3 	bl	8002780 <HCD_HC_IN_IRQHandler>
 800261a:	e005      	b.n	8002628 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	4619      	mov	r1, r3
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fce1 	bl	8002fea <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3301      	adds	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	d3d4      	bcc.n	80025e2 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002640:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f003 fd9c 	bl	8006184 <USB_ReadInterrupts>
 800264c:	4603      	mov	r3, r0
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b10      	cmp	r3, #16
 8002654:	d101      	bne.n	800265a <HAL_HCD_IRQHandler+0x1d2>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_HCD_IRQHandler+0x1d4>
 800265a:	2300      	movs	r3, #0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d014      	beq.n	800268a <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699a      	ldr	r2, [r3, #24]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0210 	bic.w	r2, r2, #16
 800266e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f001 f82f 	bl	80036d4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0210 	orr.w	r2, r2, #16
 8002684:	619a      	str	r2, [r3, #24]
 8002686:	e000      	b.n	800268a <HAL_HCD_IRQHandler+0x202>
      return;
 8002688:	bf00      	nop
    }
  }
}
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d101      	bne.n	80026a6 <HAL_HCD_Start+0x16>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e013      	b.n	80026ce <HAL_HCD_Start+0x3e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f003 fc73 	bl	8005f9e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2101      	movs	r1, #1
 80026be:	4618      	mov	r0, r3
 80026c0:	f003 feac 	bl	800641c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d101      	bne.n	80026ec <HAL_HCD_Stop+0x16>
 80026e8:	2302      	movs	r3, #2
 80026ea:	e00d      	b.n	8002708 <HAL_HCD_Stop+0x32>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f004 fa75 	bl	8006be8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002706:	2300      	movs	r3, #0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800271c:	78fa      	ldrb	r2, [r7, #3]
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	440b      	add	r3, r1
 800272a:	335c      	adds	r3, #92	; 0x5c
 800272c:	781b      	ldrb	r3, [r3, #0]
}
 800272e:	4618      	mov	r0, r3
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr

0800273a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
 8002742:	460b      	mov	r3, r1
 8002744:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	334c      	adds	r3, #76	; 0x4c
 8002756:	681b      	ldr	r3, [r3, #0]
}
 8002758:	4618      	mov	r0, r3
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f003 fe8c 	bl	800648e <USB_GetCurrentFrame>
 8002776:	4603      	mov	r3, r0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0304 	and.w	r3, r3, #4
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d119      	bne.n	80027e4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	461a      	mov	r2, r3
 80027be:	2304      	movs	r3, #4
 80027c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	0151      	lsls	r1, r2, #5
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	440a      	add	r2, r1
 80027d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027dc:	f043 0302 	orr.w	r3, r3, #2
 80027e0:	60d3      	str	r3, [r2, #12]
 80027e2:	e0ce      	b.n	8002982 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fa:	d12c      	bne.n	8002856 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	4413      	add	r3, r2
 8002804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002808:	461a      	mov	r2, r3
 800280a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800280e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	440b      	add	r3, r1
 800281e:	335d      	adds	r3, #93	; 0x5d
 8002820:	2207      	movs	r2, #7
 8002822:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	015a      	lsls	r2, r3, #5
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4413      	add	r3, r2
 800282c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	0151      	lsls	r1, r2, #5
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	440a      	add	r2, r1
 800283a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800283e:	f043 0302 	orr.w	r3, r3, #2
 8002842:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f004 f88f 	bl	8006972 <USB_HC_Halt>
 8002854:	e095      	b.n	8002982 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	015a      	lsls	r2, r3, #5
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4413      	add	r3, r2
 800285e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b20      	cmp	r3, #32
 800286a:	d109      	bne.n	8002880 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	461a      	mov	r2, r3
 800287a:	2320      	movs	r3, #32
 800287c:	6093      	str	r3, [r2, #8]
 800287e:	e080      	b.n	8002982 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b08      	cmp	r3, #8
 8002894:	d134      	bne.n	8002900 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	0151      	lsls	r1, r2, #5
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	440a      	add	r2, r1
 80028ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028b0:	f043 0302 	orr.w	r3, r3, #2
 80028b4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	440b      	add	r3, r1
 80028c4:	335d      	adds	r3, #93	; 0x5d
 80028c6:	2205      	movs	r2, #5
 80028c8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d6:	461a      	mov	r2, r3
 80028d8:	2310      	movs	r3, #16
 80028da:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e8:	461a      	mov	r2, r3
 80028ea:	2308      	movs	r3, #8
 80028ec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f004 f83a 	bl	8006972 <USB_HC_Halt>
 80028fe:	e040      	b.n	8002982 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002916:	d134      	bne.n	8002982 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	0151      	lsls	r1, r2, #5
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	440a      	add	r2, r1
 800292e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f004 f815 	bl	8006972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4413      	add	r3, r2
 8002950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002954:	461a      	mov	r2, r3
 8002956:	2310      	movs	r3, #16
 8002958:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	440b      	add	r3, r1
 8002968:	335d      	adds	r3, #93	; 0x5d
 800296a:	2208      	movs	r2, #8
 800296c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	4413      	add	r3, r2
 8002976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297a:	461a      	mov	r2, r3
 800297c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002980:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4413      	add	r3, r2
 800298a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002998:	d122      	bne.n	80029e0 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	015a      	lsls	r2, r3, #5
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4413      	add	r3, r2
 80029a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	0151      	lsls	r1, r2, #5
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	440a      	add	r2, r1
 80029b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	4611      	mov	r1, r2
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 ffd4 	bl	8006972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	015a      	lsls	r2, r3, #5
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4413      	add	r3, r2
 80029d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d6:	461a      	mov	r2, r3
 80029d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029dc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80029de:	e300      	b.n	8002fe2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	015a      	lsls	r2, r3, #5
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	f040 80fd 	bne.w	8002bf2 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01b      	beq.n	8002a38 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3348      	adds	r3, #72	; 0x48
 8002a10:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	0159      	lsls	r1, r3, #5
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	440b      	add	r3, r1
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002a24:	1ad1      	subs	r1, r2, r3
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4403      	add	r3, r0
 8002a34:	334c      	adds	r3, #76	; 0x4c
 8002a36:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	335d      	adds	r3, #93	; 0x5d
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	440b      	add	r3, r1
 8002a5a:	3358      	adds	r3, #88	; 0x58
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	015a      	lsls	r2, r3, #5
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4413      	add	r3, r2
 8002a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2301      	movs	r3, #1
 8002a70:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	333f      	adds	r3, #63	; 0x3f
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d00a      	beq.n	8002a9e <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	333f      	adds	r3, #63	; 0x3f
 8002a98:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d121      	bne.n	8002ae2 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	015a      	lsls	r2, r3, #5
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	0151      	lsls	r1, r2, #5
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	440a      	add	r2, r1
 8002ab4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f003 ff52 	bl	8006972 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	015a      	lsls	r2, r3, #5
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ada:	461a      	mov	r2, r3
 8002adc:	2310      	movs	r3, #16
 8002ade:	6093      	str	r3, [r2, #8]
 8002ae0:	e070      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	440b      	add	r3, r1
 8002af0:	333f      	adds	r3, #63	; 0x3f
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d12a      	bne.n	8002b4e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	0151      	lsls	r1, r2, #5
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	440a      	add	r2, r1
 8002b0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b16:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	440b      	add	r3, r1
 8002b26:	335c      	adds	r3, #92	; 0x5c
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	b2d8      	uxtb	r0, r3
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	440b      	add	r3, r1
 8002b3e:	335c      	adds	r3, #92	; 0x5c
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	4601      	mov	r1, r0
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f005 fa16 	bl	8007f78 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002b4c:	e03a      	b.n	8002bc4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	440b      	add	r3, r1
 8002b5c:	333f      	adds	r3, #63	; 0x3f
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d12f      	bne.n	8002bc4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	335c      	adds	r3, #92	; 0x5c
 8002b74:	2201      	movs	r2, #1
 8002b76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	3350      	adds	r3, #80	; 0x50
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	f083 0301 	eor.w	r3, r3, #1
 8002b8e:	b2d8      	uxtb	r0, r3
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3350      	adds	r3, #80	; 0x50
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	b2d8      	uxtb	r0, r3
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4613      	mov	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	335c      	adds	r3, #92	; 0x5c
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	4601      	mov	r1, r0
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f005 f9da 	bl	8007f78 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3350      	adds	r3, #80	; 0x50
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	f083 0301 	eor.w	r3, r3, #1
 8002bda:	b2d8      	uxtb	r0, r3
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	3350      	adds	r3, #80	; 0x50
 8002bec:	4602      	mov	r2, r0
 8002bee:	701a      	strb	r2, [r3, #0]
}
 8002bf0:	e1f7      	b.n	8002fe2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	f040 811a 	bne.w	8002e3e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	0151      	lsls	r1, r2, #5
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	440a      	add	r2, r1
 8002c20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c24:	f023 0302 	bic.w	r3, r3, #2
 8002c28:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	440b      	add	r3, r1
 8002c38:	335d      	adds	r3, #93	; 0x5d
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d10a      	bne.n	8002c56 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	335c      	adds	r3, #92	; 0x5c
 8002c50:	2201      	movs	r2, #1
 8002c52:	701a      	strb	r2, [r3, #0]
 8002c54:	e0d9      	b.n	8002e0a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	335d      	adds	r3, #93	; 0x5d
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b05      	cmp	r3, #5
 8002c6a:	d10a      	bne.n	8002c82 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	335c      	adds	r3, #92	; 0x5c
 8002c7c:	2205      	movs	r2, #5
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	e0c3      	b.n	8002e0a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	335d      	adds	r3, #93	; 0x5d
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d00a      	beq.n	8002cae <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	68fa      	ldr	r2, [r7, #12]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	440b      	add	r3, r1
 8002ca6:	335d      	adds	r3, #93	; 0x5d
 8002ca8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d156      	bne.n	8002d5c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	3358      	adds	r3, #88	; 0x58
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	1c59      	adds	r1, r3, #1
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4403      	add	r3, r0
 8002cd0:	3358      	adds	r3, #88	; 0x58
 8002cd2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3358      	adds	r3, #88	; 0x58
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d914      	bls.n	8002d14 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3358      	adds	r3, #88	; 0x58
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	440b      	add	r3, r1
 8002d0c:	335c      	adds	r3, #92	; 0x5c
 8002d0e:	2204      	movs	r2, #4
 8002d10:	701a      	strb	r2, [r3, #0]
 8002d12:	e009      	b.n	8002d28 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	440b      	add	r3, r1
 8002d22:	335c      	adds	r3, #92	; 0x5c
 8002d24:	2202      	movs	r2, #2
 8002d26:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d3e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d46:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e056      	b.n	8002e0a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	440b      	add	r3, r1
 8002d6a:	335d      	adds	r3, #93	; 0x5d
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d123      	bne.n	8002dba <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	4613      	mov	r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	4413      	add	r3, r2
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	440b      	add	r3, r1
 8002d80:	335c      	adds	r3, #92	; 0x5c
 8002d82:	2202      	movs	r2, #2
 8002d84:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	015a      	lsls	r2, r3, #5
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d9c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002da4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	461a      	mov	r2, r3
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	6013      	str	r3, [r2, #0]
 8002db8:	e027      	b.n	8002e0a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	335d      	adds	r3, #93	; 0x5d
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b07      	cmp	r3, #7
 8002dce:	d11c      	bne.n	8002e0a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	440b      	add	r3, r1
 8002dde:	3358      	adds	r3, #88	; 0x58
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	1c59      	adds	r1, r3, #1
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4403      	add	r3, r0
 8002df2:	3358      	adds	r3, #88	; 0x58
 8002df4:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	335c      	adds	r3, #92	; 0x5c
 8002e06:	2204      	movs	r2, #4
 8002e08:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e16:	461a      	mov	r2, r3
 8002e18:	2302      	movs	r3, #2
 8002e1a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	b2d8      	uxtb	r0, r3
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	440b      	add	r3, r1
 8002e2e:	335c      	adds	r3, #92	; 0x5c
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	461a      	mov	r2, r3
 8002e34:	4601      	mov	r1, r0
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f005 f89e 	bl	8007f78 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e3c:	e0d1      	b.n	8002fe2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	015a      	lsls	r2, r3, #5
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4413      	add	r3, r2
 8002e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b80      	cmp	r3, #128	; 0x80
 8002e52:	d13e      	bne.n	8002ed2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	0151      	lsls	r1, r2, #5
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	440a      	add	r2, r1
 8002e6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e6e:	f043 0302 	orr.w	r3, r3, #2
 8002e72:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	3358      	adds	r3, #88	; 0x58
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	1c59      	adds	r1, r3, #1
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4403      	add	r3, r0
 8002e96:	3358      	adds	r3, #88	; 0x58
 8002e98:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	335d      	adds	r3, #93	; 0x5d
 8002eaa:	2206      	movs	r2, #6
 8002eac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f003 fd5a 	bl	8006972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	015a      	lsls	r2, r3, #5
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	6093      	str	r3, [r2, #8]
}
 8002ed0:	e087      	b.n	8002fe2 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b10      	cmp	r3, #16
 8002ee6:	d17c      	bne.n	8002fe2 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	440b      	add	r3, r1
 8002ef6:	333f      	adds	r3, #63	; 0x3f
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b03      	cmp	r3, #3
 8002efc:	d122      	bne.n	8002f44 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3358      	adds	r3, #88	; 0x58
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	0151      	lsls	r1, r2, #5
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	440a      	add	r2, r1
 8002f28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f2c:	f043 0302 	orr.w	r3, r3, #2
 8002f30:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 fd18 	bl	8006972 <USB_HC_Halt>
 8002f42:	e045      	b.n	8002fd0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	440b      	add	r3, r1
 8002f52:	333f      	adds	r3, #63	; 0x3f
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	333f      	adds	r3, #63	; 0x3f
 8002f6a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d12f      	bne.n	8002fd0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3358      	adds	r3, #88	; 0x58
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d121      	bne.n	8002fd0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4613      	mov	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4413      	add	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	440b      	add	r3, r1
 8002f9a:	335d      	adds	r3, #93	; 0x5d
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	0151      	lsls	r1, r2, #5
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	440a      	add	r2, r1
 8002fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fba:	f043 0302 	orr.w	r3, r3, #2
 8002fbe:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	4611      	mov	r1, r2
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 fcd1 	bl	8006972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2310      	movs	r3, #16
 8002fe0:	6093      	str	r3, [r2, #8]
}
 8002fe2:	bf00      	nop
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b086      	sub	sp, #24
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b04      	cmp	r3, #4
 8003018:	d119      	bne.n	800304e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4413      	add	r3, r2
 8003022:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003026:	461a      	mov	r2, r3
 8003028:	2304      	movs	r3, #4
 800302a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	0151      	lsls	r1, r2, #5
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	440a      	add	r2, r1
 8003042:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003046:	f043 0302 	orr.w	r3, r3, #2
 800304a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800304c:	e33e      	b.n	80036cc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 0320 	and.w	r3, r3, #32
 8003060:	2b20      	cmp	r3, #32
 8003062:	d141      	bne.n	80030e8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003070:	461a      	mov	r2, r3
 8003072:	2320      	movs	r3, #32
 8003074:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	440b      	add	r3, r1
 8003084:	333d      	adds	r3, #61	; 0x3d
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	f040 831f 	bne.w	80036cc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	440b      	add	r3, r1
 800309c:	333d      	adds	r3, #61	; 0x3d
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4613      	mov	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	4413      	add	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	440b      	add	r3, r1
 80030b0:	335c      	adds	r3, #92	; 0x5c
 80030b2:	2202      	movs	r2, #2
 80030b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	0151      	lsls	r1, r2, #5
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	440a      	add	r2, r1
 80030cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f003 fc46 	bl	8006972 <USB_HC_Halt>
}
 80030e6:	e2f1      	b.n	80036cc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b40      	cmp	r3, #64	; 0x40
 80030fc:	d13f      	bne.n	800317e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	440b      	add	r3, r1
 800310c:	335d      	adds	r3, #93	; 0x5d
 800310e:	2204      	movs	r2, #4
 8003110:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	440b      	add	r3, r1
 8003120:	333d      	adds	r3, #61	; 0x3d
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	440b      	add	r3, r1
 8003134:	3358      	adds	r3, #88	; 0x58
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	4413      	add	r3, r2
 8003142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	0151      	lsls	r1, r2, #5
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	440a      	add	r2, r1
 8003150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003154:	f043 0302 	orr.w	r3, r3, #2
 8003158:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	4611      	mov	r1, r2
 8003164:	4618      	mov	r0, r3
 8003166:	f003 fc04 	bl	8006972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003176:	461a      	mov	r2, r3
 8003178:	2340      	movs	r3, #64	; 0x40
 800317a:	6093      	str	r3, [r2, #8]
}
 800317c:	e2a6      	b.n	80036cc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4413      	add	r3, r2
 8003186:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003194:	d122      	bne.n	80031dc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4413      	add	r3, r2
 800319e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	0151      	lsls	r1, r2, #5
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	440a      	add	r2, r1
 80031ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031b0:	f043 0302 	orr.w	r3, r3, #2
 80031b4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f003 fbd6 	bl	8006972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d2:	461a      	mov	r2, r3
 80031d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031d8:	6093      	str	r3, [r2, #8]
}
 80031da:	e277      	b.n	80036cc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d135      	bne.n	800325e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	68fa      	ldr	r2, [r7, #12]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	440b      	add	r3, r1
 8003200:	3358      	adds	r3, #88	; 0x58
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4413      	add	r3, r2
 800320e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	0151      	lsls	r1, r2, #5
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	440a      	add	r2, r1
 800321c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003220:	f043 0302 	orr.w	r3, r3, #2
 8003224:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f003 fb9e 	bl	8006972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4413      	add	r3, r2
 800323e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003242:	461a      	mov	r2, r3
 8003244:	2301      	movs	r3, #1
 8003246:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	440b      	add	r3, r1
 8003256:	335d      	adds	r3, #93	; 0x5d
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]
}
 800325c:	e236      	b.n	80036cc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4413      	add	r3, r2
 8003266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b08      	cmp	r3, #8
 8003272:	d12b      	bne.n	80032cc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	461a      	mov	r2, r3
 8003282:	2308      	movs	r3, #8
 8003284:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	0151      	lsls	r1, r2, #5
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	440a      	add	r2, r1
 800329c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f003 fb5e 	bl	8006972 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	440b      	add	r3, r1
 80032c4:	335d      	adds	r3, #93	; 0x5d
 80032c6:	2205      	movs	r2, #5
 80032c8:	701a      	strb	r2, [r3, #0]
}
 80032ca:	e1ff      	b.n	80036cc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	2b10      	cmp	r3, #16
 80032e0:	d155      	bne.n	800338e <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	440b      	add	r3, r1
 80032f0:	3358      	adds	r3, #88	; 0x58
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	440b      	add	r3, r1
 8003304:	335d      	adds	r3, #93	; 0x5d
 8003306:	2203      	movs	r2, #3
 8003308:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	440b      	add	r3, r1
 8003318:	333d      	adds	r3, #61	; 0x3d
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d114      	bne.n	800334a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	440b      	add	r3, r1
 800332e:	333c      	adds	r3, #60	; 0x3c
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	440b      	add	r3, r1
 8003344:	333d      	adds	r3, #61	; 0x3d
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	0151      	lsls	r1, r2, #5
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	440a      	add	r2, r1
 8003360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003364:	f043 0302 	orr.w	r3, r3, #2
 8003368:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f003 fafc 	bl	8006972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003386:	461a      	mov	r2, r3
 8003388:	2310      	movs	r3, #16
 800338a:	6093      	str	r3, [r2, #8]
}
 800338c:	e19e      	b.n	80036cc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4413      	add	r3, r2
 8003396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a0:	2b80      	cmp	r3, #128	; 0x80
 80033a2:	d12b      	bne.n	80033fc <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	0151      	lsls	r1, r2, #5
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	440a      	add	r2, r1
 80033ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033be:	f043 0302 	orr.w	r3, r3, #2
 80033c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	4611      	mov	r1, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f003 facf 	bl	8006972 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	4613      	mov	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	440b      	add	r3, r1
 80033e2:	335d      	adds	r3, #93	; 0x5d
 80033e4:	2206      	movs	r2, #6
 80033e6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f4:	461a      	mov	r2, r3
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	6093      	str	r3, [r2, #8]
}
 80033fa:	e167      	b.n	80036cc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4413      	add	r3, r2
 8003404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003412:	d135      	bne.n	8003480 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	0151      	lsls	r1, r2, #5
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	440a      	add	r2, r1
 800342a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800342e:	f043 0302 	orr.w	r3, r3, #2
 8003432:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f003 fa97 	bl	8006972 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003450:	461a      	mov	r2, r3
 8003452:	2310      	movs	r3, #16
 8003454:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4413      	add	r3, r2
 800345e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003462:	461a      	mov	r2, r3
 8003464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003468:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	440b      	add	r3, r1
 8003478:	335d      	adds	r3, #93	; 0x5d
 800347a:	2208      	movs	r2, #8
 800347c:	701a      	strb	r2, [r3, #0]
}
 800347e:	e125      	b.n	80036cc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b02      	cmp	r3, #2
 8003494:	f040 811a 	bne.w	80036cc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	0151      	lsls	r1, r2, #5
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	440a      	add	r2, r1
 80034ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034b2:	f023 0302 	bic.w	r3, r3, #2
 80034b6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	440b      	add	r3, r1
 80034c6:	335d      	adds	r3, #93	; 0x5d
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d137      	bne.n	800353e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	440b      	add	r3, r1
 80034dc:	335c      	adds	r3, #92	; 0x5c
 80034de:	2201      	movs	r2, #1
 80034e0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4613      	mov	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4413      	add	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	440b      	add	r3, r1
 80034f0:	333f      	adds	r3, #63	; 0x3f
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d00b      	beq.n	8003510 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	440b      	add	r3, r1
 8003506:	333f      	adds	r3, #63	; 0x3f
 8003508:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800350a:	2b03      	cmp	r3, #3
 800350c:	f040 80c5 	bne.w	800369a <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	440b      	add	r3, r1
 800351e:	3351      	adds	r3, #81	; 0x51
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	f083 0301 	eor.w	r3, r3, #1
 8003526:	b2d8      	uxtb	r0, r3
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	3351      	adds	r3, #81	; 0x51
 8003538:	4602      	mov	r2, r0
 800353a:	701a      	strb	r2, [r3, #0]
 800353c:	e0ad      	b.n	800369a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	440b      	add	r3, r1
 800354c:	335d      	adds	r3, #93	; 0x5d
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d10a      	bne.n	800356a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	440b      	add	r3, r1
 8003562:	335c      	adds	r3, #92	; 0x5c
 8003564:	2202      	movs	r2, #2
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	e097      	b.n	800369a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800356a:	6879      	ldr	r1, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4613      	mov	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	440b      	add	r3, r1
 8003578:	335d      	adds	r3, #93	; 0x5d
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b04      	cmp	r3, #4
 800357e:	d10a      	bne.n	8003596 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003580:	6879      	ldr	r1, [r7, #4]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	440b      	add	r3, r1
 800358e:	335c      	adds	r3, #92	; 0x5c
 8003590:	2202      	movs	r2, #2
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e081      	b.n	800369a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003596:	6879      	ldr	r1, [r7, #4]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	440b      	add	r3, r1
 80035a4:	335d      	adds	r3, #93	; 0x5d
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b05      	cmp	r3, #5
 80035aa:	d10a      	bne.n	80035c2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	440b      	add	r3, r1
 80035ba:	335c      	adds	r3, #92	; 0x5c
 80035bc:	2205      	movs	r2, #5
 80035be:	701a      	strb	r2, [r3, #0]
 80035c0:	e06b      	b.n	800369a <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	440b      	add	r3, r1
 80035d0:	335d      	adds	r3, #93	; 0x5d
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b06      	cmp	r3, #6
 80035d6:	d00a      	beq.n	80035ee <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	440b      	add	r3, r1
 80035e6:	335d      	adds	r3, #93	; 0x5d
 80035e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d155      	bne.n	800369a <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	440b      	add	r3, r1
 80035fc:	3358      	adds	r3, #88	; 0x58
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	1c59      	adds	r1, r3, #1
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4403      	add	r3, r0
 8003610:	3358      	adds	r3, #88	; 0x58
 8003612:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	440b      	add	r3, r1
 8003622:	3358      	adds	r3, #88	; 0x58
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b03      	cmp	r3, #3
 8003628:	d914      	bls.n	8003654 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	00db      	lsls	r3, r3, #3
 8003636:	440b      	add	r3, r1
 8003638:	3358      	adds	r3, #88	; 0x58
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	440b      	add	r3, r1
 800364c:	335c      	adds	r3, #92	; 0x5c
 800364e:	2204      	movs	r2, #4
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	e009      	b.n	8003668 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	335c      	adds	r3, #92	; 0x5c
 8003664:	2202      	movs	r2, #2
 8003666:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	4413      	add	r3, r2
 8003670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800367e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003686:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003694:	461a      	mov	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a6:	461a      	mov	r2, r3
 80036a8:	2302      	movs	r3, #2
 80036aa:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	b2d8      	uxtb	r0, r3
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	440b      	add	r3, r1
 80036be:	335c      	adds	r3, #92	; 0x5c
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	4601      	mov	r1, r0
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f004 fc56 	bl	8007f78 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80036cc:	bf00      	nop
 80036ce:	3718      	adds	r7, #24
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	0c5b      	lsrs	r3, r3, #17
 80036fa:	f003 030f 	and.w	r3, r3, #15
 80036fe:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	091b      	lsrs	r3, r3, #4
 8003704:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003708:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d003      	beq.n	8003718 <HCD_RXQLVL_IRQHandler+0x44>
 8003710:	2b05      	cmp	r3, #5
 8003712:	f000 8082 	beq.w	800381a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003716:	e083      	b.n	8003820 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d07f      	beq.n	800381e <HCD_RXQLVL_IRQHandler+0x14a>
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	440b      	add	r3, r1
 800372c:	3344      	adds	r3, #68	; 0x44
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d074      	beq.n	800381e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	440b      	add	r3, r1
 8003746:	3344      	adds	r3, #68	; 0x44
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	b292      	uxth	r2, r2
 800374e:	4619      	mov	r1, r3
 8003750:	f002 fcef 	bl	8006132 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	440b      	add	r3, r1
 8003762:	3344      	adds	r3, #68	; 0x44
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	18d1      	adds	r1, r2, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4403      	add	r3, r0
 8003778:	3344      	adds	r3, #68	; 0x44
 800377a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	440b      	add	r3, r1
 800378a:	334c      	adds	r3, #76	; 0x4c
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	18d1      	adds	r1, r2, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	4403      	add	r3, r0
 80037a0:	334c      	adds	r3, #76	; 0x4c
 80037a2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <HCD_RXQLVL_IRQHandler+0x154>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d031      	beq.n	800381e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037d0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037d8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	015a      	lsls	r2, r3, #5
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	4413      	add	r3, r2
 80037e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e6:	461a      	mov	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	440b      	add	r3, r1
 80037fa:	3350      	adds	r3, #80	; 0x50
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	f083 0301 	eor.w	r3, r3, #1
 8003802:	b2d8      	uxtb	r0, r3
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	440b      	add	r3, r1
 8003812:	3350      	adds	r3, #80	; 0x50
 8003814:	4602      	mov	r2, r0
 8003816:	701a      	strb	r2, [r3, #0]
      break;
 8003818:	e001      	b.n	800381e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800381a:	bf00      	nop
 800381c:	e000      	b.n	8003820 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800381e:	bf00      	nop
  }
}
 8003820:	bf00      	nop
 8003822:	3728      	adds	r7, #40	; 0x28
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	1ff80000 	.word	0x1ff80000

0800382c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003858:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b02      	cmp	r3, #2
 8003862:	d10b      	bne.n	800387c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d102      	bne.n	8003874 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f004 fb66 	bl	8007f40 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f043 0302 	orr.w	r3, r3, #2
 800387a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b08      	cmp	r3, #8
 8003884:	d132      	bne.n	80038ec <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	f043 0308 	orr.w	r3, r3, #8
 800388c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b04      	cmp	r3, #4
 8003896:	d126      	bne.n	80038e6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d113      	bne.n	80038c8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80038a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038aa:	d106      	bne.n	80038ba <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2102      	movs	r1, #2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f002 fd78 	bl	80063a8 <USB_InitFSLSPClkSel>
 80038b8:	e011      	b.n	80038de <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	4618      	mov	r0, r3
 80038c2:	f002 fd71 	bl	80063a8 <USB_InitFSLSPClkSel>
 80038c6:	e00a      	b.n	80038de <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d106      	bne.n	80038de <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038d6:	461a      	mov	r2, r3
 80038d8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80038dc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f004 fb58 	bl	8007f94 <HAL_HCD_PortEnabled_Callback>
 80038e4:	e002      	b.n	80038ec <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f004 fb62 	bl	8007fb0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d103      	bne.n	80038fe <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f043 0320 	orr.w	r3, r3, #32
 80038fc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003904:	461a      	mov	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	6013      	str	r3, [r2, #0]
}
 800390a:	bf00      	nop
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e11f      	b.n	8003b66 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7fd fa0c 	bl	8000d58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2224      	movs	r2, #36	; 0x24
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0201 	bic.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003966:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003978:	f001 f9de 	bl	8004d38 <HAL_RCC_GetPCLK1Freq>
 800397c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4a7b      	ldr	r2, [pc, #492]	; (8003b70 <HAL_I2C_Init+0x25c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d807      	bhi.n	8003998 <HAL_I2C_Init+0x84>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	4a7a      	ldr	r2, [pc, #488]	; (8003b74 <HAL_I2C_Init+0x260>)
 800398c:	4293      	cmp	r3, r2
 800398e:	bf94      	ite	ls
 8003990:	2301      	movls	r3, #1
 8003992:	2300      	movhi	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	e006      	b.n	80039a6 <HAL_I2C_Init+0x92>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4a77      	ldr	r2, [pc, #476]	; (8003b78 <HAL_I2C_Init+0x264>)
 800399c:	4293      	cmp	r3, r2
 800399e:	bf94      	ite	ls
 80039a0:	2301      	movls	r3, #1
 80039a2:	2300      	movhi	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e0db      	b.n	8003b66 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4a72      	ldr	r2, [pc, #456]	; (8003b7c <HAL_I2C_Init+0x268>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0c9b      	lsrs	r3, r3, #18
 80039b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	4a64      	ldr	r2, [pc, #400]	; (8003b70 <HAL_I2C_Init+0x25c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d802      	bhi.n	80039e8 <HAL_I2C_Init+0xd4>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	3301      	adds	r3, #1
 80039e6:	e009      	b.n	80039fc <HAL_I2C_Init+0xe8>
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039ee:	fb02 f303 	mul.w	r3, r2, r3
 80039f2:	4a63      	ldr	r2, [pc, #396]	; (8003b80 <HAL_I2C_Init+0x26c>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	099b      	lsrs	r3, r3, #6
 80039fa:	3301      	adds	r3, #1
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	430b      	orrs	r3, r1
 8003a02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003a0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4956      	ldr	r1, [pc, #344]	; (8003b70 <HAL_I2C_Init+0x25c>)
 8003a18:	428b      	cmp	r3, r1
 8003a1a:	d80d      	bhi.n	8003a38 <HAL_I2C_Init+0x124>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1e59      	subs	r1, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	bf38      	it	cc
 8003a34:	2304      	movcc	r3, #4
 8003a36:	e04f      	b.n	8003ad8 <HAL_I2C_Init+0x1c4>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d111      	bne.n	8003a64 <HAL_I2C_Init+0x150>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	1e58      	subs	r0, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	440b      	add	r3, r1
 8003a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a52:	3301      	adds	r3, #1
 8003a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e012      	b.n	8003a8a <HAL_I2C_Init+0x176>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1e58      	subs	r0, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6859      	ldr	r1, [r3, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	0099      	lsls	r1, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Init+0x17e>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e022      	b.n	8003ad8 <HAL_I2C_Init+0x1c4>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10e      	bne.n	8003ab8 <HAL_I2C_Init+0x1a4>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1e58      	subs	r0, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	440b      	add	r3, r1
 8003aa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aac:	3301      	adds	r3, #1
 8003aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab6:	e00f      	b.n	8003ad8 <HAL_I2C_Init+0x1c4>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	1e58      	subs	r0, r3, #1
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6859      	ldr	r1, [r3, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	0099      	lsls	r1, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ace:	3301      	adds	r3, #1
 8003ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	6809      	ldr	r1, [r1, #0]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003b06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6911      	ldr	r1, [r2, #16]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68d2      	ldr	r2, [r2, #12]
 8003b12:	4311      	orrs	r1, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	430a      	orrs	r2, r1
 8003b36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f042 0201 	orr.w	r2, r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2220      	movs	r2, #32
 8003b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	000186a0 	.word	0x000186a0
 8003b74:	001e847f 	.word	0x001e847f
 8003b78:	003d08ff 	.word	0x003d08ff
 8003b7c:	431bde83 	.word	0x431bde83
 8003b80:	10624dd3 	.word	0x10624dd3

08003b84 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e128      	b.n	8003de8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a90      	ldr	r2, [pc, #576]	; (8003df0 <HAL_I2S_Init+0x26c>)
 8003bae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fd f919 	bl	8000de8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2202      	movs	r2, #2
 8003bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bcc:	f023 030f 	bic.w	r3, r3, #15
 8003bd0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d060      	beq.n	8003ca4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d102      	bne.n	8003bf0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003bea:	2310      	movs	r3, #16
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	e001      	b.n	8003bf4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003bf0:	2320      	movs	r3, #32
 8003bf2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	d802      	bhi.n	8003c02 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003c02:	2001      	movs	r0, #1
 8003c04:	f001 f99c 	bl	8004f40 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c08:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c12:	d125      	bne.n	8003c60 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d010      	beq.n	8003c3e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	461a      	mov	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c38:	3305      	adds	r3, #5
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	e01f      	b.n	8003c7e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	461a      	mov	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5a:	3305      	adds	r3, #5
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	e00e      	b.n	8003c7e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	461a      	mov	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7a:	3305      	adds	r3, #5
 8003c7c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4a5c      	ldr	r2, [pc, #368]	; (8003df4 <HAL_I2S_Init+0x270>)
 8003c82:	fba2 2303 	umull	r2, r3, r2, r3
 8003c86:	08db      	lsrs	r3, r3, #3
 8003c88:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	61bb      	str	r3, [r7, #24]
 8003ca2:	e003      	b.n	8003cac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d902      	bls.n	8003cb8 <HAL_I2S_Init+0x134>
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2bff      	cmp	r3, #255	; 0xff
 8003cb6:	d907      	bls.n	8003cc8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	f043 0210 	orr.w	r2, r3, #16
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e08f      	b.n	8003de8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	ea42 0103 	orr.w	r1, r2, r3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ce6:	f023 030f 	bic.w	r3, r3, #15
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6851      	ldr	r1, [r2, #4]
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6892      	ldr	r2, [r2, #8]
 8003cf2:	4311      	orrs	r1, r2
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	68d2      	ldr	r2, [r2, #12]
 8003cf8:	4311      	orrs	r1, r2
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6992      	ldr	r2, [r2, #24]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d161      	bne.n	8003dd8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a38      	ldr	r2, [pc, #224]	; (8003df8 <HAL_I2S_Init+0x274>)
 8003d18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a37      	ldr	r2, [pc, #220]	; (8003dfc <HAL_I2S_Init+0x278>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d101      	bne.n	8003d28 <HAL_I2S_Init+0x1a4>
 8003d24:	4b36      	ldr	r3, [pc, #216]	; (8003e00 <HAL_I2S_Init+0x27c>)
 8003d26:	e001      	b.n	8003d2c <HAL_I2S_Init+0x1a8>
 8003d28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	4932      	ldr	r1, [pc, #200]	; (8003dfc <HAL_I2S_Init+0x278>)
 8003d34:	428a      	cmp	r2, r1
 8003d36:	d101      	bne.n	8003d3c <HAL_I2S_Init+0x1b8>
 8003d38:	4a31      	ldr	r2, [pc, #196]	; (8003e00 <HAL_I2S_Init+0x27c>)
 8003d3a:	e001      	b.n	8003d40 <HAL_I2S_Init+0x1bc>
 8003d3c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003d40:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003d44:	f023 030f 	bic.w	r3, r3, #15
 8003d48:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a2b      	ldr	r2, [pc, #172]	; (8003dfc <HAL_I2S_Init+0x278>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d101      	bne.n	8003d58 <HAL_I2S_Init+0x1d4>
 8003d54:	4b2a      	ldr	r3, [pc, #168]	; (8003e00 <HAL_I2S_Init+0x27c>)
 8003d56:	e001      	b.n	8003d5c <HAL_I2S_Init+0x1d8>
 8003d58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a25      	ldr	r2, [pc, #148]	; (8003dfc <HAL_I2S_Init+0x278>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d101      	bne.n	8003d6e <HAL_I2S_Init+0x1ea>
 8003d6a:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <HAL_I2S_Init+0x27c>)
 8003d6c:	e001      	b.n	8003d72 <HAL_I2S_Init+0x1ee>
 8003d6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7e:	d003      	beq.n	8003d88 <HAL_I2S_Init+0x204>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d103      	bne.n	8003d90 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003d88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	e001      	b.n	8003d94 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	b299      	uxth	r1, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003daa:	4303      	orrs	r3, r0
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	430b      	orrs	r3, r1
 8003db0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003db2:	4313      	orrs	r3, r2
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	897b      	ldrh	r3, [r7, #10]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003dc0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <HAL_I2S_Init+0x278>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d101      	bne.n	8003dd0 <HAL_I2S_Init+0x24c>
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <HAL_I2S_Init+0x27c>)
 8003dce:	e001      	b.n	8003dd4 <HAL_I2S_Init+0x250>
 8003dd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd4:	897a      	ldrh	r2, [r7, #10]
 8003dd6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3720      	adds	r7, #32
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	08003efb 	.word	0x08003efb
 8003df4:	cccccccd 	.word	0xcccccccd
 8003df8:	08004011 	.word	0x08004011
 8003dfc:	40003800 	.word	0x40003800
 8003e00:	40003400 	.word	0x40003400

08003e04 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	881a      	ldrh	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	1c9a      	adds	r2, r3, #2
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10e      	bne.n	8003e94 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e84:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff ffb8 	bl	8003e04 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	b292      	uxth	r2, r2
 8003eb0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	1c9a      	adds	r2, r3, #2
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10e      	bne.n	8003ef2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ee2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff ff93 	bl	8003e18 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b086      	sub	sp, #24
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d13a      	bne.n	8003f8c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d109      	bne.n	8003f34 <I2S_IRQHandler+0x3a>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d102      	bne.n	8003f34 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff ffb4 	bl	8003e9c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d126      	bne.n	8003f8c <I2S_IRQHandler+0x92>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b20      	cmp	r3, #32
 8003f4a:	d11f      	bne.n	8003f8c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f5a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	f043 0202 	orr.w	r2, r3, #2
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff ff50 	bl	8003e2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d136      	bne.n	8004006 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d109      	bne.n	8003fb6 <I2S_IRQHandler+0xbc>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fac:	2b80      	cmp	r3, #128	; 0x80
 8003fae:	d102      	bne.n	8003fb6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff ff45 	bl	8003e40 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d122      	bne.n	8004006 <I2S_IRQHandler+0x10c>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d11b      	bne.n	8004006 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fdc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff8:	f043 0204 	orr.w	r2, r3, #4
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f7ff ff13 	bl	8003e2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004006:	bf00      	nop
 8004008:	3718      	adds	r7, #24
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4aa2      	ldr	r2, [pc, #648]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d101      	bne.n	800402e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800402a:	4ba2      	ldr	r3, [pc, #648]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800402c:	e001      	b.n	8004032 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800402e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a9b      	ldr	r2, [pc, #620]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d101      	bne.n	800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004048:	4b9a      	ldr	r3, [pc, #616]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800404a:	e001      	b.n	8004050 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800404c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800405c:	d004      	beq.n	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 8099 	bne.w	800419a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b02      	cmp	r3, #2
 8004070:	d107      	bne.n	8004082 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004078:	2b00      	cmp	r3, #0
 800407a:	d002      	beq.n	8004082 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 f925 	bl	80042cc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b01      	cmp	r3, #1
 800408a:	d107      	bne.n	800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f9c8 	bl	800442c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a2:	2b40      	cmp	r3, #64	; 0x40
 80040a4:	d13a      	bne.n	800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d035      	beq.n	800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a7e      	ldr	r2, [pc, #504]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80040ba:	4b7e      	ldr	r3, [pc, #504]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040bc:	e001      	b.n	80040c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80040be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4979      	ldr	r1, [pc, #484]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040ca:	428b      	cmp	r3, r1
 80040cc:	d101      	bne.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80040ce:	4b79      	ldr	r3, [pc, #484]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040d0:	e001      	b.n	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80040d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040d6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410e:	f043 0202 	orr.w	r2, r3, #2
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff fe88 	bl	8003e2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b08      	cmp	r3, #8
 8004124:	f040 80be 	bne.w	80042a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	f000 80b8 	beq.w	80042a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004142:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a59      	ldr	r2, [pc, #356]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800414e:	4b59      	ldr	r3, [pc, #356]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004150:	e001      	b.n	8004156 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4954      	ldr	r1, [pc, #336]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800415e:	428b      	cmp	r3, r1
 8004160:	d101      	bne.n	8004166 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004162:	4b54      	ldr	r3, [pc, #336]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004164:	e001      	b.n	800416a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004166:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800416a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800416e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004170:	2300      	movs	r3, #0
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418a:	f043 0204 	orr.w	r2, r3, #4
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff fe4a 	bl	8003e2c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004198:	e084      	b.n	80042a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d107      	bne.n	80041b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f8be 	bl	8004330 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f8fd 	bl	80043c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b40      	cmp	r3, #64	; 0x40
 80041d6:	d12f      	bne.n	8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f003 0320 	and.w	r3, r3, #32
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d02a      	beq.n	8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041f0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a2e      	ldr	r2, [pc, #184]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d101      	bne.n	8004200 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80041fc:	4b2d      	ldr	r3, [pc, #180]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80041fe:	e001      	b.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4929      	ldr	r1, [pc, #164]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800420c:	428b      	cmp	r3, r1
 800420e:	d101      	bne.n	8004214 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004210:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004212:	e001      	b.n	8004218 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004214:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004218:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800421c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	f043 0202 	orr.w	r2, r3, #2
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff fdfa 	bl	8003e2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b08      	cmp	r3, #8
 8004240:	d131      	bne.n	80042a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b00      	cmp	r3, #0
 800424a:	d02c      	beq.n	80042a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a17      	ldr	r2, [pc, #92]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d101      	bne.n	800425a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004258:	e001      	b.n	800425e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800425a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4912      	ldr	r1, [pc, #72]	; (80042b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004266:	428b      	cmp	r3, r1
 8004268:	d101      	bne.n	800426e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800426c:	e001      	b.n	8004272 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800426e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004272:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004276:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004286:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004294:	f043 0204 	orr.w	r2, r3, #4
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff fdc5 	bl	8003e2c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042a2:	e000      	b.n	80042a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80042a4:	bf00      	nop
}
 80042a6:	bf00      	nop
 80042a8:	3720      	adds	r7, #32
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40003800 	.word	0x40003800
 80042b4:	40003400 	.word	0x40003400

080042b8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	1c99      	adds	r1, r3, #2
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6251      	str	r1, [r2, #36]	; 0x24
 80042de:	881a      	ldrh	r2, [r3, #0]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d113      	bne.n	8004326 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800430c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004312:	b29b      	uxth	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f7ff ffc9 	bl	80042b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004326:	bf00      	nop
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	1c99      	adds	r1, r3, #2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6251      	str	r1, [r2, #36]	; 0x24
 8004342:	8819      	ldrh	r1, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1d      	ldr	r2, [pc, #116]	; (80043c0 <I2SEx_TxISR_I2SExt+0x90>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d101      	bne.n	8004352 <I2SEx_TxISR_I2SExt+0x22>
 800434e:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <I2SEx_TxISR_I2SExt+0x94>)
 8004350:	e001      	b.n	8004356 <I2SEx_TxISR_I2SExt+0x26>
 8004352:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004356:	460a      	mov	r2, r1
 8004358:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d121      	bne.n	80043b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <I2SEx_TxISR_I2SExt+0x90>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d101      	bne.n	8004380 <I2SEx_TxISR_I2SExt+0x50>
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <I2SEx_TxISR_I2SExt+0x94>)
 800437e:	e001      	b.n	8004384 <I2SEx_TxISR_I2SExt+0x54>
 8004380:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	490d      	ldr	r1, [pc, #52]	; (80043c0 <I2SEx_TxISR_I2SExt+0x90>)
 800438c:	428b      	cmp	r3, r1
 800438e:	d101      	bne.n	8004394 <I2SEx_TxISR_I2SExt+0x64>
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <I2SEx_TxISR_I2SExt+0x94>)
 8004392:	e001      	b.n	8004398 <I2SEx_TxISR_I2SExt+0x68>
 8004394:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004398:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800439c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d106      	bne.n	80043b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff ff81 	bl	80042b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043b6:	bf00      	nop
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	40003800 	.word	0x40003800
 80043c4:	40003400 	.word	0x40003400

080043c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68d8      	ldr	r0, [r3, #12]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	1c99      	adds	r1, r3, #2
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80043e0:	b282      	uxth	r2, r0
 80043e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d113      	bne.n	8004424 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800440a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff ff4a 	bl	80042b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a20      	ldr	r2, [pc, #128]	; (80044bc <I2SEx_RxISR_I2SExt+0x90>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d101      	bne.n	8004442 <I2SEx_RxISR_I2SExt+0x16>
 800443e:	4b20      	ldr	r3, [pc, #128]	; (80044c0 <I2SEx_RxISR_I2SExt+0x94>)
 8004440:	e001      	b.n	8004446 <I2SEx_RxISR_I2SExt+0x1a>
 8004442:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004446:	68d8      	ldr	r0, [r3, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	1c99      	adds	r1, r3, #2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004452:	b282      	uxth	r2, r0
 8004454:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d121      	bne.n	80044b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a12      	ldr	r2, [pc, #72]	; (80044bc <I2SEx_RxISR_I2SExt+0x90>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d101      	bne.n	800447c <I2SEx_RxISR_I2SExt+0x50>
 8004478:	4b11      	ldr	r3, [pc, #68]	; (80044c0 <I2SEx_RxISR_I2SExt+0x94>)
 800447a:	e001      	b.n	8004480 <I2SEx_RxISR_I2SExt+0x54>
 800447c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	490d      	ldr	r1, [pc, #52]	; (80044bc <I2SEx_RxISR_I2SExt+0x90>)
 8004488:	428b      	cmp	r3, r1
 800448a:	d101      	bne.n	8004490 <I2SEx_RxISR_I2SExt+0x64>
 800448c:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <I2SEx_RxISR_I2SExt+0x94>)
 800448e:	e001      	b.n	8004494 <I2SEx_RxISR_I2SExt+0x68>
 8004490:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004494:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004498:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d106      	bne.n	80044b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7ff ff03 	bl	80042b8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40003800 	.word	0x40003800
 80044c0:	40003400 	.word	0x40003400

080044c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e25b      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d075      	beq.n	80045ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044e2:	4ba3      	ldr	r3, [pc, #652]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 030c 	and.w	r3, r3, #12
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d00c      	beq.n	8004508 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ee:	4ba0      	ldr	r3, [pc, #640]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d112      	bne.n	8004520 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fa:	4b9d      	ldr	r3, [pc, #628]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004506:	d10b      	bne.n	8004520 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004508:	4b99      	ldr	r3, [pc, #612]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d05b      	beq.n	80045cc <HAL_RCC_OscConfig+0x108>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d157      	bne.n	80045cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e236      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004528:	d106      	bne.n	8004538 <HAL_RCC_OscConfig+0x74>
 800452a:	4b91      	ldr	r3, [pc, #580]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a90      	ldr	r2, [pc, #576]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e01d      	b.n	8004574 <HAL_RCC_OscConfig+0xb0>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004540:	d10c      	bne.n	800455c <HAL_RCC_OscConfig+0x98>
 8004542:	4b8b      	ldr	r3, [pc, #556]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a8a      	ldr	r2, [pc, #552]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	4b88      	ldr	r3, [pc, #544]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a87      	ldr	r2, [pc, #540]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	e00b      	b.n	8004574 <HAL_RCC_OscConfig+0xb0>
 800455c:	4b84      	ldr	r3, [pc, #528]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a83      	ldr	r2, [pc, #524]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	4b81      	ldr	r3, [pc, #516]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a80      	ldr	r2, [pc, #512]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 800456e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d013      	beq.n	80045a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fc ff10 	bl	80013a0 <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004584:	f7fc ff0c 	bl	80013a0 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b64      	cmp	r3, #100	; 0x64
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e1fb      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004596:	4b76      	ldr	r3, [pc, #472]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0f0      	beq.n	8004584 <HAL_RCC_OscConfig+0xc0>
 80045a2:	e014      	b.n	80045ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a4:	f7fc fefc 	bl	80013a0 <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ac:	f7fc fef8 	bl	80013a0 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b64      	cmp	r3, #100	; 0x64
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e1e7      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045be:	4b6c      	ldr	r3, [pc, #432]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0xe8>
 80045ca:	e000      	b.n	80045ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d063      	beq.n	80046a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045da:	4b65      	ldr	r3, [pc, #404]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 030c 	and.w	r3, r3, #12
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00b      	beq.n	80045fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e6:	4b62      	ldr	r3, [pc, #392]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d11c      	bne.n	800462c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045f2:	4b5f      	ldr	r3, [pc, #380]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d116      	bne.n	800462c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045fe:	4b5c      	ldr	r3, [pc, #368]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_RCC_OscConfig+0x152>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d001      	beq.n	8004616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e1bb      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004616:	4b56      	ldr	r3, [pc, #344]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4952      	ldr	r1, [pc, #328]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004626:	4313      	orrs	r3, r2
 8004628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462a:	e03a      	b.n	80046a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d020      	beq.n	8004676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004634:	4b4f      	ldr	r3, [pc, #316]	; (8004774 <HAL_RCC_OscConfig+0x2b0>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800463a:	f7fc feb1 	bl	80013a0 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004640:	e008      	b.n	8004654 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004642:	f7fc fead 	bl	80013a0 <HAL_GetTick>
 8004646:	4602      	mov	r2, r0
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d901      	bls.n	8004654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e19c      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004654:	4b46      	ldr	r3, [pc, #280]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0f0      	beq.n	8004642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004660:	4b43      	ldr	r3, [pc, #268]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	4940      	ldr	r1, [pc, #256]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]
 8004674:	e015      	b.n	80046a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004676:	4b3f      	ldr	r3, [pc, #252]	; (8004774 <HAL_RCC_OscConfig+0x2b0>)
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fc fe90 	bl	80013a0 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004684:	f7fc fe8c 	bl	80013a0 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e17b      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004696:	4b36      	ldr	r3, [pc, #216]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d030      	beq.n	8004710 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d016      	beq.n	80046e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b6:	4b30      	ldr	r3, [pc, #192]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046bc:	f7fc fe70 	bl	80013a0 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c4:	f7fc fe6c 	bl	80013a0 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e15b      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d6:	4b26      	ldr	r3, [pc, #152]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 80046d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x200>
 80046e2:	e015      	b.n	8004710 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046e4:	4b24      	ldr	r3, [pc, #144]	; (8004778 <HAL_RCC_OscConfig+0x2b4>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ea:	f7fc fe59 	bl	80013a0 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f2:	f7fc fe55 	bl	80013a0 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e144      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004704:	4b1a      	ldr	r3, [pc, #104]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1f0      	bne.n	80046f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	f000 80a0 	beq.w	800485e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471e:	2300      	movs	r3, #0
 8004720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004722:	4b13      	ldr	r3, [pc, #76]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10f      	bne.n	800474e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	4a0e      	ldr	r2, [pc, #56]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473c:	6413      	str	r3, [r2, #64]	; 0x40
 800473e:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <HAL_RCC_OscConfig+0x2ac>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	60bb      	str	r3, [r7, #8]
 8004748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474e:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCC_OscConfig+0x2b8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d121      	bne.n	800479e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800475a:	4b08      	ldr	r3, [pc, #32]	; (800477c <HAL_RCC_OscConfig+0x2b8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a07      	ldr	r2, [pc, #28]	; (800477c <HAL_RCC_OscConfig+0x2b8>)
 8004760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004766:	f7fc fe1b 	bl	80013a0 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476c:	e011      	b.n	8004792 <HAL_RCC_OscConfig+0x2ce>
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800
 8004774:	42470000 	.word	0x42470000
 8004778:	42470e80 	.word	0x42470e80
 800477c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004780:	f7fc fe0e 	bl	80013a0 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e0fd      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004792:	4b81      	ldr	r3, [pc, #516]	; (8004998 <HAL_RCC_OscConfig+0x4d4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d106      	bne.n	80047b4 <HAL_RCC_OscConfig+0x2f0>
 80047a6:	4b7d      	ldr	r3, [pc, #500]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	4a7c      	ldr	r2, [pc, #496]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 80047ac:	f043 0301 	orr.w	r3, r3, #1
 80047b0:	6713      	str	r3, [r2, #112]	; 0x70
 80047b2:	e01c      	b.n	80047ee <HAL_RCC_OscConfig+0x32a>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b05      	cmp	r3, #5
 80047ba:	d10c      	bne.n	80047d6 <HAL_RCC_OscConfig+0x312>
 80047bc:	4b77      	ldr	r3, [pc, #476]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 80047be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c0:	4a76      	ldr	r2, [pc, #472]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 80047c2:	f043 0304 	orr.w	r3, r3, #4
 80047c6:	6713      	str	r3, [r2, #112]	; 0x70
 80047c8:	4b74      	ldr	r3, [pc, #464]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 80047ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047cc:	4a73      	ldr	r2, [pc, #460]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 80047ce:	f043 0301 	orr.w	r3, r3, #1
 80047d2:	6713      	str	r3, [r2, #112]	; 0x70
 80047d4:	e00b      	b.n	80047ee <HAL_RCC_OscConfig+0x32a>
 80047d6:	4b71      	ldr	r3, [pc, #452]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	4a70      	ldr	r2, [pc, #448]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	6713      	str	r3, [r2, #112]	; 0x70
 80047e2:	4b6e      	ldr	r3, [pc, #440]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e6:	4a6d      	ldr	r2, [pc, #436]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 80047e8:	f023 0304 	bic.w	r3, r3, #4
 80047ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d015      	beq.n	8004822 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f6:	f7fc fdd3 	bl	80013a0 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047fe:	f7fc fdcf 	bl	80013a0 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	; 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e0bc      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004814:	4b61      	ldr	r3, [pc, #388]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 8004816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0ee      	beq.n	80047fe <HAL_RCC_OscConfig+0x33a>
 8004820:	e014      	b.n	800484c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004822:	f7fc fdbd 	bl	80013a0 <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004828:	e00a      	b.n	8004840 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800482a:	f7fc fdb9 	bl	80013a0 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	f241 3288 	movw	r2, #5000	; 0x1388
 8004838:	4293      	cmp	r3, r2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e0a6      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004840:	4b56      	ldr	r3, [pc, #344]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1ee      	bne.n	800482a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800484c:	7dfb      	ldrb	r3, [r7, #23]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d105      	bne.n	800485e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004852:	4b52      	ldr	r3, [pc, #328]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	4a51      	ldr	r2, [pc, #324]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 8004858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f000 8092 	beq.w	800498c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004868:	4b4c      	ldr	r3, [pc, #304]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 030c 	and.w	r3, r3, #12
 8004870:	2b08      	cmp	r3, #8
 8004872:	d05c      	beq.n	800492e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d141      	bne.n	8004900 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487c:	4b48      	ldr	r3, [pc, #288]	; (80049a0 <HAL_RCC_OscConfig+0x4dc>)
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004882:	f7fc fd8d 	bl	80013a0 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004888:	e008      	b.n	800489c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800488a:	f7fc fd89 	bl	80013a0 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	2b02      	cmp	r3, #2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e078      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800489c:	4b3f      	ldr	r3, [pc, #252]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f0      	bne.n	800488a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	019b      	lsls	r3, r3, #6
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	3b01      	subs	r3, #1
 80048c2:	041b      	lsls	r3, r3, #16
 80048c4:	431a      	orrs	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	061b      	lsls	r3, r3, #24
 80048cc:	4933      	ldr	r1, [pc, #204]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d2:	4b33      	ldr	r3, [pc, #204]	; (80049a0 <HAL_RCC_OscConfig+0x4dc>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fc fd62 	bl	80013a0 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e0:	f7fc fd5e 	bl	80013a0 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e04d      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048f2:	4b2a      	ldr	r3, [pc, #168]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0f0      	beq.n	80048e0 <HAL_RCC_OscConfig+0x41c>
 80048fe:	e045      	b.n	800498c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004900:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <HAL_RCC_OscConfig+0x4dc>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004906:	f7fc fd4b 	bl	80013a0 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800490e:	f7fc fd47 	bl	80013a0 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e036      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004920:	4b1e      	ldr	r3, [pc, #120]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x44a>
 800492c:	e02e      	b.n	800498c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e029      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800493a:	4b18      	ldr	r3, [pc, #96]	; (800499c <HAL_RCC_OscConfig+0x4d8>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	429a      	cmp	r2, r3
 800494c:	d11c      	bne.n	8004988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004958:	429a      	cmp	r2, r3
 800495a:	d115      	bne.n	8004988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004962:	4013      	ands	r3, r2
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004968:	4293      	cmp	r3, r2
 800496a:	d10d      	bne.n	8004988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d106      	bne.n	8004988 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e000      	b.n	800498e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	40007000 	.word	0x40007000
 800499c:	40023800 	.word	0x40023800
 80049a0:	42470060 	.word	0x42470060

080049a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0cc      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049b8:	4b68      	ldr	r3, [pc, #416]	; (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 030f 	and.w	r3, r3, #15
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d90c      	bls.n	80049e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b65      	ldr	r3, [pc, #404]	; (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b63      	ldr	r3, [pc, #396]	; (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 030f 	and.w	r3, r3, #15
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0b8      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d020      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f8:	4b59      	ldr	r3, [pc, #356]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4a58      	ldr	r2, [pc, #352]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a10:	4b53      	ldr	r3, [pc, #332]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	4a52      	ldr	r2, [pc, #328]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a1c:	4b50      	ldr	r3, [pc, #320]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	494d      	ldr	r1, [pc, #308]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d044      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d107      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	4b47      	ldr	r3, [pc, #284]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d119      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e07f      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d003      	beq.n	8004a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d107      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a62:	4b3f      	ldr	r3, [pc, #252]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e06f      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a72:	4b3b      	ldr	r3, [pc, #236]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e067      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a82:	4b37      	ldr	r3, [pc, #220]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f023 0203 	bic.w	r2, r3, #3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	4934      	ldr	r1, [pc, #208]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a94:	f7fc fc84 	bl	80013a0 <HAL_GetTick>
 8004a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9a:	e00a      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a9c:	f7fc fc80 	bl	80013a0 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e04f      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab2:	4b2b      	ldr	r3, [pc, #172]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 020c 	and.w	r2, r3, #12
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d1eb      	bne.n	8004a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac4:	4b25      	ldr	r3, [pc, #148]	; (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 030f 	and.w	r3, r3, #15
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d20c      	bcs.n	8004aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad2:	4b22      	ldr	r3, [pc, #136]	; (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ada:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e032      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af8:	4b19      	ldr	r3, [pc, #100]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	4916      	ldr	r1, [pc, #88]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b16:	4b12      	ldr	r3, [pc, #72]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	490e      	ldr	r1, [pc, #56]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b2a:	f000 f821 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8004b2e:	4601      	mov	r1, r0
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <HAL_RCC_ClockConfig+0x1c0>)
 8004b3c:	5cd3      	ldrb	r3, [r2, r3]
 8004b3e:	fa21 f303 	lsr.w	r3, r1, r3
 8004b42:	4a09      	ldr	r2, [pc, #36]	; (8004b68 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b46:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fc fbe4 	bl	8001318 <HAL_InitTick>

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023c00 	.word	0x40023c00
 8004b60:	40023800 	.word	0x40023800
 8004b64:	08008534 	.word	0x08008534
 8004b68:	20000000 	.word	0x20000000
 8004b6c:	20000004 	.word	0x20000004

08004b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	607b      	str	r3, [r7, #4]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	2300      	movs	r3, #0
 8004b80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b86:	4b63      	ldr	r3, [pc, #396]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 030c 	and.w	r3, r3, #12
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d007      	beq.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x32>
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d008      	beq.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x38>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f040 80b4 	bne.w	8004d04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b9c:	4b5e      	ldr	r3, [pc, #376]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b9e:	60bb      	str	r3, [r7, #8]
       break;
 8004ba0:	e0b3      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ba2:	4b5e      	ldr	r3, [pc, #376]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004ba4:	60bb      	str	r3, [r7, #8]
      break;
 8004ba6:	e0b0      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ba8:	4b5a      	ldr	r3, [pc, #360]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bb2:	4b58      	ldr	r3, [pc, #352]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d04a      	beq.n	8004c54 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bbe:	4b55      	ldr	r3, [pc, #340]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	099b      	lsrs	r3, r3, #6
 8004bc4:	f04f 0400 	mov.w	r4, #0
 8004bc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	ea03 0501 	and.w	r5, r3, r1
 8004bd4:	ea04 0602 	and.w	r6, r4, r2
 8004bd8:	4629      	mov	r1, r5
 8004bda:	4632      	mov	r2, r6
 8004bdc:	f04f 0300 	mov.w	r3, #0
 8004be0:	f04f 0400 	mov.w	r4, #0
 8004be4:	0154      	lsls	r4, r2, #5
 8004be6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004bea:	014b      	lsls	r3, r1, #5
 8004bec:	4619      	mov	r1, r3
 8004bee:	4622      	mov	r2, r4
 8004bf0:	1b49      	subs	r1, r1, r5
 8004bf2:	eb62 0206 	sbc.w	r2, r2, r6
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	f04f 0400 	mov.w	r4, #0
 8004bfe:	0194      	lsls	r4, r2, #6
 8004c00:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c04:	018b      	lsls	r3, r1, #6
 8004c06:	1a5b      	subs	r3, r3, r1
 8004c08:	eb64 0402 	sbc.w	r4, r4, r2
 8004c0c:	f04f 0100 	mov.w	r1, #0
 8004c10:	f04f 0200 	mov.w	r2, #0
 8004c14:	00e2      	lsls	r2, r4, #3
 8004c16:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c1a:	00d9      	lsls	r1, r3, #3
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4614      	mov	r4, r2
 8004c20:	195b      	adds	r3, r3, r5
 8004c22:	eb44 0406 	adc.w	r4, r4, r6
 8004c26:	f04f 0100 	mov.w	r1, #0
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	0262      	lsls	r2, r4, #9
 8004c30:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004c34:	0259      	lsls	r1, r3, #9
 8004c36:	460b      	mov	r3, r1
 8004c38:	4614      	mov	r4, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	4621      	mov	r1, r4
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f04f 0400 	mov.w	r4, #0
 8004c44:	461a      	mov	r2, r3
 8004c46:	4623      	mov	r3, r4
 8004c48:	f7fb fac6 	bl	80001d8 <__aeabi_uldivmod>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	460c      	mov	r4, r1
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	e049      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c54:	4b2f      	ldr	r3, [pc, #188]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	099b      	lsrs	r3, r3, #6
 8004c5a:	f04f 0400 	mov.w	r4, #0
 8004c5e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c62:	f04f 0200 	mov.w	r2, #0
 8004c66:	ea03 0501 	and.w	r5, r3, r1
 8004c6a:	ea04 0602 	and.w	r6, r4, r2
 8004c6e:	4629      	mov	r1, r5
 8004c70:	4632      	mov	r2, r6
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	f04f 0400 	mov.w	r4, #0
 8004c7a:	0154      	lsls	r4, r2, #5
 8004c7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c80:	014b      	lsls	r3, r1, #5
 8004c82:	4619      	mov	r1, r3
 8004c84:	4622      	mov	r2, r4
 8004c86:	1b49      	subs	r1, r1, r5
 8004c88:	eb62 0206 	sbc.w	r2, r2, r6
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	f04f 0400 	mov.w	r4, #0
 8004c94:	0194      	lsls	r4, r2, #6
 8004c96:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c9a:	018b      	lsls	r3, r1, #6
 8004c9c:	1a5b      	subs	r3, r3, r1
 8004c9e:	eb64 0402 	sbc.w	r4, r4, r2
 8004ca2:	f04f 0100 	mov.w	r1, #0
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	00e2      	lsls	r2, r4, #3
 8004cac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004cb0:	00d9      	lsls	r1, r3, #3
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4614      	mov	r4, r2
 8004cb6:	195b      	adds	r3, r3, r5
 8004cb8:	eb44 0406 	adc.w	r4, r4, r6
 8004cbc:	f04f 0100 	mov.w	r1, #0
 8004cc0:	f04f 0200 	mov.w	r2, #0
 8004cc4:	02a2      	lsls	r2, r4, #10
 8004cc6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004cca:	0299      	lsls	r1, r3, #10
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4614      	mov	r4, r2
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f04f 0400 	mov.w	r4, #0
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4623      	mov	r3, r4
 8004cde:	f7fb fa7b 	bl	80001d8 <__aeabi_uldivmod>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ce8:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	005b      	lsls	r3, r3, #1
 8004cf6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d00:	60bb      	str	r3, [r7, #8]
      break;
 8004d02:	e002      	b.n	8004d0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d04:	4b04      	ldr	r3, [pc, #16]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d06:	60bb      	str	r3, [r7, #8]
      break;
 8004d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d14:	40023800 	.word	0x40023800
 8004d18:	00f42400 	.word	0x00f42400
 8004d1c:	007a1200 	.word	0x007a1200

08004d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d20:	b480      	push	{r7}
 8004d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d24:	4b03      	ldr	r3, [pc, #12]	; (8004d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d26:	681b      	ldr	r3, [r3, #0]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	20000000 	.word	0x20000000

08004d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d3c:	f7ff fff0 	bl	8004d20 <HAL_RCC_GetHCLKFreq>
 8004d40:	4601      	mov	r1, r0
 8004d42:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	0a9b      	lsrs	r3, r3, #10
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	4a03      	ldr	r2, [pc, #12]	; (8004d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d4e:	5cd3      	ldrb	r3, [r2, r3]
 8004d50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40023800 	.word	0x40023800
 8004d5c:	08008544 	.word	0x08008544

08004d60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b086      	sub	sp, #24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d105      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d038      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d88:	4b68      	ldr	r3, [pc, #416]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d8e:	f7fc fb07 	bl	80013a0 <HAL_GetTick>
 8004d92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d94:	e008      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d96:	f7fc fb03 	bl	80013a0 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e0bd      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004da8:	4b61      	ldr	r3, [pc, #388]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f0      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	019b      	lsls	r3, r3, #6
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	071b      	lsls	r3, r3, #28
 8004dc6:	495a      	ldr	r1, [pc, #360]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004dce:	4b57      	ldr	r3, [pc, #348]	; (8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dd4:	f7fc fae4 	bl	80013a0 <HAL_GetTick>
 8004dd8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ddc:	f7fc fae0 	bl	80013a0 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e09a      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004dee:	4b50      	ldr	r3, [pc, #320]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f000 8083 	beq.w	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	4b48      	ldr	r3, [pc, #288]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e10:	4a47      	ldr	r2, [pc, #284]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e16:	6413      	str	r3, [r2, #64]	; 0x40
 8004e18:	4b45      	ldr	r3, [pc, #276]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e24:	4b43      	ldr	r3, [pc, #268]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a42      	ldr	r2, [pc, #264]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e2e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e30:	f7fc fab6 	bl	80013a0 <HAL_GetTick>
 8004e34:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e38:	f7fc fab2 	bl	80013a0 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e06c      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e4a:	4b3a      	ldr	r3, [pc, #232]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e56:	4b36      	ldr	r3, [pc, #216]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d02f      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d028      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e74:	4b2e      	ldr	r3, [pc, #184]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e7e:	4b2e      	ldr	r3, [pc, #184]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e80:	2201      	movs	r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e84:	4b2c      	ldr	r3, [pc, #176]	; (8004f38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e8a:	4a29      	ldr	r2, [pc, #164]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e90:	4b27      	ldr	r3, [pc, #156]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d114      	bne.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e9c:	f7fc fa80 	bl	80013a0 <HAL_GetTick>
 8004ea0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea2:	e00a      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ea4:	f7fc fa7c 	bl	80013a0 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e034      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eba:	4b1d      	ldr	r3, [pc, #116]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d0ee      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ed2:	d10d      	bne.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004ed4:	4b16      	ldr	r3, [pc, #88]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee8:	4911      	ldr	r1, [pc, #68]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
 8004eee:	e005      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4a0e      	ldr	r2, [pc, #56]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004efa:	6093      	str	r3, [r2, #8]
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004efe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f08:	4909      	ldr	r1, [pc, #36]	; (8004f30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	7d1a      	ldrb	r2, [r3, #20]
 8004f1e:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f20:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	42470068 	.word	0x42470068
 8004f30:	40023800 	.word	0x40023800
 8004f34:	40007000 	.word	0x40007000
 8004f38:	42470e40 	.word	0x42470e40
 8004f3c:	424711e0 	.word	0x424711e0

08004f40 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d13f      	bne.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004f5e:	4b23      	ldr	r3, [pc, #140]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f66:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d131      	bne.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f72:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f74:	617b      	str	r3, [r7, #20]
          break;
 8004f76:	e031      	b.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f78:	4b1c      	ldr	r3, [pc, #112]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f84:	d109      	bne.n	8004f9a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004f86:	4b19      	ldr	r3, [pc, #100]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f90:	4a18      	ldr	r2, [pc, #96]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	e008      	b.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004f9a:	4b14      	ldr	r3, [pc, #80]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fa4:	4a14      	ldr	r2, [pc, #80]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004faa:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004fac:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb2:	099b      	lsrs	r3, r3, #6
 8004fb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	fb02 f303 	mul.w	r3, r2, r3
 8004fbe:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc6:	0f1b      	lsrs	r3, r3, #28
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd2:	617b      	str	r3, [r7, #20]
          break;
 8004fd4:	e002      	b.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
          break;
 8004fda:	bf00      	nop
        }
      }
      break;
 8004fdc:	bf00      	nop
    }
  }
  return frequency;
 8004fde:	697b      	ldr	r3, [r7, #20]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	00bb8000 	.word	0x00bb8000
 8004ff4:	007a1200 	.word	0x007a1200
 8004ff8:	00f42400 	.word	0x00f42400

08004ffc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e056      	b.n	80050bc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b00      	cmp	r3, #0
 800501e:	d106      	bne.n	800502e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f7fb ffab 	bl	8000f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005044:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	431a      	orrs	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	ea42 0103 	orr.w	r1, r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	0c1b      	lsrs	r3, r3, #16
 800508c:	f003 0104 	and.w	r1, r3, #4
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69da      	ldr	r2, [r3, #28]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d101      	bne.n	80050d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e01d      	b.n	8005112 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f7fb ff92 	bl	8001014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3304      	adds	r3, #4
 8005100:	4619      	mov	r1, r3
 8005102:	4610      	mov	r0, r2
 8005104:	f000 fb9c 	bl	8005840 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b082      	sub	sp, #8
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e01d      	b.n	8005168 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d106      	bne.n	8005146 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f815 	bl	8005170 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3304      	adds	r3, #4
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f000 fb71 	bl	8005840 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b0c      	cmp	r3, #12
 8005192:	d855      	bhi.n	8005240 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8005194:	a201      	add	r2, pc, #4	; (adr r2, 800519c <HAL_TIM_PWM_Stop_DMA+0x18>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051d1 	.word	0x080051d1
 80051a0:	08005241 	.word	0x08005241
 80051a4:	08005241 	.word	0x08005241
 80051a8:	08005241 	.word	0x08005241
 80051ac:	080051ed 	.word	0x080051ed
 80051b0:	08005241 	.word	0x08005241
 80051b4:	08005241 	.word	0x08005241
 80051b8:	08005241 	.word	0x08005241
 80051bc:	08005209 	.word	0x08005209
 80051c0:	08005241 	.word	0x08005241
 80051c4:	08005241 	.word	0x08005241
 80051c8:	08005241 	.word	0x08005241
 80051cc:	08005225 	.word	0x08005225
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80051de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fc fac9 	bl	800177c <HAL_DMA_Abort_IT>
      break;
 80051ea:	e02a      	b.n	8005242 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005200:	4618      	mov	r0, r3
 8005202:	f7fc fabb 	bl	800177c <HAL_DMA_Abort_IT>
      break;
 8005206:	e01c      	b.n	8005242 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005216:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521c:	4618      	mov	r0, r3
 800521e:	f7fc faad 	bl	800177c <HAL_DMA_Abort_IT>
      break;
 8005222:	e00e      	b.n	8005242 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005232:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	4618      	mov	r0, r3
 800523a:	f7fc fa9f 	bl	800177c <HAL_DMA_Abort_IT>
      break;
 800523e:	e000      	b.n	8005242 <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8005240:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	6839      	ldr	r1, [r7, #0]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fd9e 	bl	8005d8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1d      	ldr	r2, [pc, #116]	; (80052cc <HAL_TIM_PWM_Stop_DMA+0x148>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d117      	bne.n	800528a <HAL_TIM_PWM_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	f241 1311 	movw	r3, #4369	; 0x1111
 8005264:	4013      	ands	r3, r2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10f      	bne.n	800528a <HAL_TIM_PWM_Stop_DMA+0x106>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a1a      	ldr	r2, [r3, #32]
 8005270:	f240 4344 	movw	r3, #1092	; 0x444
 8005274:	4013      	ands	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d107      	bne.n	800528a <HAL_TIM_PWM_Stop_DMA+0x106>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005288:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6a1a      	ldr	r2, [r3, #32]
 8005290:	f241 1311 	movw	r3, #4369	; 0x1111
 8005294:	4013      	ands	r3, r2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10f      	bne.n	80052ba <HAL_TIM_PWM_Stop_DMA+0x136>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6a1a      	ldr	r2, [r3, #32]
 80052a0:	f240 4344 	movw	r3, #1092	; 0x444
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d107      	bne.n	80052ba <HAL_TIM_PWM_Stop_DMA+0x136>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0201 	bic.w	r2, r2, #1
 80052b8:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40010000 	.word	0x40010000

080052d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d122      	bne.n	800532c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d11b      	bne.n	800532c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0202 	mvn.w	r2, #2
 80052fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fa75 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 8005318:	e005      	b.n	8005326 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fa67 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fa78 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b04      	cmp	r3, #4
 8005338:	d122      	bne.n	8005380 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b04      	cmp	r3, #4
 8005346:	d11b      	bne.n	8005380 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0204 	mvn.w	r2, #4
 8005350:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fa4b 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 800536c:	e005      	b.n	800537a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa3d 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fa4e 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b08      	cmp	r3, #8
 800538c:	d122      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b08      	cmp	r3, #8
 800539a:	d11b      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0208 	mvn.w	r2, #8
 80053a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2204      	movs	r2, #4
 80053aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fa21 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 80053c0:	e005      	b.n	80053ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 fa13 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fa24 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d122      	bne.n	8005428 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d11b      	bne.n	8005428 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0210 	mvn.w	r2, #16
 80053f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2208      	movs	r2, #8
 80053fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f9f7 	bl	8005802 <HAL_TIM_IC_CaptureCallback>
 8005414:	e005      	b.n	8005422 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f9e9 	bl	80057ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f9fa 	bl	8005816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b01      	cmp	r3, #1
 8005434:	d10e      	bne.n	8005454 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b01      	cmp	r3, #1
 8005442:	d107      	bne.n	8005454 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0201 	mvn.w	r2, #1
 800544c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f9c3 	bl	80057da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	2b80      	cmp	r3, #128	; 0x80
 8005460:	d10e      	bne.n	8005480 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546c:	2b80      	cmp	r3, #128	; 0x80
 800546e:	d107      	bne.n	8005480 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fd24 	bl	8005ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d10e      	bne.n	80054ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b40      	cmp	r3, #64	; 0x40
 800549a:	d107      	bne.n	80054ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f9bf 	bl	800582a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	d10e      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d107      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0220 	mvn.w	r2, #32
 80054d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fcee 	bl	8005eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e0b4      	b.n	8005664 <HAL_TIM_PWM_ConfigChannel+0x184>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2202      	movs	r2, #2
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b0c      	cmp	r3, #12
 800550e:	f200 809f 	bhi.w	8005650 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005512:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	0800554d 	.word	0x0800554d
 800551c:	08005651 	.word	0x08005651
 8005520:	08005651 	.word	0x08005651
 8005524:	08005651 	.word	0x08005651
 8005528:	0800558d 	.word	0x0800558d
 800552c:	08005651 	.word	0x08005651
 8005530:	08005651 	.word	0x08005651
 8005534:	08005651 	.word	0x08005651
 8005538:	080055cf 	.word	0x080055cf
 800553c:	08005651 	.word	0x08005651
 8005540:	08005651 	.word	0x08005651
 8005544:	08005651 	.word	0x08005651
 8005548:	0800560f 	.word	0x0800560f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f9f4 	bl	8005940 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0208 	orr.w	r2, r2, #8
 8005566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0204 	bic.w	r2, r2, #4
 8005576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6999      	ldr	r1, [r3, #24]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691a      	ldr	r2, [r3, #16]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	619a      	str	r2, [r3, #24]
      break;
 800558a:	e062      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fa3a 	bl	8005a0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699a      	ldr	r2, [r3, #24]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6999      	ldr	r1, [r3, #24]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	021a      	lsls	r2, r3, #8
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	619a      	str	r2, [r3, #24]
      break;
 80055cc:	e041      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fa85 	bl	8005ae4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0208 	orr.w	r2, r2, #8
 80055e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0204 	bic.w	r2, r2, #4
 80055f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69d9      	ldr	r1, [r3, #28]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	691a      	ldr	r2, [r3, #16]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	61da      	str	r2, [r3, #28]
      break;
 800560c:	e021      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68b9      	ldr	r1, [r7, #8]
 8005614:	4618      	mov	r0, r3
 8005616:	f000 facf 	bl	8005bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	69da      	ldr	r2, [r3, #28]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005628:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	69da      	ldr	r2, [r3, #28]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005638:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69d9      	ldr	r1, [r3, #28]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	021a      	lsls	r2, r3, #8
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	61da      	str	r2, [r3, #28]
      break;
 800564e:	e000      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005650:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800567c:	2b01      	cmp	r3, #1
 800567e:	d101      	bne.n	8005684 <HAL_TIM_ConfigClockSource+0x18>
 8005680:	2302      	movs	r3, #2
 8005682:	e0a6      	b.n	80057d2 <HAL_TIM_ConfigClockSource+0x166>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b40      	cmp	r3, #64	; 0x40
 80056ba:	d067      	beq.n	800578c <HAL_TIM_ConfigClockSource+0x120>
 80056bc:	2b40      	cmp	r3, #64	; 0x40
 80056be:	d80b      	bhi.n	80056d8 <HAL_TIM_ConfigClockSource+0x6c>
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d073      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0x140>
 80056c4:	2b10      	cmp	r3, #16
 80056c6:	d802      	bhi.n	80056ce <HAL_TIM_ConfigClockSource+0x62>
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d06f      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80056cc:	e078      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d06c      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0x140>
 80056d2:	2b30      	cmp	r3, #48	; 0x30
 80056d4:	d06a      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0x140>
      break;
 80056d6:	e073      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056d8:	2b70      	cmp	r3, #112	; 0x70
 80056da:	d00d      	beq.n	80056f8 <HAL_TIM_ConfigClockSource+0x8c>
 80056dc:	2b70      	cmp	r3, #112	; 0x70
 80056de:	d804      	bhi.n	80056ea <HAL_TIM_ConfigClockSource+0x7e>
 80056e0:	2b50      	cmp	r3, #80	; 0x50
 80056e2:	d033      	beq.n	800574c <HAL_TIM_ConfigClockSource+0xe0>
 80056e4:	2b60      	cmp	r3, #96	; 0x60
 80056e6:	d041      	beq.n	800576c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80056e8:	e06a      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80056ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ee:	d066      	beq.n	80057be <HAL_TIM_ConfigClockSource+0x152>
 80056f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056f4:	d017      	beq.n	8005726 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80056f6:	e063      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	6899      	ldr	r1, [r3, #8]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f000 fb20 	bl	8005d4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800571a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	609a      	str	r2, [r3, #8]
      break;
 8005724:	e04c      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6818      	ldr	r0, [r3, #0]
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	6899      	ldr	r1, [r3, #8]
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f000 fb09 	bl	8005d4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005748:	609a      	str	r2, [r3, #8]
      break;
 800574a:	e039      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6818      	ldr	r0, [r3, #0]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	6859      	ldr	r1, [r3, #4]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	461a      	mov	r2, r3
 800575a:	f000 fa7d 	bl	8005c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2150      	movs	r1, #80	; 0x50
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fad6 	bl	8005d16 <TIM_ITRx_SetConfig>
      break;
 800576a:	e029      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6818      	ldr	r0, [r3, #0]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	6859      	ldr	r1, [r3, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	461a      	mov	r2, r3
 800577a:	f000 fa9c 	bl	8005cb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2160      	movs	r1, #96	; 0x60
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fac6 	bl	8005d16 <TIM_ITRx_SetConfig>
      break;
 800578a:	e019      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6818      	ldr	r0, [r3, #0]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	6859      	ldr	r1, [r3, #4]
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	461a      	mov	r2, r3
 800579a:	f000 fa5d 	bl	8005c58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2140      	movs	r1, #64	; 0x40
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 fab6 	bl	8005d16 <TIM_ITRx_SetConfig>
      break;
 80057aa:	e009      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f000 faad 	bl	8005d16 <TIM_ITRx_SetConfig>
      break;
 80057bc:	e000      	b.n	80057c0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80057be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800581e:	bf00      	nop
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a34      	ldr	r2, [pc, #208]	; (8005924 <TIM_Base_SetConfig+0xe4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00f      	beq.n	8005878 <TIM_Base_SetConfig+0x38>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585e:	d00b      	beq.n	8005878 <TIM_Base_SetConfig+0x38>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a31      	ldr	r2, [pc, #196]	; (8005928 <TIM_Base_SetConfig+0xe8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d007      	beq.n	8005878 <TIM_Base_SetConfig+0x38>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a30      	ldr	r2, [pc, #192]	; (800592c <TIM_Base_SetConfig+0xec>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d003      	beq.n	8005878 <TIM_Base_SetConfig+0x38>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a2f      	ldr	r2, [pc, #188]	; (8005930 <TIM_Base_SetConfig+0xf0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d108      	bne.n	800588a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a25      	ldr	r2, [pc, #148]	; (8005924 <TIM_Base_SetConfig+0xe4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01b      	beq.n	80058ca <TIM_Base_SetConfig+0x8a>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005898:	d017      	beq.n	80058ca <TIM_Base_SetConfig+0x8a>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a22      	ldr	r2, [pc, #136]	; (8005928 <TIM_Base_SetConfig+0xe8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <TIM_Base_SetConfig+0x8a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a21      	ldr	r2, [pc, #132]	; (800592c <TIM_Base_SetConfig+0xec>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00f      	beq.n	80058ca <TIM_Base_SetConfig+0x8a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a20      	ldr	r2, [pc, #128]	; (8005930 <TIM_Base_SetConfig+0xf0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00b      	beq.n	80058ca <TIM_Base_SetConfig+0x8a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a1f      	ldr	r2, [pc, #124]	; (8005934 <TIM_Base_SetConfig+0xf4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d007      	beq.n	80058ca <TIM_Base_SetConfig+0x8a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a1e      	ldr	r2, [pc, #120]	; (8005938 <TIM_Base_SetConfig+0xf8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d003      	beq.n	80058ca <TIM_Base_SetConfig+0x8a>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1d      	ldr	r2, [pc, #116]	; (800593c <TIM_Base_SetConfig+0xfc>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d108      	bne.n	80058dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a08      	ldr	r2, [pc, #32]	; (8005924 <TIM_Base_SetConfig+0xe4>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d103      	bne.n	8005910 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	615a      	str	r2, [r3, #20]
}
 8005916:	bf00      	nop
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40010000 	.word	0x40010000
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800
 8005930:	40000c00 	.word	0x40000c00
 8005934:	40014000 	.word	0x40014000
 8005938:	40014400 	.word	0x40014400
 800593c:	40014800 	.word	0x40014800

08005940 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	f023 0201 	bic.w	r2, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0303 	bic.w	r3, r3, #3
 8005976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f023 0302 	bic.w	r3, r3, #2
 8005988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	4313      	orrs	r3, r2
 8005992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a1c      	ldr	r2, [pc, #112]	; (8005a08 <TIM_OC1_SetConfig+0xc8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d10c      	bne.n	80059b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f023 0308 	bic.w	r3, r3, #8
 80059a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f023 0304 	bic.w	r3, r3, #4
 80059b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a13      	ldr	r2, [pc, #76]	; (8005a08 <TIM_OC1_SetConfig+0xc8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d111      	bne.n	80059e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	693a      	ldr	r2, [r7, #16]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	621a      	str	r2, [r3, #32]
}
 80059fc:	bf00      	nop
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	40010000 	.word	0x40010000

08005a0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	f023 0210 	bic.w	r2, r3, #16
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f023 0320 	bic.w	r3, r3, #32
 8005a56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <TIM_OC2_SetConfig+0xd4>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d10d      	bne.n	8005a88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	011b      	lsls	r3, r3, #4
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a15      	ldr	r2, [pc, #84]	; (8005ae0 <TIM_OC2_SetConfig+0xd4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d113      	bne.n	8005ab8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	693a      	ldr	r2, [r7, #16]
 8005abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685a      	ldr	r2, [r3, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	621a      	str	r2, [r3, #32]
}
 8005ad2:	bf00      	nop
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40010000 	.word	0x40010000

08005ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0303 	bic.w	r3, r3, #3
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	021b      	lsls	r3, r3, #8
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <TIM_OC3_SetConfig+0xd0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d10d      	bne.n	8005b5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	021b      	lsls	r3, r3, #8
 8005b50:	697a      	ldr	r2, [r7, #20]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a14      	ldr	r2, [pc, #80]	; (8005bb4 <TIM_OC3_SetConfig+0xd0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d113      	bne.n	8005b8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	693a      	ldr	r2, [r7, #16]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	621a      	str	r2, [r3, #32]
}
 8005ba8:	bf00      	nop
 8005baa:	371c      	adds	r7, #28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	40010000 	.word	0x40010000

08005bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	031b      	lsls	r3, r3, #12
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a10      	ldr	r2, [pc, #64]	; (8005c54 <TIM_OC4_SetConfig+0x9c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d109      	bne.n	8005c2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	019b      	lsls	r3, r3, #6
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	621a      	str	r2, [r3, #32]
}
 8005c46:	bf00      	nop
 8005c48:	371c      	adds	r7, #28
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	40010000 	.word	0x40010000

08005c58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a1b      	ldr	r3, [r3, #32]
 8005c68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	f023 0201 	bic.w	r2, r3, #1
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f023 030a 	bic.w	r3, r3, #10
 8005c94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	621a      	str	r2, [r3, #32]
}
 8005caa:	bf00      	nop
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr

08005cb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cb6:	b480      	push	{r7}
 8005cb8:	b087      	sub	sp, #28
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	f023 0210 	bic.w	r2, r3, #16
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	031b      	lsls	r3, r3, #12
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005cf2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	011b      	lsls	r3, r3, #4
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
 8005d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	f043 0307 	orr.w	r3, r3, #7
 8005d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	609a      	str	r2, [r3, #8]
}
 8005d40:	bf00      	nop
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	021a      	lsls	r2, r3, #8
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	609a      	str	r2, [r3, #8]
}
 8005d80:	bf00      	nop
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	2201      	movs	r2, #1
 8005da0:	fa02 f303 	lsl.w	r3, r2, r3
 8005da4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a1a      	ldr	r2, [r3, #32]
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	43db      	mvns	r3, r3
 8005dae:	401a      	ands	r2, r3
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a1a      	ldr	r2, [r3, #32]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 031f 	and.w	r3, r3, #31
 8005dbe:	6879      	ldr	r1, [r7, #4]
 8005dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	621a      	str	r2, [r3, #32]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
	...

08005dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e050      	b.n	8005e92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d018      	beq.n	8005e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e3c:	d013      	beq.n	8005e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a18      	ldr	r2, [pc, #96]	; (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d00e      	beq.n	8005e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a16      	ldr	r2, [pc, #88]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d009      	beq.n	8005e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a15      	ldr	r2, [pc, #84]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d004      	beq.n	8005e66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a13      	ldr	r2, [pc, #76]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d10c      	bne.n	8005e80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40000c00 	.word	0x40000c00
 8005eb0:	40014000 	.word	0x40014000

08005eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005edc:	b084      	sub	sp, #16
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	f107 001c 	add.w	r0, r7, #28
 8005eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d122      	bne.n	8005f3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d105      	bne.n	8005f2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f94a 	bl	80061c8 <USB_CoreReset>
 8005f34:	4603      	mov	r3, r0
 8005f36:	73fb      	strb	r3, [r7, #15]
 8005f38:	e01a      	b.n	8005f70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f93e 	bl	80061c8 <USB_CoreReset>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d106      	bne.n	8005f64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38
 8005f62:	e005      	b.n	8005f70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d10b      	bne.n	8005f8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f043 0206 	orr.w	r2, r3, #6
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f043 0220 	orr.w	r2, r3, #32
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f9a:	b004      	add	sp, #16
 8005f9c:	4770      	bx	lr

08005f9e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f043 0201 	orr.w	r2, r3, #1
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	f023 0201 	bic.w	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	460b      	mov	r3, r1
 8005fec:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d106      	bne.n	800600e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60da      	str	r2, [r3, #12]
 800600c:	e00b      	b.n	8006026 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800600e:	78fb      	ldrb	r3, [r7, #3]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	60da      	str	r2, [r3, #12]
 8006020:	e001      	b.n	8006026 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e003      	b.n	800602e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006026:	2032      	movs	r0, #50	; 0x32
 8006028:	f7fb f9c6 	bl	80013b8 <HAL_Delay>

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	019b      	lsls	r3, r3, #6
 800604a:	f043 0220 	orr.w	r2, r3, #32
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	3301      	adds	r3, #1
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4a09      	ldr	r2, [pc, #36]	; (8006080 <USB_FlushTxFifo+0x48>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d901      	bls.n	8006064 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e006      	b.n	8006072 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b20      	cmp	r3, #32
 800606e:	d0f0      	beq.n	8006052 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	00030d40 	.word	0x00030d40

08006084 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2210      	movs	r2, #16
 8006094:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	3301      	adds	r3, #1
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <USB_FlushRxFifo+0x40>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d901      	bls.n	80060a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e006      	b.n	80060b6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b10      	cmp	r3, #16
 80060b2:	d0f0      	beq.n	8006096 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	00030d40 	.word	0x00030d40

080060c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b089      	sub	sp, #36	; 0x24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	4611      	mov	r1, r2
 80060d4:	461a      	mov	r2, r3
 80060d6:	460b      	mov	r3, r1
 80060d8:	71fb      	strb	r3, [r7, #7]
 80060da:	4613      	mov	r3, r2
 80060dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80060e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d11a      	bne.n	8006124 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060ee:	88bb      	ldrh	r3, [r7, #4]
 80060f0:	3303      	adds	r3, #3
 80060f2:	089b      	lsrs	r3, r3, #2
 80060f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060f6:	2300      	movs	r3, #0
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	e00f      	b.n	800611c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060fc:	79fb      	ldrb	r3, [r7, #7]
 80060fe:	031a      	lsls	r2, r3, #12
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	4413      	add	r3, r2
 8006104:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006108:	461a      	mov	r2, r3
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	3304      	adds	r3, #4
 8006114:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	3301      	adds	r3, #1
 800611a:	61bb      	str	r3, [r7, #24]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	429a      	cmp	r2, r3
 8006122:	d3eb      	bcc.n	80060fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3724      	adds	r7, #36	; 0x24
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006132:	b480      	push	{r7}
 8006134:	b089      	sub	sp, #36	; 0x24
 8006136:	af00      	add	r7, sp, #0
 8006138:	60f8      	str	r0, [r7, #12]
 800613a:	60b9      	str	r1, [r7, #8]
 800613c:	4613      	mov	r3, r2
 800613e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006148:	88fb      	ldrh	r3, [r7, #6]
 800614a:	3303      	adds	r3, #3
 800614c:	089b      	lsrs	r3, r3, #2
 800614e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006150:	2300      	movs	r3, #0
 8006152:	61bb      	str	r3, [r7, #24]
 8006154:	e00b      	b.n	800616e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	601a      	str	r2, [r3, #0]
    pDest++;
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	3304      	adds	r3, #4
 8006166:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	3301      	adds	r3, #1
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	429a      	cmp	r2, r3
 8006174:	d3ef      	bcc.n	8006156 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006176:	69fb      	ldr	r3, [r7, #28]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3724      	adds	r7, #36	; 0x24
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4013      	ands	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800619c:	68fb      	ldr	r3, [r7, #12]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	f003 0301 	and.w	r3, r3, #1
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3301      	adds	r3, #1
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	4a13      	ldr	r2, [pc, #76]	; (800622c <USB_CoreReset+0x64>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d901      	bls.n	80061e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e01b      	b.n	800621e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	daf2      	bge.n	80061d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f043 0201 	orr.w	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3301      	adds	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4a09      	ldr	r2, [pc, #36]	; (800622c <USB_CoreReset+0x64>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d901      	bls.n	8006210 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e006      	b.n	800621e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b01      	cmp	r3, #1
 800621a:	d0f0      	beq.n	80061fe <USB_CoreReset+0x36>

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	00030d40 	.word	0x00030d40

08006230 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006230:	b084      	sub	sp, #16
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	f107 001c 	add.w	r0, r7, #28
 800623e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800624c:	461a      	mov	r2, r3
 800624e:	2300      	movs	r3, #0
 8006250:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800627a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627e:	2b00      	cmp	r3, #0
 8006280:	d018      	beq.n	80062b4 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006284:	2b01      	cmp	r3, #1
 8006286:	d10a      	bne.n	800629e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006296:	f043 0304 	orr.w	r3, r3, #4
 800629a:	6013      	str	r3, [r2, #0]
 800629c:	e014      	b.n	80062c8 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062ac:	f023 0304 	bic.w	r3, r3, #4
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	e009      	b.n	80062c8 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062c2:	f023 0304 	bic.w	r3, r3, #4
 80062c6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80062c8:	2110      	movs	r1, #16
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7ff feb4 	bl	8006038 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff fed7 	bl	8006084 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	e015      	b.n	8006308 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e8:	461a      	mov	r2, r3
 80062ea:	f04f 33ff 	mov.w	r3, #4294967295
 80062ee:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fc:	461a      	mov	r2, r3
 80062fe:	2300      	movs	r3, #0
 8006300:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3301      	adds	r3, #1
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	429a      	cmp	r2, r3
 800630e:	d3e5      	bcc.n	80062dc <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8006310:	2101      	movs	r1, #1
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f882 	bl	800641c <USB_DriveVbus>

  HAL_Delay(200U);
 8006318:	20c8      	movs	r0, #200	; 0xc8
 800631a:	f7fb f84d 	bl	80013b8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f04f 32ff 	mov.w	r2, #4294967295
 800632a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00b      	beq.n	8006350 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800633e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a14      	ldr	r2, [pc, #80]	; (8006394 <USB_HostInit+0x164>)
 8006344:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a13      	ldr	r2, [pc, #76]	; (8006398 <USB_HostInit+0x168>)
 800634a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800634e:	e009      	b.n	8006364 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2280      	movs	r2, #128	; 0x80
 8006354:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a10      	ldr	r2, [pc, #64]	; (800639c <USB_HostInit+0x16c>)
 800635a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a10      	ldr	r2, [pc, #64]	; (80063a0 <USB_HostInit+0x170>)
 8006360:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	2b00      	cmp	r3, #0
 8006368:	d105      	bne.n	8006376 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	699b      	ldr	r3, [r3, #24]
 800636e:	f043 0210 	orr.w	r2, r3, #16
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	4b0a      	ldr	r3, [pc, #40]	; (80063a4 <USB_HostInit+0x174>)
 800637c:	4313      	orrs	r3, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800638e:	b004      	add	sp, #16
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	01000200 	.word	0x01000200
 8006398:	00e00300 	.word	0x00e00300
 800639c:	00600080 	.word	0x00600080
 80063a0:	004000e0 	.word	0x004000e0
 80063a4:	a3200008 	.word	0xa3200008

080063a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063c6:	f023 0303 	bic.w	r3, r3, #3
 80063ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	68f9      	ldr	r1, [r7, #12]
 80063dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80063e0:	4313      	orrs	r3, r2
 80063e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d107      	bne.n	80063fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063f0:	461a      	mov	r2, r3
 80063f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80063f6:	6053      	str	r3, [r2, #4]
 80063f8:	e009      	b.n	800640e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80063fa:	78fb      	ldrb	r3, [r7, #3]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d106      	bne.n	800640e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006406:	461a      	mov	r2, r3
 8006408:	f241 7370 	movw	r3, #6000	; 0x1770
 800640c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006440:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d109      	bne.n	8006460 <USB_DriveVbus+0x44>
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d106      	bne.n	8006460 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800645a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800645e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800646a:	d109      	bne.n	8006480 <USB_DriveVbus+0x64>
 800646c:	78fb      	ldrb	r3, [r7, #3]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800647a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800647e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800648e:	b480      	push	{r7}
 8006490:	b085      	sub	sp, #20
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	b29b      	uxth	r3, r3
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	4608      	mov	r0, r1
 80064ba:	4611      	mov	r1, r2
 80064bc:	461a      	mov	r2, r3
 80064be:	4603      	mov	r3, r0
 80064c0:	70fb      	strb	r3, [r7, #3]
 80064c2:	460b      	mov	r3, r1
 80064c4:	70bb      	strb	r3, [r7, #2]
 80064c6:	4613      	mov	r3, r2
 80064c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80064d2:	78fb      	ldrb	r3, [r7, #3]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064de:	461a      	mov	r2, r3
 80064e0:	f04f 33ff 	mov.w	r3, #4294967295
 80064e4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80064e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d87e      	bhi.n	80065ec <USB_HC_Init+0x13c>
 80064ee:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <USB_HC_Init+0x44>)
 80064f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f4:	08006505 	.word	0x08006505
 80064f8:	080065af 	.word	0x080065af
 80064fc:	08006505 	.word	0x08006505
 8006500:	08006571 	.word	0x08006571
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006504:	78fb      	ldrb	r3, [r7, #3]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4413      	add	r3, r2
 800650c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006510:	461a      	mov	r2, r3
 8006512:	f240 439d 	movw	r3, #1181	; 0x49d
 8006516:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006518:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800651c:	2b00      	cmp	r3, #0
 800651e:	da10      	bge.n	8006542 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	4413      	add	r3, r2
 8006528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	78fa      	ldrb	r2, [r7, #3]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	440a      	add	r2, r1
 8006536:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800653a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800653e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8006540:	e057      	b.n	80065f2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d051      	beq.n	80065f2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	4413      	add	r3, r2
 8006556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	78fa      	ldrb	r2, [r7, #3]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	440a      	add	r2, r1
 8006564:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006568:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800656c:	60d3      	str	r3, [r2, #12]
      break;
 800656e:	e040      	b.n	80065f2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006570:	78fb      	ldrb	r3, [r7, #3]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4413      	add	r3, r2
 8006578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800657c:	461a      	mov	r2, r3
 800657e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006582:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006584:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006588:	2b00      	cmp	r3, #0
 800658a:	da34      	bge.n	80065f6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	4413      	add	r3, r2
 8006594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	78fa      	ldrb	r2, [r7, #3]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065aa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80065ac:	e023      	b.n	80065f6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80065ae:	78fb      	ldrb	r3, [r7, #3]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ba:	461a      	mov	r2, r3
 80065bc:	f240 2325 	movw	r3, #549	; 0x225
 80065c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80065c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	da17      	bge.n	80065fa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80065ca:	78fb      	ldrb	r3, [r7, #3]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	78fa      	ldrb	r2, [r7, #3]
 80065da:	0151      	lsls	r1, r2, #5
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	440a      	add	r2, r1
 80065e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065e4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80065e8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80065ea:	e006      	b.n	80065fa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	75fb      	strb	r3, [r7, #23]
      break;
 80065f0:	e004      	b.n	80065fc <USB_HC_Init+0x14c>
      break;
 80065f2:	bf00      	nop
 80065f4:	e002      	b.n	80065fc <USB_HC_Init+0x14c>
      break;
 80065f6:	bf00      	nop
 80065f8:	e000      	b.n	80065fc <USB_HC_Init+0x14c>
      break;
 80065fa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006602:	699a      	ldr	r2, [r3, #24]
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	2101      	movs	r1, #1
 800660c:	fa01 f303 	lsl.w	r3, r1, r3
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006616:	4313      	orrs	r3, r2
 8006618:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006626:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800662a:	2b00      	cmp	r3, #0
 800662c:	da03      	bge.n	8006636 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800662e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	e001      	b.n	800663a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800663a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800663e:	2b02      	cmp	r3, #2
 8006640:	d103      	bne.n	800664a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	e001      	b.n	800664e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800664e:	787b      	ldrb	r3, [r7, #1]
 8006650:	059b      	lsls	r3, r3, #22
 8006652:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006656:	78bb      	ldrb	r3, [r7, #2]
 8006658:	02db      	lsls	r3, r3, #11
 800665a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800665e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006660:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006664:	049b      	lsls	r3, r3, #18
 8006666:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800666a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800666c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800666e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006672:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006678:	78fb      	ldrb	r3, [r7, #3]
 800667a:	0159      	lsls	r1, r3, #5
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	440b      	add	r3, r1
 8006680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006684:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800668a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800668c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006690:	2b03      	cmp	r3, #3
 8006692:	d10f      	bne.n	80066b4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4413      	add	r3, r2
 800669c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	78fa      	ldrb	r2, [r7, #3]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066b2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80066b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop

080066c4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08c      	sub	sp, #48	; 0x30
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	4613      	mov	r3, r2
 80066d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	785b      	ldrb	r3, [r3, #1]
 80066da:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80066dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066e0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d028      	beq.n	8006740 <USB_HC_StartXfer+0x7c>
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	791b      	ldrb	r3, [r3, #4]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d124      	bne.n	8006740 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80066f6:	79fb      	ldrb	r3, [r7, #7]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10b      	bne.n	8006714 <USB_HC_StartXfer+0x50>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	795b      	ldrb	r3, [r3, #5]
 8006700:	2b01      	cmp	r3, #1
 8006702:	d107      	bne.n	8006714 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	785b      	ldrb	r3, [r3, #1]
 8006708:	4619      	mov	r1, r3
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 fa30 	bl	8006b70 <USB_DoPing>
      return HAL_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	e114      	b.n	800693e <USB_HC_StartXfer+0x27a>
    }
    else if (dma == 1U)
 8006714:	79fb      	ldrb	r3, [r7, #7]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d112      	bne.n	8006740 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	4413      	add	r3, r2
 8006722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	69fa      	ldr	r2, [r7, #28]
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	6a3a      	ldr	r2, [r7, #32]
 800672e:	440a      	add	r2, r1
 8006730:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006734:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8006738:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d018      	beq.n	800677a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	8912      	ldrh	r2, [r2, #8]
 8006750:	4413      	add	r3, r2
 8006752:	3b01      	subs	r3, #1
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	8912      	ldrh	r2, [r2, #8]
 8006758:	fbb3 f3f2 	udiv	r3, r3, r2
 800675c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800675e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006760:	8b7b      	ldrh	r3, [r7, #26]
 8006762:	429a      	cmp	r2, r3
 8006764:	d90b      	bls.n	800677e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8006766:	8b7b      	ldrh	r3, [r7, #26]
 8006768:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800676a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	8912      	ldrh	r2, [r2, #8]
 8006770:	fb02 f203 	mul.w	r2, r2, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	611a      	str	r2, [r3, #16]
 8006778:	e001      	b.n	800677e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800677a:	2301      	movs	r3, #1
 800677c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	78db      	ldrb	r3, [r3, #3]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d006      	beq.n	8006794 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8006786:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	8912      	ldrh	r2, [r2, #8]
 800678c:	fb02 f203 	mul.w	r2, r2, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800679c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800679e:	04d9      	lsls	r1, r3, #19
 80067a0:	4b69      	ldr	r3, [pc, #420]	; (8006948 <USB_HC_StartXfer+0x284>)
 80067a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	7a9b      	ldrb	r3, [r3, #10]
 80067aa:	075b      	lsls	r3, r3, #29
 80067ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067b0:	69f9      	ldr	r1, [r7, #28]
 80067b2:	0148      	lsls	r0, r1, #5
 80067b4:	6a39      	ldr	r1, [r7, #32]
 80067b6:	4401      	add	r1, r0
 80067b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80067be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	68d9      	ldr	r1, [r3, #12]
 80067ca:	69fb      	ldr	r3, [r7, #28]
 80067cc:	015a      	lsls	r2, r3, #5
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d6:	460a      	mov	r2, r1
 80067d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0301 	and.w	r3, r3, #1
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bf0c      	ite	eq
 80067ea:	2301      	moveq	r3, #1
 80067ec:	2300      	movne	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	69fa      	ldr	r2, [r7, #28]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	6a3a      	ldr	r2, [r7, #32]
 8006806:	440a      	add	r2, r1
 8006808:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800680c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006810:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	015a      	lsls	r2, r3, #5
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	4413      	add	r3, r2
 800681a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	7e7b      	ldrb	r3, [r7, #25]
 8006822:	075b      	lsls	r3, r3, #29
 8006824:	69f9      	ldr	r1, [r7, #28]
 8006826:	0148      	lsls	r0, r1, #5
 8006828:	6a39      	ldr	r1, [r7, #32]
 800682a:	4401      	add	r1, r0
 800682c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006830:	4313      	orrs	r3, r2
 8006832:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	4413      	add	r3, r2
 800683c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a42      	ldr	r2, [pc, #264]	; (800694c <USB_HC_StartXfer+0x288>)
 8006844:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006846:	4b41      	ldr	r3, [pc, #260]	; (800694c <USB_HC_StartXfer+0x288>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800684e:	4a3f      	ldr	r2, [pc, #252]	; (800694c <USB_HC_StartXfer+0x288>)
 8006850:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	78db      	ldrb	r3, [r3, #3]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d006      	beq.n	8006868 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800685a:	4b3c      	ldr	r3, [pc, #240]	; (800694c <USB_HC_StartXfer+0x288>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006862:	4a3a      	ldr	r2, [pc, #232]	; (800694c <USB_HC_StartXfer+0x288>)
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	e005      	b.n	8006874 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006868:	4b38      	ldr	r3, [pc, #224]	; (800694c <USB_HC_StartXfer+0x288>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006870:	4a36      	ldr	r2, [pc, #216]	; (800694c <USB_HC_StartXfer+0x288>)
 8006872:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006874:	4b35      	ldr	r3, [pc, #212]	; (800694c <USB_HC_StartXfer+0x288>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800687c:	4a33      	ldr	r2, [pc, #204]	; (800694c <USB_HC_StartXfer+0x288>)
 800687e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	4413      	add	r3, r2
 8006888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688c:	461a      	mov	r2, r3
 800688e:	4b2f      	ldr	r3, [pc, #188]	; (800694c <USB_HC_StartXfer+0x288>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006894:	79fb      	ldrb	r3, [r7, #7]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	e04f      	b.n	800693e <USB_HC_StartXfer+0x27a>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	78db      	ldrb	r3, [r3, #3]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d14a      	bne.n	800693c <USB_HC_StartXfer+0x278>
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d046      	beq.n	800693c <USB_HC_StartXfer+0x278>
  {
    switch (hc->ep_type)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	79db      	ldrb	r3, [r3, #7]
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d830      	bhi.n	8006918 <USB_HC_StartXfer+0x254>
 80068b6:	a201      	add	r2, pc, #4	; (adr r2, 80068bc <USB_HC_StartXfer+0x1f8>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	080068cd 	.word	0x080068cd
 80068c0:	080068f1 	.word	0x080068f1
 80068c4:	080068cd 	.word	0x080068cd
 80068c8:	080068f1 	.word	0x080068f1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	3303      	adds	r3, #3
 80068d2:	089b      	lsrs	r3, r3, #2
 80068d4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80068d6:	8afa      	ldrh	r2, [r7, #22]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	b29b      	uxth	r3, r3
 80068de:	429a      	cmp	r2, r3
 80068e0:	d91c      	bls.n	800691c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f043 0220 	orr.w	r2, r3, #32
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80068ee:	e015      	b.n	800691c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	3303      	adds	r3, #3
 80068f6:	089b      	lsrs	r3, r3, #2
 80068f8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80068fa:	8afa      	ldrh	r2, [r7, #22]
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	b29b      	uxth	r3, r3
 8006906:	429a      	cmp	r2, r3
 8006908:	d90a      	bls.n	8006920 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	619a      	str	r2, [r3, #24]
        }
        break;
 8006916:	e003      	b.n	8006920 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006918:	bf00      	nop
 800691a:	e002      	b.n	8006922 <USB_HC_StartXfer+0x25e>
        break;
 800691c:	bf00      	nop
 800691e:	e000      	b.n	8006922 <USB_HC_StartXfer+0x25e>
        break;
 8006920:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	68d9      	ldr	r1, [r3, #12]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	785a      	ldrb	r2, [r3, #1]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	b298      	uxth	r0, r3
 8006930:	2300      	movs	r3, #0
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	4603      	mov	r3, r0
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7ff fbc6 	bl	80060c8 <USB_WritePacket>
  }

  return HAL_OK;
 800693c:	2300      	movs	r3, #0
}
 800693e:	4618      	mov	r0, r3
 8006940:	3728      	adds	r7, #40	; 0x28
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	1ff80000 	.word	0x1ff80000
 800694c:	200000b0 	.word	0x200000b0

08006950 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	b29b      	uxth	r3, r3
}
 8006966:	4618      	mov	r0, r3
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr

08006972 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006972:	b480      	push	{r7}
 8006974:	b087      	sub	sp, #28
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
 800697a:	460b      	mov	r3, r1
 800697c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	015a      	lsls	r2, r3, #5
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	4413      	add	r3, r2
 8006992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	0c9b      	lsrs	r3, r3, #18
 800699a:	f003 0303 	and.w	r3, r3, #3
 800699e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <USB_HC_Halt+0x3a>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	d16c      	bne.n	8006a86 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	0151      	lsls	r1, r2, #5
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	440a      	add	r2, r1
 80069c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069ca:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d143      	bne.n	8006a60 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	0151      	lsls	r1, r2, #5
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	440a      	add	r2, r1
 80069ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	0151      	lsls	r1, r2, #5
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	440a      	add	r2, r1
 8006a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a16:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	015a      	lsls	r2, r3, #5
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	4413      	add	r3, r2
 8006a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	0151      	lsls	r1, r2, #5
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	440a      	add	r2, r1
 8006a2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a36:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a44:	d81d      	bhi.n	8006a82 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a5c:	d0ec      	beq.n	8006a38 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a5e:	e080      	b.n	8006b62 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a7e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a80:	e06f      	b.n	8006b62 <USB_HC_Halt+0x1f0>
          break;
 8006a82:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006a84:	e06d      	b.n	8006b62 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	0151      	lsls	r1, r2, #5
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	440a      	add	r2, r1
 8006a9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d143      	bne.n	8006b3e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	015a      	lsls	r2, r3, #5
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ad0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ad4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	0151      	lsls	r1, r2, #5
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	440a      	add	r2, r1
 8006aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006af4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	0151      	lsls	r1, r2, #5
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	440a      	add	r2, r1
 8006b0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b14:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	3301      	adds	r3, #1
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b22:	d81d      	bhi.n	8006b60 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b3a:	d0ec      	beq.n	8006b16 <USB_HC_Halt+0x1a4>
 8006b3c:	e011      	b.n	8006b62 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	015a      	lsls	r2, r3, #5
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	4413      	add	r3, r2
 8006b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	0151      	lsls	r1, r2, #5
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	440a      	add	r2, r1
 8006b54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	e000      	b.n	8006b62 <USB_HC_Halt+0x1f0>
          break;
 8006b60:	bf00      	nop
    }
  }

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	371c      	adds	r7, #28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006b80:	78fb      	ldrb	r3, [r7, #3]
 8006b82:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006b84:	2301      	movs	r3, #1
 8006b86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	04da      	lsls	r2, r3, #19
 8006b8c:	4b15      	ldr	r3, [pc, #84]	; (8006be4 <USB_DoPing+0x74>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	0151      	lsls	r1, r2, #5
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	440a      	add	r2, r1
 8006b98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ba0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006bb8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bc0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bce:	461a      	mov	r2, r3
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	371c      	adds	r7, #28
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	1ff80000 	.word	0x1ff80000

08006be8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f7ff f9e1 	bl	8005fc0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006bfe:	2110      	movs	r1, #16
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7ff fa19 	bl	8006038 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff fa3c 	bl	8006084 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	613b      	str	r3, [r7, #16]
 8006c10:	e01f      	b.n	8006c52 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c28:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c30:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c38:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c46:	461a      	mov	r2, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	2b0f      	cmp	r3, #15
 8006c56:	d9dc      	bls.n	8006c12 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	613b      	str	r3, [r7, #16]
 8006c5c:	e034      	b.n	8006cc8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c74:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c7c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c84:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c92:	461a      	mov	r2, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	617b      	str	r3, [r7, #20]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ca4:	d80c      	bhi.n	8006cc0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cbc:	d0ec      	beq.n	8006c98 <USB_StopHost+0xb0>
 8006cbe:	e000      	b.n	8006cc2 <USB_StopHost+0xda>
        break;
 8006cc0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	613b      	str	r3, [r7, #16]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	2b0f      	cmp	r3, #15
 8006ccc:	d9c7      	bls.n	8006c5e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cda:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff f95a 	bl	8005f9e <USB_EnableGlobalInt>

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006cf4:	b590      	push	{r4, r7, lr}
 8006cf6:	b089      	sub	sp, #36	; 0x24
 8006cf8:	af04      	add	r7, sp, #16
 8006cfa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	2202      	movs	r2, #2
 8006d00:	2102      	movs	r1, #2
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 fc68 	bl	80075d8 <USBH_FindInterface>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	2bff      	cmp	r3, #255	; 0xff
 8006d10:	d002      	beq.n	8006d18 <USBH_CDC_InterfaceInit+0x24>
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d901      	bls.n	8006d1c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e13d      	b.n	8006f98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006d1c:	7bfb      	ldrb	r3, [r7, #15]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fc3d 	bl	80075a0 <USBH_SelectInterface>
 8006d26:	4603      	mov	r3, r0
 8006d28:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006d30:	2302      	movs	r3, #2
 8006d32:	e131      	b.n	8006f98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006d3a:	2050      	movs	r0, #80	; 0x50
 8006d3c:	f001 fb1a 	bl	8008374 <malloc>
 8006d40:	4603      	mov	r3, r0
 8006d42:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d4a:	69db      	ldr	r3, [r3, #28]
 8006d4c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006d54:	2302      	movs	r3, #2
 8006d56:	e11f      	b.n	8006f98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006d58:	2250      	movs	r2, #80	; 0x50
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	68b8      	ldr	r0, [r7, #8]
 8006d5e:	f001 fb19 	bl	8008394 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	211a      	movs	r1, #26
 8006d68:	fb01 f303 	mul.w	r3, r1, r3
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	b25b      	sxtb	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da15      	bge.n	8006da6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d7a:	7bfb      	ldrb	r3, [r7, #15]
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	211a      	movs	r1, #26
 8006d80:	fb01 f303 	mul.w	r3, r1, r3
 8006d84:	4413      	add	r3, r2
 8006d86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006d8a:	781a      	ldrb	r2, [r3, #0]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	211a      	movs	r1, #26
 8006d96:	fb01 f303 	mul.w	r3, r1, r3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006da0:	881a      	ldrh	r2, [r3, #0]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	785b      	ldrb	r3, [r3, #1]
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 ffa0 	bl	8007cf2 <USBH_AllocPipe>
 8006db2:	4603      	mov	r3, r0
 8006db4:	461a      	mov	r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	7819      	ldrb	r1, [r3, #0]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	7858      	ldrb	r0, [r3, #1]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	8952      	ldrh	r2, [r2, #10]
 8006dd2:	9202      	str	r2, [sp, #8]
 8006dd4:	2203      	movs	r2, #3
 8006dd6:	9201      	str	r2, [sp, #4]
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	4623      	mov	r3, r4
 8006ddc:	4602      	mov	r2, r0
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 ff58 	bl	8007c94 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2200      	movs	r2, #0
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 fa1b 	bl	8008228 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006df2:	2300      	movs	r3, #0
 8006df4:	2200      	movs	r2, #0
 8006df6:	210a      	movs	r1, #10
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fbed 	bl	80075d8 <USBH_FindInterface>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	2bff      	cmp	r3, #255	; 0xff
 8006e06:	d002      	beq.n	8006e0e <USBH_CDC_InterfaceInit+0x11a>
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d901      	bls.n	8006e12 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006e0e:	2302      	movs	r3, #2
 8006e10:	e0c2      	b.n	8006f98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006e12:	7bfb      	ldrb	r3, [r7, #15]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	211a      	movs	r1, #26
 8006e18:	fb01 f303 	mul.w	r3, r1, r3
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	b25b      	sxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	da16      	bge.n	8006e58 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e2a:	7bfb      	ldrb	r3, [r7, #15]
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	211a      	movs	r1, #26
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	4413      	add	r3, r2
 8006e36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e3a:	781a      	ldrb	r2, [r3, #0]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	211a      	movs	r1, #26
 8006e46:	fb01 f303 	mul.w	r3, r1, r3
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e50:	881a      	ldrh	r2, [r3, #0]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	835a      	strh	r2, [r3, #26]
 8006e56:	e015      	b.n	8006e84 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	211a      	movs	r1, #26
 8006e5e:	fb01 f303 	mul.w	r3, r1, r3
 8006e62:	4413      	add	r3, r2
 8006e64:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	211a      	movs	r1, #26
 8006e74:	fb01 f303 	mul.w	r3, r1, r3
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006e7e:	881a      	ldrh	r2, [r3, #0]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	211a      	movs	r1, #26
 8006e8a:	fb01 f303 	mul.w	r3, r1, r3
 8006e8e:	4413      	add	r3, r2
 8006e90:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	b25b      	sxtb	r3, r3
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	da16      	bge.n	8006eca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	211a      	movs	r1, #26
 8006ea2:	fb01 f303 	mul.w	r3, r1, r3
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006eac:	781a      	ldrb	r2, [r3, #0]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	211a      	movs	r1, #26
 8006eb8:	fb01 f303 	mul.w	r3, r1, r3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006ec2:	881a      	ldrh	r2, [r3, #0]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	835a      	strh	r2, [r3, #26]
 8006ec8:	e015      	b.n	8006ef6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	211a      	movs	r1, #26
 8006ed0:	fb01 f303 	mul.w	r3, r1, r3
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006eda:	781a      	ldrb	r2, [r3, #0]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006ee0:	7bfb      	ldrb	r3, [r7, #15]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	211a      	movs	r1, #26
 8006ee6:	fb01 f303 	mul.w	r3, r1, r3
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006ef0:	881a      	ldrh	r2, [r3, #0]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	7b9b      	ldrb	r3, [r3, #14]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f000 fef8 	bl	8007cf2 <USBH_AllocPipe>
 8006f02:	4603      	mov	r3, r0
 8006f04:	461a      	mov	r2, r3
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	7bdb      	ldrb	r3, [r3, #15]
 8006f0e:	4619      	mov	r1, r3
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 feee 	bl	8007cf2 <USBH_AllocPipe>
 8006f16:	4603      	mov	r3, r0
 8006f18:	461a      	mov	r2, r3
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	7b59      	ldrb	r1, [r3, #13]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	7b98      	ldrb	r0, [r3, #14]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	8b12      	ldrh	r2, [r2, #24]
 8006f36:	9202      	str	r2, [sp, #8]
 8006f38:	2202      	movs	r2, #2
 8006f3a:	9201      	str	r2, [sp, #4]
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	4623      	mov	r3, r4
 8006f40:	4602      	mov	r2, r0
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fea6 	bl	8007c94 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	7b19      	ldrb	r1, [r3, #12]
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	7bd8      	ldrb	r0, [r3, #15]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	8b52      	ldrh	r2, [r2, #26]
 8006f60:	9202      	str	r2, [sp, #8]
 8006f62:	2202      	movs	r2, #2
 8006f64:	9201      	str	r2, [sp, #4]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	4623      	mov	r3, r4
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fe91 	bl	8007c94 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	7b5b      	ldrb	r3, [r3, #13]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	4619      	mov	r1, r3
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f001 f950 	bl	8008228 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	7b1b      	ldrb	r3, [r3, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 f949 	bl	8008228 <USBH_LL_SetToggle>

  return USBH_OK;
 8006f96:	2300      	movs	r3, #0
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd90      	pop	{r4, r7, pc}

08006fa0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00e      	beq.n	8006fd8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 fe86 	bl	8007cd2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 feb1 	bl	8007d34 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	7b1b      	ldrb	r3, [r3, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00e      	beq.n	8006ffe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	7b1b      	ldrb	r3, [r3, #12]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fe73 	bl	8007cd2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	7b1b      	ldrb	r3, [r3, #12]
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fe9e 	bl	8007d34 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	7b5b      	ldrb	r3, [r3, #13]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00e      	beq.n	8007024 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	7b5b      	ldrb	r3, [r3, #13]
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 fe60 	bl	8007cd2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	7b5b      	ldrb	r3, [r3, #13]
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fe8b 	bl	8007d34 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800702a:	69db      	ldr	r3, [r3, #28]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00b      	beq.n	8007048 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007036:	69db      	ldr	r3, [r3, #28]
 8007038:	4618      	mov	r0, r3
 800703a:	f001 f9a3 	bl	8008384 <free>
    phost->pActiveClass->pData = 0U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007044:	2200      	movs	r2, #0
 8007046:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	3340      	adds	r3, #64	; 0x40
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f8b1 	bl	80071d2 <GetLineCoding>
 8007070:	4603      	mov	r3, r0
 8007072:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007074:	7afb      	ldrb	r3, [r7, #11]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d105      	bne.n	8007086 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007080:	2102      	movs	r1, #2
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007086:	7afb      	ldrb	r3, [r7, #11]
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007098:	2301      	movs	r3, #1
 800709a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800709c:	2300      	movs	r3, #0
 800709e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070a6:	69db      	ldr	r3, [r3, #28]
 80070a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d877      	bhi.n	80071a4 <USBH_CDC_Process+0x114>
 80070b4:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <USBH_CDC_Process+0x2c>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070d1 	.word	0x080070d1
 80070c0:	080070d7 	.word	0x080070d7
 80070c4:	08007107 	.word	0x08007107
 80070c8:	0800717b 	.word	0x0800717b
 80070cc:	08007189 	.word	0x08007189
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73fb      	strb	r3, [r7, #15]
      break;
 80070d4:	e06d      	b.n	80071b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f897 	bl	8007210 <SetLineCoding>
 80070e2:	4603      	mov	r3, r0
 80070e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80070e6:	7bbb      	ldrb	r3, [r7, #14]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d104      	bne.n	80070f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2202      	movs	r2, #2
 80070f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80070f4:	e058      	b.n	80071a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80070f6:	7bbb      	ldrb	r3, [r7, #14]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d055      	beq.n	80071a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	2204      	movs	r2, #4
 8007100:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007104:	e050      	b.n	80071a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	3340      	adds	r3, #64	; 0x40
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f860 	bl	80071d2 <GetLineCoding>
 8007112:	4603      	mov	r3, r0
 8007114:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d126      	bne.n	800716a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712e:	791b      	ldrb	r3, [r3, #4]
 8007130:	429a      	cmp	r2, r3
 8007132:	d13b      	bne.n	80071ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800713e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007140:	429a      	cmp	r2, r3
 8007142:	d133      	bne.n	80071ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800714e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007150:	429a      	cmp	r2, r3
 8007152:	d12b      	bne.n	80071ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800715c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800715e:	429a      	cmp	r2, r3
 8007160:	d124      	bne.n	80071ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f95a 	bl	800741c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007168:	e020      	b.n	80071ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d01d      	beq.n	80071ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2204      	movs	r2, #4
 8007174:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007178:	e018      	b.n	80071ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f867 	bl	800724e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 f8dc 	bl	800733e <CDC_ProcessReception>
      break;
 8007186:	e014      	b.n	80071b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007188:	2100      	movs	r1, #0
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fb0a 	bl	80077a4 <USBH_ClrFeature>
 8007190:	4603      	mov	r3, r0
 8007192:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007194:	7bbb      	ldrb	r3, [r7, #14]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10a      	bne.n	80071b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80071a2:	e005      	b.n	80071b0 <USBH_CDC_Process+0x120>

    default:
      break;
 80071a4:	bf00      	nop
 80071a6:	e004      	b.n	80071b2 <USBH_CDC_Process+0x122>
      break;
 80071a8:	bf00      	nop
 80071aa:	e002      	b.n	80071b2 <USBH_CDC_Process+0x122>
      break;
 80071ac:	bf00      	nop
 80071ae:	e000      	b.n	80071b2 <USBH_CDC_Process+0x122>
      break;
 80071b0:	bf00      	nop

  }

  return status;
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3710      	adds	r7, #16
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b082      	sub	sp, #8
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	22a1      	movs	r2, #161	; 0xa1
 80071e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2221      	movs	r2, #33	; 0x21
 80071e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2207      	movs	r2, #7
 80071f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2207      	movs	r2, #7
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 faf3 	bl	80077ec <USBH_CtlReq>
 8007206:	4603      	mov	r3, r0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2221      	movs	r2, #33	; 0x21
 800721e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2220      	movs	r2, #32
 8007224:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2207      	movs	r2, #7
 8007236:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2207      	movs	r2, #7
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 fad4 	bl	80077ec <USBH_CtlReq>
 8007244:	4603      	mov	r3, r0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b086      	sub	sp, #24
 8007252:	af02      	add	r7, sp, #8
 8007254:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007260:	2300      	movs	r3, #0
 8007262:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800726a:	2b01      	cmp	r3, #1
 800726c:	d002      	beq.n	8007274 <CDC_ProcessTransmission+0x26>
 800726e:	2b02      	cmp	r3, #2
 8007270:	d025      	beq.n	80072be <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8007272:	e060      	b.n	8007336 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	8b12      	ldrh	r2, [r2, #24]
 800727c:	4293      	cmp	r3, r2
 800727e:	d90c      	bls.n	800729a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	69d9      	ldr	r1, [r3, #28]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	8b1a      	ldrh	r2, [r3, #24]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	7b58      	ldrb	r0, [r3, #13]
 800728c:	2301      	movs	r3, #1
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	4603      	mov	r3, r0
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fcbb 	bl	8007c0e <USBH_BulkSendData>
 8007298:	e00c      	b.n	80072b4 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	7b58      	ldrb	r0, [r3, #13]
 80072a8:	2301      	movs	r3, #1
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	4603      	mov	r3, r0
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fcad 	bl	8007c0e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2202      	movs	r2, #2
 80072b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80072bc:	e03b      	b.n	8007336 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	7b5b      	ldrb	r3, [r3, #13]
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 ff85 	bl	80081d4 <USBH_LL_GetURBState>
 80072ca:	4603      	mov	r3, r0
 80072cc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80072ce:	7afb      	ldrb	r3, [r7, #11]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d128      	bne.n	8007326 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	8b12      	ldrh	r2, [r2, #24]
 80072dc:	4293      	cmp	r3, r2
 80072de:	d90e      	bls.n	80072fe <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	8b12      	ldrh	r2, [r2, #24]
 80072e8:	1a9a      	subs	r2, r3, r2
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	8b12      	ldrh	r2, [r2, #24]
 80072f6:	441a      	add	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	61da      	str	r2, [r3, #28]
 80072fc:	e002      	b.n	8007304 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	2b00      	cmp	r3, #0
 800730a:	d004      	beq.n	8007316 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007314:	e00e      	b.n	8007334 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f868 	bl	80073f4 <USBH_CDC_TransmitCallback>
      break;
 8007324:	e006      	b.n	8007334 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8007326:	7afb      	ldrb	r3, [r7, #11]
 8007328:	2b02      	cmp	r3, #2
 800732a:	d103      	bne.n	8007334 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007334:	bf00      	nop
  }
}
 8007336:	bf00      	nop
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b086      	sub	sp, #24
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800734c:	69db      	ldr	r3, [r3, #28]
 800734e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007350:	2300      	movs	r3, #0
 8007352:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800735a:	2b03      	cmp	r3, #3
 800735c:	d002      	beq.n	8007364 <CDC_ProcessReception+0x26>
 800735e:	2b04      	cmp	r3, #4
 8007360:	d00e      	beq.n	8007380 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007362:	e043      	b.n	80073ec <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	6a19      	ldr	r1, [r3, #32]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	8b5a      	ldrh	r2, [r3, #26]
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	7b1b      	ldrb	r3, [r3, #12]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fc71 	bl	8007c58 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	2204      	movs	r2, #4
 800737a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800737e:	e035      	b.n	80073ec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	7b1b      	ldrb	r3, [r3, #12]
 8007384:	4619      	mov	r1, r3
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 ff24 	bl	80081d4 <USBH_LL_GetURBState>
 800738c:	4603      	mov	r3, r0
 800738e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007390:	7cfb      	ldrb	r3, [r7, #19]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d129      	bne.n	80073ea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	7b1b      	ldrb	r3, [r3, #12]
 800739a:	4619      	mov	r1, r3
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fe87 	bl	80080b0 <USBH_LL_GetLastXferSize>
 80073a2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d016      	beq.n	80073dc <CDC_ProcessReception+0x9e>
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	8b5b      	ldrh	r3, [r3, #26]
 80073b2:	461a      	mov	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d910      	bls.n	80073dc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	1ad2      	subs	r2, r2, r3
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	6a1a      	ldr	r2, [r3, #32]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	441a      	add	r2, r3
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2203      	movs	r2, #3
 80073d6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80073da:	e006      	b.n	80073ea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f80f 	bl	8007408 <USBH_CDC_ReceiveCallback>
      break;
 80073ea:	bf00      	nop
  }
}
 80073ec:	bf00      	nop
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	4613      	mov	r3, r2
 800743c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007444:	2302      	movs	r3, #2
 8007446:	e029      	b.n	800749c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	79fa      	ldrb	r2, [r7, #7]
 800744c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 f81f 	bl	80074a4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 fd99 	bl	8007fcc <USBH_LL_Init>

  return USBH_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80074ac:	2300      	movs	r3, #0
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e009      	b.n	80074ca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	33e0      	adds	r3, #224	; 0xe0
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	2200      	movs	r2, #0
 80074c2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3301      	adds	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b0e      	cmp	r3, #14
 80074ce:	d9f2      	bls.n	80074b6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e009      	b.n	80074ea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074e0:	2200      	movs	r2, #0
 80074e2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	3301      	adds	r3, #1
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f0:	d3f1      	bcc.n	80074d6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2240      	movs	r2, #64	; 0x40
 8007516:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d016      	beq.n	800758e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10e      	bne.n	8007588 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007570:	1c59      	adds	r1, r3, #1
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	33de      	adds	r3, #222	; 0xde
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
 8007586:	e004      	b.n	8007592 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007588:	2302      	movs	r3, #2
 800758a:	73fb      	strb	r3, [r7, #15]
 800758c:	e001      	b.n	8007592 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800758e:	2302      	movs	r3, #2
 8007590:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007592:	7bfb      	ldrb	r3, [r7, #15]
}
 8007594:	4618      	mov	r0, r3
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80075b6:	78fa      	ldrb	r2, [r7, #3]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d204      	bcs.n	80075c6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	78fa      	ldrb	r2, [r7, #3]
 80075c0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80075c4:	e001      	b.n	80075ca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80075c6:	2302      	movs	r3, #2
 80075c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80075d8:	b480      	push	{r7}
 80075da:	b087      	sub	sp, #28
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	4608      	mov	r0, r1
 80075e2:	4611      	mov	r1, r2
 80075e4:	461a      	mov	r2, r3
 80075e6:	4603      	mov	r3, r0
 80075e8:	70fb      	strb	r3, [r7, #3]
 80075ea:	460b      	mov	r3, r1
 80075ec:	70bb      	strb	r3, [r7, #2]
 80075ee:	4613      	mov	r3, r2
 80075f0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007600:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007602:	e025      	b.n	8007650 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007604:	7dfb      	ldrb	r3, [r7, #23]
 8007606:	221a      	movs	r2, #26
 8007608:	fb02 f303 	mul.w	r3, r2, r3
 800760c:	3308      	adds	r3, #8
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4413      	add	r3, r2
 8007612:	3302      	adds	r3, #2
 8007614:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	795b      	ldrb	r3, [r3, #5]
 800761a:	78fa      	ldrb	r2, [r7, #3]
 800761c:	429a      	cmp	r2, r3
 800761e:	d002      	beq.n	8007626 <USBH_FindInterface+0x4e>
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	2bff      	cmp	r3, #255	; 0xff
 8007624:	d111      	bne.n	800764a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800762a:	78ba      	ldrb	r2, [r7, #2]
 800762c:	429a      	cmp	r2, r3
 800762e:	d002      	beq.n	8007636 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007630:	78bb      	ldrb	r3, [r7, #2]
 8007632:	2bff      	cmp	r3, #255	; 0xff
 8007634:	d109      	bne.n	800764a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800763a:	787a      	ldrb	r2, [r7, #1]
 800763c:	429a      	cmp	r2, r3
 800763e:	d002      	beq.n	8007646 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007640:	787b      	ldrb	r3, [r7, #1]
 8007642:	2bff      	cmp	r3, #255	; 0xff
 8007644:	d101      	bne.n	800764a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007646:	7dfb      	ldrb	r3, [r7, #23]
 8007648:	e006      	b.n	8007658 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800764a:	7dfb      	ldrb	r3, [r7, #23]
 800764c:	3301      	adds	r3, #1
 800764e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d9d6      	bls.n	8007604 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007656:	23ff      	movs	r3, #255	; 0xff
}
 8007658:	4618      	mov	r0, r3
 800765a:	371c      	adds	r7, #28
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fce9 	bl	8008044 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007672:	2101      	movs	r1, #1
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fdc0 	bl	80081fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f804 	bl	80076c6 <USBH_HandleSof>
}
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b0b      	cmp	r3, #11
 80076d6:	d10a      	bne.n	80076ee <USBH_HandleSof+0x28>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	4798      	blx	r3
  }
}
 80076ee:	bf00      	nop
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80076f6:	b480      	push	{r7}
 80076f8:	b083      	sub	sp, #12
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007706:	bf00      	nop
}
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007712:	b480      	push	{r7}
 8007714:	b083      	sub	sp, #12
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007722:	bf00      	nop
}
 8007724:	370c      	adds	r7, #12
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fc7c 	bl	800807a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	791b      	ldrb	r3, [r3, #4]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fad3 	bl	8007d34 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	795b      	ldrb	r3, [r3, #5]
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 facd 	bl	8007d34 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	789b      	ldrb	r3, [r3, #2]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d10f      	bne.n	80077d8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2202      	movs	r2, #2
 80077bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80077ca:	78fb      	ldrb	r3, [r7, #3]
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80077d8:	2200      	movs	r2, #0
 80077da:	2100      	movs	r1, #0
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 f805 	bl	80077ec <USBH_CtlReq>
 80077e2:	4603      	mov	r3, r0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80077fa:	2301      	movs	r3, #1
 80077fc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	789b      	ldrb	r3, [r3, #2]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d002      	beq.n	800780c <USBH_CtlReq+0x20>
 8007806:	2b02      	cmp	r3, #2
 8007808:	d00f      	beq.n	800782a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800780a:	e027      	b.n	800785c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	88fa      	ldrh	r2, [r7, #6]
 8007816:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2201      	movs	r2, #1
 800781c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2202      	movs	r2, #2
 8007822:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007824:	2301      	movs	r3, #1
 8007826:	75fb      	strb	r3, [r7, #23]
      break;
 8007828:	e018      	b.n	800785c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 f81c 	bl	8007868 <USBH_HandleControl>
 8007830:	4603      	mov	r3, r0
 8007832:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007834:	7dfb      	ldrb	r3, [r7, #23]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <USBH_CtlReq+0x54>
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	2b03      	cmp	r3, #3
 800783e:	d106      	bne.n	800784e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2201      	movs	r2, #1
 8007844:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	761a      	strb	r2, [r3, #24]
      break;
 800784c:	e005      	b.n	800785a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800784e:	7dfb      	ldrb	r3, [r7, #23]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d102      	bne.n	800785a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2201      	movs	r2, #1
 8007858:	709a      	strb	r2, [r3, #2]
      break;
 800785a:	bf00      	nop
  }
  return status;
 800785c:	7dfb      	ldrb	r3, [r7, #23]
}
 800785e:	4618      	mov	r0, r3
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af02      	add	r7, sp, #8
 800786e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007870:	2301      	movs	r3, #1
 8007872:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007874:	2300      	movs	r3, #0
 8007876:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	7e1b      	ldrb	r3, [r3, #24]
 800787c:	3b01      	subs	r3, #1
 800787e:	2b0a      	cmp	r3, #10
 8007880:	f200 8158 	bhi.w	8007b34 <USBH_HandleControl+0x2cc>
 8007884:	a201      	add	r2, pc, #4	; (adr r2, 800788c <USBH_HandleControl+0x24>)
 8007886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788a:	bf00      	nop
 800788c:	080078b9 	.word	0x080078b9
 8007890:	080078d3 	.word	0x080078d3
 8007894:	0800793d 	.word	0x0800793d
 8007898:	08007963 	.word	0x08007963
 800789c:	0800799b 	.word	0x0800799b
 80078a0:	080079c7 	.word	0x080079c7
 80078a4:	08007a19 	.word	0x08007a19
 80078a8:	08007a3b 	.word	0x08007a3b
 80078ac:	08007a77 	.word	0x08007a77
 80078b0:	08007a9f 	.word	0x08007a9f
 80078b4:	08007add 	.word	0x08007add
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f103 0110 	add.w	r1, r3, #16
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	795b      	ldrb	r3, [r3, #5]
 80078c2:	461a      	mov	r2, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f945 	bl	8007b54 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2202      	movs	r2, #2
 80078ce:	761a      	strb	r2, [r3, #24]
      break;
 80078d0:	e13b      	b.n	8007b4a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	795b      	ldrb	r3, [r3, #5]
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fc7b 	bl	80081d4 <USBH_LL_GetURBState>
 80078de:	4603      	mov	r3, r0
 80078e0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d11e      	bne.n	8007926 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	7c1b      	ldrb	r3, [r3, #16]
 80078ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80078f0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	8adb      	ldrh	r3, [r3, #22]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80078fa:	7b7b      	ldrb	r3, [r7, #13]
 80078fc:	2b80      	cmp	r3, #128	; 0x80
 80078fe:	d103      	bne.n	8007908 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2203      	movs	r2, #3
 8007904:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007906:	e117      	b.n	8007b38 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2205      	movs	r2, #5
 800790c:	761a      	strb	r2, [r3, #24]
      break;
 800790e:	e113      	b.n	8007b38 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8007910:	7b7b      	ldrb	r3, [r7, #13]
 8007912:	2b80      	cmp	r3, #128	; 0x80
 8007914:	d103      	bne.n	800791e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2209      	movs	r2, #9
 800791a:	761a      	strb	r2, [r3, #24]
      break;
 800791c:	e10c      	b.n	8007b38 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2207      	movs	r2, #7
 8007922:	761a      	strb	r2, [r3, #24]
      break;
 8007924:	e108      	b.n	8007b38 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007926:	7bbb      	ldrb	r3, [r7, #14]
 8007928:	2b04      	cmp	r3, #4
 800792a:	d003      	beq.n	8007934 <USBH_HandleControl+0xcc>
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	2b02      	cmp	r3, #2
 8007930:	f040 8102 	bne.w	8007b38 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	220b      	movs	r2, #11
 8007938:	761a      	strb	r2, [r3, #24]
      break;
 800793a:	e0fd      	b.n	8007b38 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007942:	b29a      	uxth	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6899      	ldr	r1, [r3, #8]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	899a      	ldrh	r2, [r3, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	791b      	ldrb	r3, [r3, #4]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f93c 	bl	8007bd2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2204      	movs	r2, #4
 800795e:	761a      	strb	r2, [r3, #24]
      break;
 8007960:	e0f3      	b.n	8007b4a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	791b      	ldrb	r3, [r3, #4]
 8007966:	4619      	mov	r1, r3
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fc33 	bl	80081d4 <USBH_LL_GetURBState>
 800796e:	4603      	mov	r3, r0
 8007970:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007972:	7bbb      	ldrb	r3, [r7, #14]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d102      	bne.n	800797e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2209      	movs	r2, #9
 800797c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	2b05      	cmp	r3, #5
 8007982:	d102      	bne.n	800798a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007984:	2303      	movs	r3, #3
 8007986:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007988:	e0d8      	b.n	8007b3c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	2b04      	cmp	r3, #4
 800798e:	f040 80d5 	bne.w	8007b3c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	220b      	movs	r2, #11
 8007996:	761a      	strb	r2, [r3, #24]
      break;
 8007998:	e0d0      	b.n	8007b3c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6899      	ldr	r1, [r3, #8]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	899a      	ldrh	r2, [r3, #12]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	7958      	ldrb	r0, [r3, #5]
 80079a6:	2301      	movs	r3, #1
 80079a8:	9300      	str	r3, [sp, #0]
 80079aa:	4603      	mov	r3, r0
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f8eb 	bl	8007b88 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2206      	movs	r2, #6
 80079c2:	761a      	strb	r2, [r3, #24]
      break;
 80079c4:	e0c1      	b.n	8007b4a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	795b      	ldrb	r3, [r3, #5]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fc01 	bl	80081d4 <USBH_LL_GetURBState>
 80079d2:	4603      	mov	r3, r0
 80079d4:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	2b01      	cmp	r3, #1
 80079da:	d103      	bne.n	80079e4 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2207      	movs	r2, #7
 80079e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80079e2:	e0ad      	b.n	8007b40 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b05      	cmp	r3, #5
 80079e8:	d105      	bne.n	80079f6 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	220c      	movs	r2, #12
 80079ee:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80079f0:	2303      	movs	r3, #3
 80079f2:	73fb      	strb	r3, [r7, #15]
      break;
 80079f4:	e0a4      	b.n	8007b40 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d103      	bne.n	8007a04 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2205      	movs	r2, #5
 8007a00:	761a      	strb	r2, [r3, #24]
      break;
 8007a02:	e09d      	b.n	8007b40 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8007a04:	7bbb      	ldrb	r3, [r7, #14]
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	f040 809a 	bne.w	8007b40 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	220b      	movs	r2, #11
 8007a10:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007a12:	2302      	movs	r3, #2
 8007a14:	73fb      	strb	r3, [r7, #15]
      break;
 8007a16:	e093      	b.n	8007b40 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	791b      	ldrb	r3, [r3, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2100      	movs	r1, #0
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f8d6 	bl	8007bd2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a2c:	b29a      	uxth	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2208      	movs	r2, #8
 8007a36:	761a      	strb	r2, [r3, #24]

      break;
 8007a38:	e087      	b.n	8007b4a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	791b      	ldrb	r3, [r3, #4]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fbc7 	bl	80081d4 <USBH_LL_GetURBState>
 8007a46:	4603      	mov	r3, r0
 8007a48:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007a4a:	7bbb      	ldrb	r3, [r7, #14]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d105      	bne.n	8007a5c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	220d      	movs	r2, #13
 8007a54:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007a5a:	e073      	b.n	8007b44 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8007a5c:	7bbb      	ldrb	r3, [r7, #14]
 8007a5e:	2b04      	cmp	r3, #4
 8007a60:	d103      	bne.n	8007a6a <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	220b      	movs	r2, #11
 8007a66:	761a      	strb	r2, [r3, #24]
      break;
 8007a68:	e06c      	b.n	8007b44 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
 8007a6c:	2b05      	cmp	r3, #5
 8007a6e:	d169      	bne.n	8007b44 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8007a70:	2303      	movs	r3, #3
 8007a72:	73fb      	strb	r3, [r7, #15]
      break;
 8007a74:	e066      	b.n	8007b44 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	795a      	ldrb	r2, [r3, #5]
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	2200      	movs	r2, #0
 8007a82:	2100      	movs	r1, #0
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f87f 	bl	8007b88 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	220a      	movs	r2, #10
 8007a9a:	761a      	strb	r2, [r3, #24]
      break;
 8007a9c:	e055      	b.n	8007b4a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	795b      	ldrb	r3, [r3, #5]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fb95 	bl	80081d4 <USBH_LL_GetURBState>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007aae:	7bbb      	ldrb	r3, [r7, #14]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d105      	bne.n	8007ac0 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	220d      	movs	r2, #13
 8007abc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007abe:	e043      	b.n	8007b48 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d103      	bne.n	8007ace <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2209      	movs	r2, #9
 8007aca:	761a      	strb	r2, [r3, #24]
      break;
 8007acc:	e03c      	b.n	8007b48 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d139      	bne.n	8007b48 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	220b      	movs	r2, #11
 8007ad8:	761a      	strb	r2, [r3, #24]
      break;
 8007ada:	e035      	b.n	8007b48 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	7e5b      	ldrb	r3, [r3, #25]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	765a      	strb	r2, [r3, #25]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	7e5b      	ldrb	r3, [r3, #25]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d806      	bhi.n	8007afe <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2201      	movs	r2, #1
 8007afa:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007afc:	e025      	b.n	8007b4a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b04:	2106      	movs	r1, #6
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	795b      	ldrb	r3, [r3, #5]
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f90c 	bl	8007d34 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	791b      	ldrb	r3, [r3, #4]
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f906 	bl	8007d34 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007b2e:	2302      	movs	r3, #2
 8007b30:	73fb      	strb	r3, [r7, #15]
      break;
 8007b32:	e00a      	b.n	8007b4a <USBH_HandleControl+0x2e2>

    default:
      break;
 8007b34:	bf00      	nop
 8007b36:	e008      	b.n	8007b4a <USBH_HandleControl+0x2e2>
      break;
 8007b38:	bf00      	nop
 8007b3a:	e006      	b.n	8007b4a <USBH_HandleControl+0x2e2>
      break;
 8007b3c:	bf00      	nop
 8007b3e:	e004      	b.n	8007b4a <USBH_HandleControl+0x2e2>
      break;
 8007b40:	bf00      	nop
 8007b42:	e002      	b.n	8007b4a <USBH_HandleControl+0x2e2>
      break;
 8007b44:	bf00      	nop
 8007b46:	e000      	b.n	8007b4a <USBH_HandleControl+0x2e2>
      break;
 8007b48:	bf00      	nop
  }

  return status;
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af04      	add	r7, sp, #16
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	4613      	mov	r3, r2
 8007b60:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007b62:	79f9      	ldrb	r1, [r7, #7]
 8007b64:	2300      	movs	r3, #0
 8007b66:	9303      	str	r3, [sp, #12]
 8007b68:	2308      	movs	r3, #8
 8007b6a:	9302      	str	r3, [sp, #8]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	9301      	str	r3, [sp, #4]
 8007b70:	2300      	movs	r3, #0
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	2300      	movs	r3, #0
 8007b76:	2200      	movs	r2, #0
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 fafa 	bl	8008172 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b088      	sub	sp, #32
 8007b8c:	af04      	add	r7, sp, #16
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	4611      	mov	r1, r2
 8007b94:	461a      	mov	r2, r3
 8007b96:	460b      	mov	r3, r1
 8007b98:	80fb      	strh	r3, [r7, #6]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007bac:	7979      	ldrb	r1, [r7, #5]
 8007bae:	7e3b      	ldrb	r3, [r7, #24]
 8007bb0:	9303      	str	r3, [sp, #12]
 8007bb2:	88fb      	ldrh	r3, [r7, #6]
 8007bb4:	9302      	str	r3, [sp, #8]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	2301      	movs	r3, #1
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fad5 	bl	8008172 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b088      	sub	sp, #32
 8007bd6:	af04      	add	r7, sp, #16
 8007bd8:	60f8      	str	r0, [r7, #12]
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	4611      	mov	r1, r2
 8007bde:	461a      	mov	r2, r3
 8007be0:	460b      	mov	r3, r1
 8007be2:	80fb      	strh	r3, [r7, #6]
 8007be4:	4613      	mov	r3, r2
 8007be6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007be8:	7979      	ldrb	r1, [r7, #5]
 8007bea:	2300      	movs	r3, #0
 8007bec:	9303      	str	r3, [sp, #12]
 8007bee:	88fb      	ldrh	r3, [r7, #6]
 8007bf0:	9302      	str	r3, [sp, #8]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 fab7 	bl	8008172 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007c04:	2300      	movs	r3, #0

}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b088      	sub	sp, #32
 8007c12:	af04      	add	r7, sp, #16
 8007c14:	60f8      	str	r0, [r7, #12]
 8007c16:	60b9      	str	r1, [r7, #8]
 8007c18:	4611      	mov	r1, r2
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	80fb      	strh	r3, [r7, #6]
 8007c20:	4613      	mov	r3, r2
 8007c22:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c32:	7979      	ldrb	r1, [r7, #5]
 8007c34:	7e3b      	ldrb	r3, [r7, #24]
 8007c36:	9303      	str	r3, [sp, #12]
 8007c38:	88fb      	ldrh	r3, [r7, #6]
 8007c3a:	9302      	str	r3, [sp, #8]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	2301      	movs	r3, #1
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	2302      	movs	r3, #2
 8007c46:	2200      	movs	r2, #0
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 fa92 	bl	8008172 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af04      	add	r7, sp, #16
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	4611      	mov	r1, r2
 8007c64:	461a      	mov	r2, r3
 8007c66:	460b      	mov	r3, r1
 8007c68:	80fb      	strh	r3, [r7, #6]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007c6e:	7979      	ldrb	r1, [r7, #5]
 8007c70:	2300      	movs	r3, #0
 8007c72:	9303      	str	r3, [sp, #12]
 8007c74:	88fb      	ldrh	r3, [r7, #6]
 8007c76:	9302      	str	r3, [sp, #8]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	9301      	str	r3, [sp, #4]
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	9300      	str	r3, [sp, #0]
 8007c80:	2302      	movs	r3, #2
 8007c82:	2201      	movs	r2, #1
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 fa74 	bl	8008172 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b086      	sub	sp, #24
 8007c98:	af04      	add	r7, sp, #16
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	4608      	mov	r0, r1
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	70fb      	strb	r3, [r7, #3]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70bb      	strb	r3, [r7, #2]
 8007caa:	4613      	mov	r3, r2
 8007cac:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007cae:	7878      	ldrb	r0, [r7, #1]
 8007cb0:	78ba      	ldrb	r2, [r7, #2]
 8007cb2:	78f9      	ldrb	r1, [r7, #3]
 8007cb4:	8b3b      	ldrh	r3, [r7, #24]
 8007cb6:	9302      	str	r3, [sp, #8]
 8007cb8:	7d3b      	ldrb	r3, [r7, #20]
 8007cba:	9301      	str	r3, [sp, #4]
 8007cbc:	7c3b      	ldrb	r3, [r7, #16]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fa07 	bl	80080d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b082      	sub	sp, #8
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
 8007cda:	460b      	mov	r3, r1
 8007cdc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8007cde:	78fb      	ldrb	r3, [r7, #3]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa26 	bl	8008134 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}

08007cf2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f836 	bl	8007d70 <USBH_GetFreePipe>
 8007d04:	4603      	mov	r3, r0
 8007d06:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007d08:	89fb      	ldrh	r3, [r7, #14]
 8007d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00a      	beq.n	8007d28 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8007d12:	78fa      	ldrb	r2, [r7, #3]
 8007d14:	89fb      	ldrh	r3, [r7, #14]
 8007d16:	f003 030f 	and.w	r3, r3, #15
 8007d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d1e:	6879      	ldr	r1, [r7, #4]
 8007d20:	33e0      	adds	r3, #224	; 0xe0
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	440b      	add	r3, r1
 8007d26:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007d28:	89fb      	ldrh	r3, [r7, #14]
 8007d2a:	b2db      	uxtb	r3, r3
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b083      	sub	sp, #12
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	2b0a      	cmp	r3, #10
 8007d44:	d80d      	bhi.n	8007d62 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007d46:	78fb      	ldrb	r3, [r7, #3]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	33e0      	adds	r3, #224	; 0xe0
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	78fb      	ldrb	r3, [r7, #3]
 8007d54:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007d58:	6879      	ldr	r1, [r7, #4]
 8007d5a:	33e0      	adds	r3, #224	; 0xe0
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	440b      	add	r3, r1
 8007d60:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	73fb      	strb	r3, [r7, #15]
 8007d80:	e00f      	b.n	8007da2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	33e0      	adds	r3, #224	; 0xe0
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	4413      	add	r3, r2
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d102      	bne.n	8007d9c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	e007      	b.n	8007dac <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
 8007d9e:	3301      	adds	r3, #1
 8007da0:	73fb      	strb	r3, [r7, #15]
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
 8007da4:	2b0a      	cmp	r3, #10
 8007da6:	d9ec      	bls.n	8007d82 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	490e      	ldr	r1, [pc, #56]	; (8007df8 <MX_USB_HOST_Init+0x40>)
 8007dc0:	480e      	ldr	r0, [pc, #56]	; (8007dfc <MX_USB_HOST_Init+0x44>)
 8007dc2:	f7ff fb35 	bl	8007430 <USBH_Init>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007dcc:	f7f8 ff94 	bl	8000cf8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007dd0:	490b      	ldr	r1, [pc, #44]	; (8007e00 <MX_USB_HOST_Init+0x48>)
 8007dd2:	480a      	ldr	r0, [pc, #40]	; (8007dfc <MX_USB_HOST_Init+0x44>)
 8007dd4:	f7ff fbba 	bl	800754c <USBH_RegisterClass>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007dde:	f7f8 ff8b 	bl	8000cf8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007de2:	4806      	ldr	r0, [pc, #24]	; (8007dfc <MX_USB_HOST_Init+0x44>)
 8007de4:	f7ff fc3e 	bl	8007664 <USBH_Start>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007dee:	f7f8 ff83 	bl	8000cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007df2:	bf00      	nop
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	08007e05 	.word	0x08007e05
 8007dfc:	200002a0 	.word	0x200002a0
 8007e00:	2000000c 	.word	0x2000000c

08007e04 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	d819      	bhi.n	8007e4c <USBH_UserProcess+0x48>
 8007e18:	a201      	add	r2, pc, #4	; (adr r2, 8007e20 <USBH_UserProcess+0x1c>)
 8007e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1e:	bf00      	nop
 8007e20:	08007e4d 	.word	0x08007e4d
 8007e24:	08007e3d 	.word	0x08007e3d
 8007e28:	08007e4d 	.word	0x08007e4d
 8007e2c:	08007e45 	.word	0x08007e45
 8007e30:	08007e35 	.word	0x08007e35
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e34:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <USBH_UserProcess+0x58>)
 8007e36:	2203      	movs	r2, #3
 8007e38:	701a      	strb	r2, [r3, #0]
  break;
 8007e3a:	e008      	b.n	8007e4e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e3c:	4b07      	ldr	r3, [pc, #28]	; (8007e5c <USBH_UserProcess+0x58>)
 8007e3e:	2202      	movs	r2, #2
 8007e40:	701a      	strb	r2, [r3, #0]
  break;
 8007e42:	e004      	b.n	8007e4e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <USBH_UserProcess+0x58>)
 8007e46:	2201      	movs	r2, #1
 8007e48:	701a      	strb	r2, [r3, #0]
  break;
 8007e4a:	e000      	b.n	8007e4e <USBH_UserProcess+0x4a>

  default:
  break;
 8007e4c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e4e:	bf00      	nop
 8007e50:	370c      	adds	r7, #12
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	200000b4 	.word	0x200000b4

08007e60 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08a      	sub	sp, #40	; 0x28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e68:	f107 0314 	add.w	r3, r7, #20
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	605a      	str	r2, [r3, #4]
 8007e72:	609a      	str	r2, [r3, #8]
 8007e74:	60da      	str	r2, [r3, #12]
 8007e76:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e80:	d147      	bne.n	8007f12 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e82:	2300      	movs	r3, #0
 8007e84:	613b      	str	r3, [r7, #16]
 8007e86:	4b25      	ldr	r3, [pc, #148]	; (8007f1c <HAL_HCD_MspInit+0xbc>)
 8007e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8a:	4a24      	ldr	r2, [pc, #144]	; (8007f1c <HAL_HCD_MspInit+0xbc>)
 8007e8c:	f043 0301 	orr.w	r3, r3, #1
 8007e90:	6313      	str	r3, [r2, #48]	; 0x30
 8007e92:	4b22      	ldr	r3, [pc, #136]	; (8007f1c <HAL_HCD_MspInit+0xbc>)
 8007e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	613b      	str	r3, [r7, #16]
 8007e9c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007eac:	f107 0314 	add.w	r3, r7, #20
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	481b      	ldr	r0, [pc, #108]	; (8007f20 <HAL_HCD_MspInit+0xc0>)
 8007eb4:	f7f9 febe 	bl	8001c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007eb8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007eca:	230a      	movs	r3, #10
 8007ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ece:	f107 0314 	add.w	r3, r7, #20
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4812      	ldr	r0, [pc, #72]	; (8007f20 <HAL_HCD_MspInit+0xc0>)
 8007ed6:	f7f9 fead 	bl	8001c34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007eda:	4b10      	ldr	r3, [pc, #64]	; (8007f1c <HAL_HCD_MspInit+0xbc>)
 8007edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ede:	4a0f      	ldr	r2, [pc, #60]	; (8007f1c <HAL_HCD_MspInit+0xbc>)
 8007ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee4:	6353      	str	r3, [r2, #52]	; 0x34
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60fb      	str	r3, [r7, #12]
 8007eea:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <HAL_HCD_MspInit+0xbc>)
 8007eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eee:	4a0b      	ldr	r2, [pc, #44]	; (8007f1c <HAL_HCD_MspInit+0xbc>)
 8007ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8007ef6:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <HAL_HCD_MspInit+0xbc>)
 8007ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007efe:	60fb      	str	r3, [r7, #12]
 8007f00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f02:	2200      	movs	r2, #0
 8007f04:	2100      	movs	r1, #0
 8007f06:	2043      	movs	r0, #67	; 0x43
 8007f08:	f7f9 fb53 	bl	80015b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f0c:	2043      	movs	r0, #67	; 0x43
 8007f0e:	f7f9 fb6c 	bl	80015ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f12:	bf00      	nop
 8007f14:	3728      	adds	r7, #40	; 0x28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	40023800 	.word	0x40023800
 8007f20:	40020000 	.word	0x40020000

08007f24 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff fbb5 	bl	80076a2 <USBH_LL_IncTimer>
}
 8007f38:	bf00      	nop
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7ff fbed 	bl	800772e <USBH_LL_Connect>
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7ff fbf6 	bl	800775c <USBH_LL_Disconnect>
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
 8007f84:	4613      	mov	r3, r2
 8007f86:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7ff fba7 	bl	80076f6 <USBH_LL_PortEnabled>
}
 8007fa8:	bf00      	nop
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff fba7 	bl	8007712 <USBH_LL_PortDisabled>
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d12a      	bne.n	8008034 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007fde:	4a18      	ldr	r2, [pc, #96]	; (8008040 <USBH_LL_Init+0x74>)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	4a15      	ldr	r2, [pc, #84]	; (8008040 <USBH_LL_Init+0x74>)
 8007fea:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fee:	4b14      	ldr	r3, [pc, #80]	; (8008040 <USBH_LL_Init+0x74>)
 8007ff0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007ff4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007ff6:	4b12      	ldr	r3, [pc, #72]	; (8008040 <USBH_LL_Init+0x74>)
 8007ff8:	2208      	movs	r2, #8
 8007ffa:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007ffc:	4b10      	ldr	r3, [pc, #64]	; (8008040 <USBH_LL_Init+0x74>)
 8007ffe:	2201      	movs	r2, #1
 8008000:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008002:	4b0f      	ldr	r3, [pc, #60]	; (8008040 <USBH_LL_Init+0x74>)
 8008004:	2200      	movs	r2, #0
 8008006:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008008:	4b0d      	ldr	r3, [pc, #52]	; (8008040 <USBH_LL_Init+0x74>)
 800800a:	2202      	movs	r2, #2
 800800c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800800e:	4b0c      	ldr	r3, [pc, #48]	; (8008040 <USBH_LL_Init+0x74>)
 8008010:	2200      	movs	r2, #0
 8008012:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008014:	480a      	ldr	r0, [pc, #40]	; (8008040 <USBH_LL_Init+0x74>)
 8008016:	f7f9 ffa8 	bl	8001f6a <HAL_HCD_Init>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008020:	f7f8 fe6a 	bl	8000cf8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008024:	4806      	ldr	r0, [pc, #24]	; (8008040 <USBH_LL_Init+0x74>)
 8008026:	f7fa fb9d 	bl	8002764 <HAL_HCD_GetCurrentFrame>
 800802a:	4603      	mov	r3, r0
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff fb28 	bl	8007684 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20000678 	.word	0x20000678

08008044 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800805a:	4618      	mov	r0, r3
 800805c:	f7fa fb18 	bl	8002690 <HAL_HCD_Start>
 8008060:	4603      	mov	r3, r0
 8008062:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008064:	7bfb      	ldrb	r3, [r7, #15]
 8008066:	4618      	mov	r0, r3
 8008068:	f000 f912 	bl	8008290 <USBH_Get_USB_Status>
 800806c:	4603      	mov	r3, r0
 800806e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008070:	7bbb      	ldrb	r3, [r7, #14]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b084      	sub	sp, #16
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008090:	4618      	mov	r0, r3
 8008092:	f7fa fb20 	bl	80026d6 <HAL_HCD_Stop>
 8008096:	4603      	mov	r3, r0
 8008098:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800809a:	7bfb      	ldrb	r3, [r7, #15]
 800809c:	4618      	mov	r0, r3
 800809e:	f000 f8f7 	bl	8008290 <USBH_Get_USB_Status>
 80080a2:	4603      	mov	r3, r0
 80080a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3710      	adds	r7, #16
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	460b      	mov	r3, r1
 80080ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080c2:	78fa      	ldrb	r2, [r7, #3]
 80080c4:	4611      	mov	r1, r2
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fa fb37 	bl	800273a <HAL_HCD_HC_GetXferCount>
 80080cc:	4603      	mov	r3, r0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80080d6:	b590      	push	{r4, r7, lr}
 80080d8:	b089      	sub	sp, #36	; 0x24
 80080da:	af04      	add	r7, sp, #16
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	4608      	mov	r0, r1
 80080e0:	4611      	mov	r1, r2
 80080e2:	461a      	mov	r2, r3
 80080e4:	4603      	mov	r3, r0
 80080e6:	70fb      	strb	r3, [r7, #3]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70bb      	strb	r3, [r7, #2]
 80080ec:	4613      	mov	r3, r2
 80080ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80080fe:	787c      	ldrb	r4, [r7, #1]
 8008100:	78ba      	ldrb	r2, [r7, #2]
 8008102:	78f9      	ldrb	r1, [r7, #3]
 8008104:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008106:	9302      	str	r3, [sp, #8]
 8008108:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008112:	9300      	str	r3, [sp, #0]
 8008114:	4623      	mov	r3, r4
 8008116:	f7f9 ff8a 	bl	800202e <HAL_HCD_HC_Init>
 800811a:	4603      	mov	r3, r0
 800811c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800811e:	7bfb      	ldrb	r3, [r7, #15]
 8008120:	4618      	mov	r0, r3
 8008122:	f000 f8b5 	bl	8008290 <USBH_Get_USB_Status>
 8008126:	4603      	mov	r3, r0
 8008128:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800812a:	7bbb      	ldrb	r3, [r7, #14]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3714      	adds	r7, #20
 8008130:	46bd      	mov	sp, r7
 8008132:	bd90      	pop	{r4, r7, pc}

08008134 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008144:	2300      	movs	r3, #0
 8008146:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800814e:	78fa      	ldrb	r2, [r7, #3]
 8008150:	4611      	mov	r1, r2
 8008152:	4618      	mov	r0, r3
 8008154:	f7fa f803 	bl	800215e <HAL_HCD_HC_Halt>
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800815c:	7bfb      	ldrb	r3, [r7, #15]
 800815e:	4618      	mov	r0, r3
 8008160:	f000 f896 	bl	8008290 <USBH_Get_USB_Status>
 8008164:	4603      	mov	r3, r0
 8008166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008168:	7bbb      	ldrb	r3, [r7, #14]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008172:	b590      	push	{r4, r7, lr}
 8008174:	b089      	sub	sp, #36	; 0x24
 8008176:	af04      	add	r7, sp, #16
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	4608      	mov	r0, r1
 800817c:	4611      	mov	r1, r2
 800817e:	461a      	mov	r2, r3
 8008180:	4603      	mov	r3, r0
 8008182:	70fb      	strb	r3, [r7, #3]
 8008184:	460b      	mov	r3, r1
 8008186:	70bb      	strb	r3, [r7, #2]
 8008188:	4613      	mov	r3, r2
 800818a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800819a:	787c      	ldrb	r4, [r7, #1]
 800819c:	78ba      	ldrb	r2, [r7, #2]
 800819e:	78f9      	ldrb	r1, [r7, #3]
 80081a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081a4:	9303      	str	r3, [sp, #12]
 80081a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081a8:	9302      	str	r3, [sp, #8]
 80081aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ac:	9301      	str	r3, [sp, #4]
 80081ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	4623      	mov	r3, r4
 80081b6:	f7f9 fff5 	bl	80021a4 <HAL_HCD_HC_SubmitRequest>
 80081ba:	4603      	mov	r3, r0
 80081bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 f865 	bl	8008290 <USBH_Get_USB_Status>
 80081c6:	4603      	mov	r3, r0
 80081c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd90      	pop	{r4, r7, pc}

080081d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081e6:	78fa      	ldrb	r2, [r7, #3]
 80081e8:	4611      	mov	r1, r2
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fa fa90 	bl	8002710 <HAL_HCD_HC_GetURBState>
 80081f0:	4603      	mov	r3, r0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	460b      	mov	r3, r1
 8008204:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800820c:	2b01      	cmp	r3, #1
 800820e:	d103      	bne.n	8008218 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008210:	78fb      	ldrb	r3, [r7, #3]
 8008212:	4618      	mov	r0, r3
 8008214:	f000 f868 	bl	80082e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008218:	20c8      	movs	r0, #200	; 0xc8
 800821a:	f7f9 f8cd 	bl	80013b8 <HAL_Delay>
  return USBH_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
 8008234:	4613      	mov	r3, r2
 8008236:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800823e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008240:	78fa      	ldrb	r2, [r7, #3]
 8008242:	68f9      	ldr	r1, [r7, #12]
 8008244:	4613      	mov	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	4413      	add	r3, r2
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	440b      	add	r3, r1
 800824e:	333b      	adds	r3, #59	; 0x3b
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d00a      	beq.n	800826c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008256:	78fa      	ldrb	r2, [r7, #3]
 8008258:	68f9      	ldr	r1, [r7, #12]
 800825a:	4613      	mov	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	00db      	lsls	r3, r3, #3
 8008262:	440b      	add	r3, r1
 8008264:	3350      	adds	r3, #80	; 0x50
 8008266:	78ba      	ldrb	r2, [r7, #2]
 8008268:	701a      	strb	r2, [r3, #0]
 800826a:	e009      	b.n	8008280 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800826c:	78fa      	ldrb	r2, [r7, #3]
 800826e:	68f9      	ldr	r1, [r7, #12]
 8008270:	4613      	mov	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	440b      	add	r3, r1
 800827a:	3351      	adds	r3, #81	; 0x51
 800827c:	78ba      	ldrb	r2, [r7, #2]
 800827e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3714      	adds	r7, #20
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
	...

08008290 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	4603      	mov	r3, r0
 8008298:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800829a:	2300      	movs	r3, #0
 800829c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d817      	bhi.n	80082d4 <USBH_Get_USB_Status+0x44>
 80082a4:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <USBH_Get_USB_Status+0x1c>)
 80082a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082aa:	bf00      	nop
 80082ac:	080082bd 	.word	0x080082bd
 80082b0:	080082c3 	.word	0x080082c3
 80082b4:	080082c9 	.word	0x080082c9
 80082b8:	080082cf 	.word	0x080082cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
    break;
 80082c0:	e00b      	b.n	80082da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80082c2:	2302      	movs	r3, #2
 80082c4:	73fb      	strb	r3, [r7, #15]
    break;
 80082c6:	e008      	b.n	80082da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80082c8:	2301      	movs	r3, #1
 80082ca:	73fb      	strb	r3, [r7, #15]
    break;
 80082cc:	e005      	b.n	80082da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80082ce:	2302      	movs	r3, #2
 80082d0:	73fb      	strb	r3, [r7, #15]
    break;
 80082d2:	e002      	b.n	80082da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80082d4:	2302      	movs	r3, #2
 80082d6:	73fb      	strb	r3, [r7, #15]
    break;
 80082d8:	bf00      	nop
  }
  return usb_status;
 80082da:	7bfb      	ldrb	r3, [r7, #15]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	4603      	mov	r3, r0
 80082f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80082f2:	79fb      	ldrb	r3, [r7, #7]
 80082f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80082fc:	2301      	movs	r3, #1
 80082fe:	73fb      	strb	r3, [r7, #15]
 8008300:	e001      	b.n	8008306 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008302:	2300      	movs	r3, #0
 8008304:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	461a      	mov	r2, r3
 800830a:	2101      	movs	r1, #1
 800830c:	4803      	ldr	r0, [pc, #12]	; (800831c <MX_DriverVbusFS+0x34>)
 800830e:	f7f9 fe13 	bl	8001f38 <HAL_GPIO_WritePin>
}
 8008312:	bf00      	nop
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	40020800 	.word	0x40020800

08008320 <__errno>:
 8008320:	4b01      	ldr	r3, [pc, #4]	; (8008328 <__errno+0x8>)
 8008322:	6818      	ldr	r0, [r3, #0]
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	2000002c 	.word	0x2000002c

0800832c <__libc_init_array>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	4e0d      	ldr	r6, [pc, #52]	; (8008364 <__libc_init_array+0x38>)
 8008330:	4c0d      	ldr	r4, [pc, #52]	; (8008368 <__libc_init_array+0x3c>)
 8008332:	1ba4      	subs	r4, r4, r6
 8008334:	10a4      	asrs	r4, r4, #2
 8008336:	2500      	movs	r5, #0
 8008338:	42a5      	cmp	r5, r4
 800833a:	d109      	bne.n	8008350 <__libc_init_array+0x24>
 800833c:	4e0b      	ldr	r6, [pc, #44]	; (800836c <__libc_init_array+0x40>)
 800833e:	4c0c      	ldr	r4, [pc, #48]	; (8008370 <__libc_init_array+0x44>)
 8008340:	f000 f8ea 	bl	8008518 <_init>
 8008344:	1ba4      	subs	r4, r4, r6
 8008346:	10a4      	asrs	r4, r4, #2
 8008348:	2500      	movs	r5, #0
 800834a:	42a5      	cmp	r5, r4
 800834c:	d105      	bne.n	800835a <__libc_init_array+0x2e>
 800834e:	bd70      	pop	{r4, r5, r6, pc}
 8008350:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008354:	4798      	blx	r3
 8008356:	3501      	adds	r5, #1
 8008358:	e7ee      	b.n	8008338 <__libc_init_array+0xc>
 800835a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800835e:	4798      	blx	r3
 8008360:	3501      	adds	r5, #1
 8008362:	e7f2      	b.n	800834a <__libc_init_array+0x1e>
 8008364:	0800855c 	.word	0x0800855c
 8008368:	0800855c 	.word	0x0800855c
 800836c:	0800855c 	.word	0x0800855c
 8008370:	08008560 	.word	0x08008560

08008374 <malloc>:
 8008374:	4b02      	ldr	r3, [pc, #8]	; (8008380 <malloc+0xc>)
 8008376:	4601      	mov	r1, r0
 8008378:	6818      	ldr	r0, [r3, #0]
 800837a:	f000 b861 	b.w	8008440 <_malloc_r>
 800837e:	bf00      	nop
 8008380:	2000002c 	.word	0x2000002c

08008384 <free>:
 8008384:	4b02      	ldr	r3, [pc, #8]	; (8008390 <free+0xc>)
 8008386:	4601      	mov	r1, r0
 8008388:	6818      	ldr	r0, [r3, #0]
 800838a:	f000 b80b 	b.w	80083a4 <_free_r>
 800838e:	bf00      	nop
 8008390:	2000002c 	.word	0x2000002c

08008394 <memset>:
 8008394:	4402      	add	r2, r0
 8008396:	4603      	mov	r3, r0
 8008398:	4293      	cmp	r3, r2
 800839a:	d100      	bne.n	800839e <memset+0xa>
 800839c:	4770      	bx	lr
 800839e:	f803 1b01 	strb.w	r1, [r3], #1
 80083a2:	e7f9      	b.n	8008398 <memset+0x4>

080083a4 <_free_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4605      	mov	r5, r0
 80083a8:	2900      	cmp	r1, #0
 80083aa:	d045      	beq.n	8008438 <_free_r+0x94>
 80083ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083b0:	1f0c      	subs	r4, r1, #4
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	bfb8      	it	lt
 80083b6:	18e4      	addlt	r4, r4, r3
 80083b8:	f000 f8ac 	bl	8008514 <__malloc_lock>
 80083bc:	4a1f      	ldr	r2, [pc, #124]	; (800843c <_free_r+0x98>)
 80083be:	6813      	ldr	r3, [r2, #0]
 80083c0:	4610      	mov	r0, r2
 80083c2:	b933      	cbnz	r3, 80083d2 <_free_r+0x2e>
 80083c4:	6063      	str	r3, [r4, #4]
 80083c6:	6014      	str	r4, [r2, #0]
 80083c8:	4628      	mov	r0, r5
 80083ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083ce:	f000 b8a2 	b.w	8008516 <__malloc_unlock>
 80083d2:	42a3      	cmp	r3, r4
 80083d4:	d90c      	bls.n	80083f0 <_free_r+0x4c>
 80083d6:	6821      	ldr	r1, [r4, #0]
 80083d8:	1862      	adds	r2, r4, r1
 80083da:	4293      	cmp	r3, r2
 80083dc:	bf04      	itt	eq
 80083de:	681a      	ldreq	r2, [r3, #0]
 80083e0:	685b      	ldreq	r3, [r3, #4]
 80083e2:	6063      	str	r3, [r4, #4]
 80083e4:	bf04      	itt	eq
 80083e6:	1852      	addeq	r2, r2, r1
 80083e8:	6022      	streq	r2, [r4, #0]
 80083ea:	6004      	str	r4, [r0, #0]
 80083ec:	e7ec      	b.n	80083c8 <_free_r+0x24>
 80083ee:	4613      	mov	r3, r2
 80083f0:	685a      	ldr	r2, [r3, #4]
 80083f2:	b10a      	cbz	r2, 80083f8 <_free_r+0x54>
 80083f4:	42a2      	cmp	r2, r4
 80083f6:	d9fa      	bls.n	80083ee <_free_r+0x4a>
 80083f8:	6819      	ldr	r1, [r3, #0]
 80083fa:	1858      	adds	r0, r3, r1
 80083fc:	42a0      	cmp	r0, r4
 80083fe:	d10b      	bne.n	8008418 <_free_r+0x74>
 8008400:	6820      	ldr	r0, [r4, #0]
 8008402:	4401      	add	r1, r0
 8008404:	1858      	adds	r0, r3, r1
 8008406:	4282      	cmp	r2, r0
 8008408:	6019      	str	r1, [r3, #0]
 800840a:	d1dd      	bne.n	80083c8 <_free_r+0x24>
 800840c:	6810      	ldr	r0, [r2, #0]
 800840e:	6852      	ldr	r2, [r2, #4]
 8008410:	605a      	str	r2, [r3, #4]
 8008412:	4401      	add	r1, r0
 8008414:	6019      	str	r1, [r3, #0]
 8008416:	e7d7      	b.n	80083c8 <_free_r+0x24>
 8008418:	d902      	bls.n	8008420 <_free_r+0x7c>
 800841a:	230c      	movs	r3, #12
 800841c:	602b      	str	r3, [r5, #0]
 800841e:	e7d3      	b.n	80083c8 <_free_r+0x24>
 8008420:	6820      	ldr	r0, [r4, #0]
 8008422:	1821      	adds	r1, r4, r0
 8008424:	428a      	cmp	r2, r1
 8008426:	bf04      	itt	eq
 8008428:	6811      	ldreq	r1, [r2, #0]
 800842a:	6852      	ldreq	r2, [r2, #4]
 800842c:	6062      	str	r2, [r4, #4]
 800842e:	bf04      	itt	eq
 8008430:	1809      	addeq	r1, r1, r0
 8008432:	6021      	streq	r1, [r4, #0]
 8008434:	605c      	str	r4, [r3, #4]
 8008436:	e7c7      	b.n	80083c8 <_free_r+0x24>
 8008438:	bd38      	pop	{r3, r4, r5, pc}
 800843a:	bf00      	nop
 800843c:	200000b8 	.word	0x200000b8

08008440 <_malloc_r>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	1ccd      	adds	r5, r1, #3
 8008444:	f025 0503 	bic.w	r5, r5, #3
 8008448:	3508      	adds	r5, #8
 800844a:	2d0c      	cmp	r5, #12
 800844c:	bf38      	it	cc
 800844e:	250c      	movcc	r5, #12
 8008450:	2d00      	cmp	r5, #0
 8008452:	4606      	mov	r6, r0
 8008454:	db01      	blt.n	800845a <_malloc_r+0x1a>
 8008456:	42a9      	cmp	r1, r5
 8008458:	d903      	bls.n	8008462 <_malloc_r+0x22>
 800845a:	230c      	movs	r3, #12
 800845c:	6033      	str	r3, [r6, #0]
 800845e:	2000      	movs	r0, #0
 8008460:	bd70      	pop	{r4, r5, r6, pc}
 8008462:	f000 f857 	bl	8008514 <__malloc_lock>
 8008466:	4a21      	ldr	r2, [pc, #132]	; (80084ec <_malloc_r+0xac>)
 8008468:	6814      	ldr	r4, [r2, #0]
 800846a:	4621      	mov	r1, r4
 800846c:	b991      	cbnz	r1, 8008494 <_malloc_r+0x54>
 800846e:	4c20      	ldr	r4, [pc, #128]	; (80084f0 <_malloc_r+0xb0>)
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	b91b      	cbnz	r3, 800847c <_malloc_r+0x3c>
 8008474:	4630      	mov	r0, r6
 8008476:	f000 f83d 	bl	80084f4 <_sbrk_r>
 800847a:	6020      	str	r0, [r4, #0]
 800847c:	4629      	mov	r1, r5
 800847e:	4630      	mov	r0, r6
 8008480:	f000 f838 	bl	80084f4 <_sbrk_r>
 8008484:	1c43      	adds	r3, r0, #1
 8008486:	d124      	bne.n	80084d2 <_malloc_r+0x92>
 8008488:	230c      	movs	r3, #12
 800848a:	6033      	str	r3, [r6, #0]
 800848c:	4630      	mov	r0, r6
 800848e:	f000 f842 	bl	8008516 <__malloc_unlock>
 8008492:	e7e4      	b.n	800845e <_malloc_r+0x1e>
 8008494:	680b      	ldr	r3, [r1, #0]
 8008496:	1b5b      	subs	r3, r3, r5
 8008498:	d418      	bmi.n	80084cc <_malloc_r+0x8c>
 800849a:	2b0b      	cmp	r3, #11
 800849c:	d90f      	bls.n	80084be <_malloc_r+0x7e>
 800849e:	600b      	str	r3, [r1, #0]
 80084a0:	50cd      	str	r5, [r1, r3]
 80084a2:	18cc      	adds	r4, r1, r3
 80084a4:	4630      	mov	r0, r6
 80084a6:	f000 f836 	bl	8008516 <__malloc_unlock>
 80084aa:	f104 000b 	add.w	r0, r4, #11
 80084ae:	1d23      	adds	r3, r4, #4
 80084b0:	f020 0007 	bic.w	r0, r0, #7
 80084b4:	1ac3      	subs	r3, r0, r3
 80084b6:	d0d3      	beq.n	8008460 <_malloc_r+0x20>
 80084b8:	425a      	negs	r2, r3
 80084ba:	50e2      	str	r2, [r4, r3]
 80084bc:	e7d0      	b.n	8008460 <_malloc_r+0x20>
 80084be:	428c      	cmp	r4, r1
 80084c0:	684b      	ldr	r3, [r1, #4]
 80084c2:	bf16      	itet	ne
 80084c4:	6063      	strne	r3, [r4, #4]
 80084c6:	6013      	streq	r3, [r2, #0]
 80084c8:	460c      	movne	r4, r1
 80084ca:	e7eb      	b.n	80084a4 <_malloc_r+0x64>
 80084cc:	460c      	mov	r4, r1
 80084ce:	6849      	ldr	r1, [r1, #4]
 80084d0:	e7cc      	b.n	800846c <_malloc_r+0x2c>
 80084d2:	1cc4      	adds	r4, r0, #3
 80084d4:	f024 0403 	bic.w	r4, r4, #3
 80084d8:	42a0      	cmp	r0, r4
 80084da:	d005      	beq.n	80084e8 <_malloc_r+0xa8>
 80084dc:	1a21      	subs	r1, r4, r0
 80084de:	4630      	mov	r0, r6
 80084e0:	f000 f808 	bl	80084f4 <_sbrk_r>
 80084e4:	3001      	adds	r0, #1
 80084e6:	d0cf      	beq.n	8008488 <_malloc_r+0x48>
 80084e8:	6025      	str	r5, [r4, #0]
 80084ea:	e7db      	b.n	80084a4 <_malloc_r+0x64>
 80084ec:	200000b8 	.word	0x200000b8
 80084f0:	200000bc 	.word	0x200000bc

080084f4 <_sbrk_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4c06      	ldr	r4, [pc, #24]	; (8008510 <_sbrk_r+0x1c>)
 80084f8:	2300      	movs	r3, #0
 80084fa:	4605      	mov	r5, r0
 80084fc:	4608      	mov	r0, r1
 80084fe:	6023      	str	r3, [r4, #0]
 8008500:	f7f8 fe72 	bl	80011e8 <_sbrk>
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	d102      	bne.n	800850e <_sbrk_r+0x1a>
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	b103      	cbz	r3, 800850e <_sbrk_r+0x1a>
 800850c:	602b      	str	r3, [r5, #0]
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	2000093c 	.word	0x2000093c

08008514 <__malloc_lock>:
 8008514:	4770      	bx	lr

08008516 <__malloc_unlock>:
 8008516:	4770      	bx	lr

08008518 <_init>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	bf00      	nop
 800851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851e:	bc08      	pop	{r3}
 8008520:	469e      	mov	lr, r3
 8008522:	4770      	bx	lr

08008524 <_fini>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr
